{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/uploads/touxiang.jpg","path":"uploads/touxiang.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/touxiang.jpg","path":"images/touxiang.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"source/download/ipset_DD","path":"download/ipset_DD","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1599961165780},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1599961165780},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1599961165780},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1599961165781},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1599961165781},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1599961165781},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1599961165781},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1599961165781},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1599961165781},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1599961165781},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1599961165781},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1599961165781},{"_id":"themes/next/_config.yml","hash":"33dee8cdb70c1b7a8bf71bf6a2f6ec7593ac10bd","modified":1611541482765},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1599961165781},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1599961165781},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1599961165783},{"_id":"source/_posts/2019阅读史.md","hash":"cfe982a4093bbcbc2eb9ac624185869813bf3347","modified":1599961165766},{"_id":"source/_posts/2020年终-2021年初.md","hash":"9a209eb56aebe1674cade34f01cd675dc09c1c4a","modified":1609419099000},{"_id":"source/_posts/2020阅读史.md","hash":"95e1410dd132bdd7cafa7fd6f8f1ed6bc76749bc","modified":1610422654000},{"_id":"source/_posts/2021阅读史.md","hash":"2f24ffd9ec59ddb8de3c792b3b4a983f4b183be9","modified":1610528518000},{"_id":"source/_posts/APISIX调研和使用.md","hash":"6e4292a0e885fddd96b13b89f0ec99a6660b7ee7","modified":1602732268000},{"_id":"source/_posts/Docker使用.md","hash":"3c5e6aae3c5a619610a0b37b6385fd24a5a5617f","modified":1600054096000},{"_id":"source/_posts/Netfilter介绍及其实现原理.md","hash":"df62ae6a40a27c86efa12b137852b77f2d81354f","modified":1610960742000},{"_id":"source/_posts/TLV数据传输协议及简单实现-C.md","hash":"80bae9f185558a6961926d4ce917e2b7f98943f9","modified":1599961165766},{"_id":"source/_posts/hexo博客使用指南.md","hash":"a91afa8541492b4b2341021827d6e98103ad7984","modified":1611545379000},{"_id":"source/_posts/ipset消息通信.md","hash":"9d12887bf089568d7b87a11e8e9162296b3b6e73","modified":1600053815000},{"_id":"source/_posts/libipset源码分析.md","hash":"e264a5d9fe7791eb7b7de111a33e22466aacaf44","modified":1599961165767},{"_id":"source/_posts/•ᴗ•颜文字•ᴗ•.md","hash":"d18bcbfcd97feb884dbb3d533ef93c9f725bbdf4","modified":1599961165769},{"_id":"source/_posts/《C语言缺陷与陷阱》读书笔记.md","hash":"95acef339a9ade661013855479bb75005934436a","modified":1599961165769},{"_id":"source/_posts/《mysql必知必会》读书笔记.md","hash":"a047830143f287949cc9e0b881d8d4456d2a743d","modified":1611545368000},{"_id":"source/_posts/《怪诞行为学：可预测的非理性》读书笔记.md","hash":"5218bc66458101627a9e98d3c97ec82f65dfc927","modified":1610712686000},{"_id":"source/_posts/《高性能mysql第三版》读书笔记.md","hash":"19e97f0b9ebbcb667decd9970f846e576307235f","modified":1604563826000},{"_id":"source/_posts/关于如何写文档.md","hash":"1b10094bfc7ca79545054bcbf62edc8191049997","modified":1600053701000},{"_id":"source/_posts/如何进行http压测.md","hash":"ddd4691114c8c9a4424cf305018ad3aba0b17dfd","modified":1608891694000},{"_id":"source/_posts/学习和学习方法-问题和解决问题.md","hash":"fc1b7f8fa96235227b3723e428a1bbd22aeed9cf","modified":1599961165769},{"_id":"source/_posts/常用技术汇总.md","hash":"6523b01866a7ee8c182a3d3d5bb12434b13b7121","modified":1609135945000},{"_id":"source/_posts/待阅读书籍.md","hash":"c22efd0ee4e2f5ef7336fcf45b3e1cfcf6afddb2","modified":1609991173000},{"_id":"source/_posts/技术札记.md","hash":"ce04fcb0ced3be2f675a037a2b2339a647ac7a6b","modified":1611040778000},{"_id":"source/_posts/非常有用的网站-持续更新.md","hash":"606d80e6158bc0a7508b88396d133951ef511194","modified":1608804764000},{"_id":"source/categories/index.md","hash":"164a49f8022eb13d6fe60be932bb7d533d48e94c","modified":1599961165769},{"_id":"source/tags/index.md","hash":"12128458881c6fbdba4d2edc2a03b1e33677b224","modified":1599961165772},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1599961165780},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1599961165781},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1599961165781},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1599961165781},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1599961165781},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1599961165781},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1599961165781},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1599961165781},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1599961165781},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1599961165781},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1599961165781},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1599961165781},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1599961165781},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f83194a9bbd5964bc9fb5b5ef298135eaeefefb3","modified":1599961165781},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1599961165781},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1599961165781},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1599961165781},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1599961165783},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1599961165783},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1599961165783},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1599961165783},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1599961165783},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1599961165783},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1599961165783},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1599961165783},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1599961165783},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1599961165801},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1599961165801},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1599961165801},{"_id":"source/uploads/touxiang.jpg","hash":"eee2f718b64598ec3733fb403f6fea69eb8419e4","modified":1599961165772},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599961165786},{"_id":"source/_posts/Netfilter介绍及其实现原理/Location-of-netfilter-and-eBPF-hooks.png","hash":"14c0f6c695cff2af584408db7db6990857c37e4f","modified":1600054482000},{"_id":"source/_posts/Netfilter介绍及其实现原理/Netfilter hooks.png","hash":"0df93b10a6435436e296291636361e6fbc359566","modified":1600054482000},{"_id":"source/_posts/Netfilter介绍及其实现原理/Netfilter内部数据包处理流程.drawio.png","hash":"aa1c0586b2813a211b117b514db6a13a1d2a2307","modified":1600054483000},{"_id":"source/_posts/Netfilter介绍及其实现原理/Netfilter扩展机制示意图.png","hash":"c9a678d46fa282bf594e4437ce79869b52cd6a30","modified":1600054483000},{"_id":"source/_posts/Netfilter介绍及其实现原理/Netfilter架构.png","hash":"f22b21fdec05bcf1f671a11e9ff482f3c36cfb63","modified":1600054482000},{"_id":"source/_posts/Netfilter介绍及其实现原理/[iptables-链和表.png","hash":"f2078fc1e5dd067cc64231c72fc083794bb514d6","modified":1600054481000},{"_id":"source/_posts/Netfilter介绍及其实现原理/conntrack一般连接建立1.jpg","hash":"3e3da6969e724b84b19c77f6cd6568ce69d76f93","modified":1602486779000},{"_id":"source/_posts/Netfilter介绍及其实现原理/conntrack一般连接建立2.jpg","hash":"8b4d72780dce9dd0c18149c079769b01457bf95f","modified":1602486786000},{"_id":"source/_posts/Netfilter介绍及其实现原理/conntrack一般连接建立3.jpg","hash":"07c3f9c692d39c9aa6a8c8e3bfa2ef982767d5ed","modified":1602486795000},{"_id":"source/_posts/Netfilter介绍及其实现原理/conntrack的存储.jpg","hash":"c9e6c06322da06ecd3e2692ea6e6a31611845763","modified":1602486133000},{"_id":"source/_posts/Netfilter介绍及其实现原理/ipset_source_flow.png","hash":"c49d886fed2100d15e154e090e3e2627900cd1c2","modified":1600054482000},{"_id":"source/_posts/Netfilter介绍及其实现原理/ipt_entry存储分布示意图.png","hash":"81db73d3e950edf896065d4a92267a112624f812","modified":1600054482000},{"_id":"source/_posts/Netfilter介绍及其实现原理/iptables内核通信.jpg","hash":"0adab20b0da8824bd1a4ee48535773a35779839e","modified":1600054482000},{"_id":"source/_posts/Netfilter介绍及其实现原理/netfilter包过滤.drawio.png","hash":"865866368a614241be2b9262eb5c126eae98214b","modified":1600054482000},{"_id":"source/_posts/Netfilter介绍及其实现原理/netfilter模块注册过程.drawio.png","hash":"928c39762c8c8ce77eb2235e04292744ec4c4afd","modified":1600054483000},{"_id":"source/_posts/Netfilter介绍及其实现原理/netlink数据关系.png","hash":"24d52b643857d6eb2c231e2cc3b9722b69c21b6f","modified":1600054483000},{"_id":"source/_posts/Netfilter介绍及其实现原理/nf_ct_ext数据结构图.jpg","hash":"b591af39a76f77d6f0be72dd293d1bfad19f985c","modified":1600743476000},{"_id":"source/_posts/Netfilter介绍及其实现原理/setsockopt流程图.drawio.png","hash":"144caa5f5348f57f2f79de21673a581434c0c31d","modified":1600054483000},{"_id":"source/_posts/Netfilter介绍及其实现原理/期望链接.jpg","hash":"dbfa7c2dc950c1d56ac15aef9c9200c0472cc851","modified":1600054482000},{"_id":"source/_posts/Netfilter介绍及其实现原理/规则提交函数调用示意图.png","hash":"2f3c2b2017d608280279dfe63759a4874877dd56","modified":1600054482000},{"_id":"source/_posts/TLV数据传输协议及简单实现-C/TLV.png","hash":"e6380ec7d030fb9259fafc47bbfbfa1177caf8f9","modified":1599961165766},{"_id":"source/_posts/ipset消息通信/netlink数据关系.png","hash":"24d52b643857d6eb2c231e2cc3b9722b69c21b6f","modified":1599961165767},{"_id":"source/_posts/libipset源码分析/args.jpg","hash":"f30e20f1eea601f7eb8ba6f73c251793c3daa1d2","modified":1599961165767},{"_id":"source/_posts/libipset源码分析/errcode.jpg","hash":"8f8696cac41a77f355383eed427a5b027a091472","modified":1599961165767},{"_id":"source/_posts/libipset源码分析/haship.jpg","hash":"9c6afdb5509d199744701a131a32607b6f4a2069","modified":1599961165767},{"_id":"source/_posts/libipset源码分析/ipset.jpg","hash":"79057d609d65c842a5dac6f4f0529f744cda8964","modified":1599961165767},{"_id":"source/_posts/libipset源码分析/ipset_source_flow.png","hash":"c49d886fed2100d15e154e090e3e2627900cd1c2","modified":1599961165768},{"_id":"source/_posts/libipset源码分析/netlink数据关系.png","hash":"24d52b643857d6eb2c231e2cc3b9722b69c21b6f","modified":1599961165769},{"_id":"source/_posts/libipset源码分析/protocol.jpg","hash":"c0af0c106c24ab6756121b6c1c5b75b582f22db8","modified":1599961165769},{"_id":"source/_posts/《C语言缺陷与陷阱》读书笔记/优化后汇编代码.png","hash":"56d3c80b5b08ec59221be7a167c1561697c19f30","modified":1599961165769},{"_id":"source/_posts/《C语言缺陷与陷阱》读书笔记/原始汇编代码.png","hash":"a304729135d0888a407a80ff68619aa10406215f","modified":1599961165769},{"_id":"source/_posts/技术札记/ssh免密登录原理.png","hash":"87b06e138c2f820b8341c13e9783223ae1e6228a","modified":1600053782000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1599961165781},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1599961165781},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"396feef13c2f0a2241d70b28a304e6583d3d32f8","modified":1599961165781},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1599961165781},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1599961165781},{"_id":"themes/next/layout/_macro/post.swig","hash":"7a581143dc91a6448b81b2e76ed5947f81368170","modified":1599961165781},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1599961165781},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1599961165781},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1599961165782},{"_id":"themes/next/layout/_partials/comments.swig","hash":"af47afcc0b9afdb102fd3538cac81c720fbe266d","modified":1599961165782},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d37c92a9751fc530db74a72008ce1aec15b069e7","modified":1611311071391},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1599961165782},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1599961165782},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1599961165782},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1599961165782},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1599961165782},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1599961165782},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1599961165782},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1599961165782},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1599961165782},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1599961165782},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1599961165782},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1599961165782},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1599961165783},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1599961165783},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1599961165783},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1599961165783},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1599961165783},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1599961165783},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1599961165783},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1599961165783},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1599961165783},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1599961165783},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1599961165783},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1599961165786},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1599961165786},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1599961165786},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1599961165786},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1599961165786},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1599961165786},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1599961165786},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1599961165786},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1599961165786},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1599961165786},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1599961165786},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1599961165786},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1599961165786},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1599961165786},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1599961165786},{"_id":"source/_posts/APISIX调研和使用/radixtree_init流程图.drawio.png","hash":"33846b4cf396542079a5657c0c305e74ffef0bd8","modified":1601279436000},{"_id":"source/_posts/APISIX调研和使用/radixtree_match流程图.drawio.png","hash":"05ae368c6abfe24af0eca46cd954feacae781d53","modified":1601280075000},{"_id":"source/_posts/Netfilter介绍及其实现原理/iptables 与 ebtables 工作流图.png","hash":"fdd0123ff23052d515d8ee9d9842a2fba48f0f35","modified":1600054482000},{"_id":"source/_posts/Netfilter介绍及其实现原理/iptables-表和链.png","hash":"da5afb1dad1e79142a11413e2bf64442de15c1c4","modified":1600054482000},{"_id":"source/_posts/Netfilter介绍及其实现原理/ip报文hook点.drawio.png","hash":"9ebc13b342932ee0863858b7a4ce39c9b9401b9c","modified":1600054482000},{"_id":"source/_posts/libipset源码分析/iptables-nfhipac-ipset.jpg","hash":"e96677fa9fabaa0f5521d123a5b47f171bae7cd9","modified":1599961165768},{"_id":"source/_posts/《高性能mysql第三版》读书笔记/mysql架构图.jpg","hash":"311e7ef4a03b7b0f48503dfee861b6f19096ee0e","modified":1603790430000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599961165782},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599961165782},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599961165785},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599961165785},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599961165785},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599961165786},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599961165786},{"_id":"themes/next/source/images/touxiang.jpg","hash":"eee2f718b64598ec3733fb403f6fea69eb8419e4","modified":1599961165787},{"_id":"source/_posts/Netfilter介绍及其实现原理/Netfilter-packet-flow.png","hash":"f57896ab325a3c5d184dc08407c3051f254a8897","modified":1600054482000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1599961165782},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1599961165782},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1599961165782},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1599961165782},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1599961165782},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1599961165782},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1599961165782},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1599961165782},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1599961165782},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1599961165782},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1599961165782},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1599961165782},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1599961165782},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1599961165782},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"4aa55cd424389cf5626aa019c15ef6f3e4da09f2","modified":1600069980214},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1599961165782},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1599961165782},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1599961165782},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1599961165782},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1599961165782},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1599961165782},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1599961165782},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1599961165782},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1599961165782},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1599961165782},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1599961165782},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1599961165782},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"55de28b4ae2fd5799afb49a31bb69ba3b56ecd0c","modified":1599961165782},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1599961165782},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1599961165782},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1599961165782},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1599961165783},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1599961165783},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1599961165783},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1599961165783},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1599961165785},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1599961165785},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1599961165785},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1599961165785},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1599961165786},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1599961165786},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1599961165786},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1599961165786},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1599961165787},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1599961165787},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1599961165787},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1599961165787},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1599961165787},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1599961165787},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1599961165787},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1599961165787},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1599961165787},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1599961165787},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1599961165787},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1599961165789},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1599961165791},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1599961165791},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1599961165792},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1599961165792},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1599961165792},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1599961165792},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1599961165792},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1599961165792},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1599961165792},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1599961165792},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1599961165792},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1599961165796},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1599961165797},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1599961165797},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1599961165797},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1599961165797},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1599961165797},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1599961165797},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1599961165797},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1599961165797},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1599961165798},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1599961165798},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1599961165800},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1599961165800},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1599961165801},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1599961165801},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1599961165801},{"_id":"source/_posts/Netfilter介绍及其实现原理/1920px-Netfilter-packet-flow.png","hash":"02732caf9db3d45803d1e420cf64494f7e4a1d31","modified":1600054482000},{"_id":"source/_posts/技术札记/查找与当前进程通信的所有进程.jpg","hash":"1012b7aea045372fe37f372d3ee5eba409f2eae5","modified":1600053782000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1599961165783},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1599961165783},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1599961165783},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1599961165784},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1599961165785},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1599961165785},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1599961165785},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1599961165785},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1599961165785},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1599961165785},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1599961165786},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1599961165786},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1599961165786},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1599961165787},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1599961165789},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1599961165789},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1599961165791},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1599961165791},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1599961165791},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1599961165791},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1599961165791},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1599961165791},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1599961165791},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1599961165792},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1599961165792},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1599961165793},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1599961165793},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1599961165797},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1599961165800},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1599961165800},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1599961165788},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1599961165788},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1599961165792},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1599961165792},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1599961165792},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1599961165796},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1599961165801},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"742231ce3d0d5fd626002951bd3e6b25d9bc8a2d","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"abe6a268d0b271a993482b715c629c0df9ac9d2c","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1599961165784},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1599961165785},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1599961165785},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1599961165785},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1599961165785},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1599961165785},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1599961165785},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1599961165785},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1599961165785},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1599961165785},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1599961165785},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1599961165785},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1599961165785},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1599961165785},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1599961165785},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1599961165788},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1599961165788},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1599961165788},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1599961165788},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1599961165791},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1599961165791},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1599961165791},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1599961165791},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1599961165791},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1599961165791},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1599961165796},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1599961165793},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1599961165794},{"_id":"source/download/ipset_DD","hash":"e9b3aea180d8149449b73af432a7b471b0bab3e8","modified":1599961165772},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1599961165796},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1599961165791},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1599961165800},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1599961165796}],"Category":[{"name":"随笔","_id":"ckkc0ins90004h9uodge8omi9"},{"name":"技术杂谈","_id":"ckkc0insk000hh9uo51xzem51"},{"name":"网络编程","_id":"ckkc0insn000nh9uooqr5zwk8"},{"name":"其他","_id":"ckkc0insx000zh9uoullwwsdp"},{"name":"笔记","_id":"ckkc0insz0015h9uob6iqjdo1"}],"Data":[],"Page":[{"title":"分类","date":"2019-07-15T10:23:51.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-07-15 18:23:51\ntype: \"categories\"\n---\n","updated":"2020-09-13T01:39:25.769Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckkc0ins50001h9uog1odzg9e","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-07-15T10:23:28.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-07-15 18:23:28\ntype: \"tags\"\n---\n","updated":"2020-09-13T01:39:25.772Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckkc0ins70003h9uoqr9qal8q","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2019阅读史","date":"2019-08-15T08:53:02.000Z","_content":"\n立了一个flag，说要每天看看书，这就开始吧(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n* 《浮生六记》沈复  -2019.07.20\n* 《流浪地球》 -2019.07.24\n* 《山海经》 -2019.08.14...\n* 《人类简史Ⅱ》（第二部） -2019.08.16...\n* 《明朝那些事儿Ⅰ》 -2019.08.20...\n* 《C陷阱与缺陷》-2019.10.18\n* 《三体Ⅰ》(地球往事) -2019.10.18\n* 《三体Ⅱ》(黑暗森林) -2019.11.6\n* 《三体Ⅲ》(死神永生) -2019.11.25\n* 《The Flask Mega-Tutorial》-2019.11.27...","source":"_posts/2019阅读史.md","raw":"---\ntitle: 2019阅读史\ndate: 2019-08-15 16:53:02\ncategories: 随笔\ntags:\n---\n\n立了一个flag，说要每天看看书，这就开始吧(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n* 《浮生六记》沈复  -2019.07.20\n* 《流浪地球》 -2019.07.24\n* 《山海经》 -2019.08.14...\n* 《人类简史Ⅱ》（第二部） -2019.08.16...\n* 《明朝那些事儿Ⅰ》 -2019.08.20...\n* 《C陷阱与缺陷》-2019.10.18\n* 《三体Ⅰ》(地球往事) -2019.10.18\n* 《三体Ⅱ》(黑暗森林) -2019.11.6\n* 《三体Ⅲ》(死神永生) -2019.11.25\n* 《The Flask Mega-Tutorial》-2019.11.27...","slug":"2019阅读史","published":1,"updated":"2020-09-13T01:39:25.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0inrr0000h9uojdwecfzz","content":"<p>立了一个flag，说要每天看看书，这就开始吧(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n<ul>\n<li>《浮生六记》沈复  -2019.07.20</li>\n<li>《流浪地球》 -2019.07.24</li>\n<li>《山海经》 -2019.08.14…</li>\n<li>《人类简史Ⅱ》（第二部） -2019.08.16…</li>\n<li>《明朝那些事儿Ⅰ》 -2019.08.20…</li>\n<li>《C陷阱与缺陷》-2019.10.18</li>\n<li>《三体Ⅰ》(地球往事) -2019.10.18</li>\n<li>《三体Ⅱ》(黑暗森林) -2019.11.6</li>\n<li>《三体Ⅲ》(死神永生) -2019.11.25</li>\n<li>《The Flask Mega-Tutorial》-2019.11.27…</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>立了一个flag，说要每天看看书，这就开始吧(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<ul>\n<li>《浮生六记》沈复  -2019.07.20</li>\n<li>《流浪地球》 -2019.07.24</li>\n<li>《山海经》 -2019.08.14…</li>\n<li>《人类简史Ⅱ》（第二部） -2019.08.16…</li>\n<li>《明朝那些事儿Ⅰ》 -2019.08.20…</li>\n<li>《C陷阱与缺陷》-2019.10.18</li>\n<li>《三体Ⅰ》(地球往事) -2019.10.18</li>\n<li>《三体Ⅱ》(黑暗森林) -2019.11.6</li>\n<li>《三体Ⅲ》(死神永生) -2019.11.25</li>\n<li>《The Flask Mega-Tutorial》-2019.11.27…</li>\n</ul>"},{"title":"2020年终-2021年初","date":"2020-12-31T12:25:14.000Z","_content":"\n一年又要过去了，难得今天心情好，写个总结吧，以后这么写着，也不容易弄丢了。 (•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n\n## 我的2020\n回望这一年的日子，还是完成了很多事情，虽说惰性无法根除，但也没有太过散漫。\n**这一年令人欣喜的事情**：\n1. 我和我家宝大人结婚了。\n   从见家长，到求婚，到领证，都是今年完成的，我也从男票变成丈夫了，心情激动就不说了，婚后更多的感觉是责任来了，特想学习。哈哈。笔芯老婆大人:heart:。\n2. 19年毕业后找到了一个还不错的工作，慢慢的在公司里从新手干到熟练工，再看着各个老同事离开，到现在成了项目主力，就总体而言，工作进展顺利，学习到了很多东西，当然还有很多的细节需要注意和完善。可不要因为是小事就懈怠哟(比如每周总结)。\n3. 开始安排自主学习了，至少从两个月前到今天，每天坚持学习半个小时，笔记本笔记也写了小一半了。还是值得鼓励的。期望明年继续保持啦。\n\n**这一年不足的事情**：\n1. 第一点，还是万年不变的锻炼了吧，前前后后，时断时续，反正最后结果是，小肚子依旧坚挺。\n2. 阅读，看书学习，说到底还是从10月份开始的，之前立的flag一堆，书没看几本，游戏倒是打了不少。\n3. 嘿嘿，竟然一时间想不到了，还算可以吧:laughing:\n\n**其他**：\n1. 看看我工资年末能涨多少，哈哈(记得减去通胀哟)\n\n## 明天的2021\n**期望的事情**：\n1. 继续保持学习的习惯，每天的学习期望坚持。\n2. 工作上保持良好态度，注意细节，学习新技术，定期做总结。\n3. 坚持锻炼！！！！！ 不用太多，务必坚持。\n\n**附**：\n1. 要好好爱我媳妇儿\n2. 父母年纪大了，多多联系\n3. 期望摇到号:wink:\n\n\n**祝2021新年快乐**:tada::tada::tada:","source":"_posts/2020年终-2021年初.md","raw":"---\ntitle: 2020年终-2021年初\ndate: 2020-12-31 20:25:14\ncategories: 随笔\ntags:\n---\n\n一年又要过去了，难得今天心情好，写个总结吧，以后这么写着，也不容易弄丢了。 (•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n\n## 我的2020\n回望这一年的日子，还是完成了很多事情，虽说惰性无法根除，但也没有太过散漫。\n**这一年令人欣喜的事情**：\n1. 我和我家宝大人结婚了。\n   从见家长，到求婚，到领证，都是今年完成的，我也从男票变成丈夫了，心情激动就不说了，婚后更多的感觉是责任来了，特想学习。哈哈。笔芯老婆大人:heart:。\n2. 19年毕业后找到了一个还不错的工作，慢慢的在公司里从新手干到熟练工，再看着各个老同事离开，到现在成了项目主力，就总体而言，工作进展顺利，学习到了很多东西，当然还有很多的细节需要注意和完善。可不要因为是小事就懈怠哟(比如每周总结)。\n3. 开始安排自主学习了，至少从两个月前到今天，每天坚持学习半个小时，笔记本笔记也写了小一半了。还是值得鼓励的。期望明年继续保持啦。\n\n**这一年不足的事情**：\n1. 第一点，还是万年不变的锻炼了吧，前前后后，时断时续，反正最后结果是，小肚子依旧坚挺。\n2. 阅读，看书学习，说到底还是从10月份开始的，之前立的flag一堆，书没看几本，游戏倒是打了不少。\n3. 嘿嘿，竟然一时间想不到了，还算可以吧:laughing:\n\n**其他**：\n1. 看看我工资年末能涨多少，哈哈(记得减去通胀哟)\n\n## 明天的2021\n**期望的事情**：\n1. 继续保持学习的习惯，每天的学习期望坚持。\n2. 工作上保持良好态度，注意细节，学习新技术，定期做总结。\n3. 坚持锻炼！！！！！ 不用太多，务必坚持。\n\n**附**：\n1. 要好好爱我媳妇儿\n2. 父母年纪大了，多多联系\n3. 期望摇到号:wink:\n\n\n**祝2021新年快乐**:tada::tada::tada:","slug":"2020年终-2021年初","published":1,"updated":"2020-12-31T12:51:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0ins60002h9uoam0k0m5t","content":"<p>一年又要过去了，难得今天心情好，写个总结吧，以后这么写着，也不容易弄丢了。 (•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n\n<h2 id=\"我的2020\"><a href=\"#我的2020\" class=\"headerlink\" title=\"我的2020\"></a>我的2020</h2><p>回望这一年的日子，还是完成了很多事情，虽说惰性无法根除，但也没有太过散漫。<br><strong>这一年令人欣喜的事情</strong>：</p>\n<ol>\n<li>我和我家宝大人结婚了。<br>从见家长，到求婚，到领证，都是今年完成的，我也从男票变成丈夫了，心情激动就不说了，婚后更多的感觉是责任来了，特想学习。哈哈。笔芯老婆大人<span class=\"github-emoji\"><span>❤</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span>。</li>\n<li>19年毕业后找到了一个还不错的工作，慢慢的在公司里从新手干到熟练工，再看着各个老同事离开，到现在成了项目主力，就总体而言，工作进展顺利，学习到了很多东西，当然还有很多的细节需要注意和完善。可不要因为是小事就懈怠哟(比如每周总结)。</li>\n<li>开始安排自主学习了，至少从两个月前到今天，每天坚持学习半个小时，笔记本笔记也写了小一半了。还是值得鼓励的。期望明年继续保持啦。</li>\n</ol>\n<p><strong>这一年不足的事情</strong>：</p>\n<ol>\n<li>第一点，还是万年不变的锻炼了吧，前前后后，时断时续，反正最后结果是，小肚子依旧坚挺。</li>\n<li>阅读，看书学习，说到底还是从10月份开始的，之前立的flag一堆，书没看几本，游戏倒是打了不少。</li>\n<li>嘿嘿，竟然一时间想不到了，还算可以吧<span class=\"github-emoji\"><span>😆</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span></li>\n</ol>\n<p><strong>其他</strong>：</p>\n<ol>\n<li>看看我工资年末能涨多少，哈哈(记得减去通胀哟)</li>\n</ol>\n<h2 id=\"明天的2021\"><a href=\"#明天的2021\" class=\"headerlink\" title=\"明天的2021\"></a>明天的2021</h2><p><strong>期望的事情</strong>：</p>\n<ol>\n<li>继续保持学习的习惯，每天的学习期望坚持。</li>\n<li>工作上保持良好态度，注意细节，学习新技术，定期做总结。</li>\n<li>坚持锻炼！！！！！ 不用太多，务必坚持。</li>\n</ol>\n<p><strong>附</strong>：</p>\n<ol>\n<li>要好好爱我媳妇儿</li>\n<li>父母年纪大了，多多联系</li>\n<li>期望摇到号<span class=\"github-emoji\"><span>😉</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span></li>\n</ol>\n<p><strong>祝2021新年快乐</strong><span class=\"github-emoji\"><span>🎉</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span><span class=\"github-emoji\"><span>🎉</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span><span class=\"github-emoji\"><span>🎉</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span></p>\n","site":{"data":{}},"excerpt":"<p>一年又要过去了，难得今天心情好，写个总结吧，以后这么写着，也不容易弄丢了。 (•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<h2 id=\"我的2020\"><a href=\"#我的2020\" class=\"headerlink\" title=\"我的2020\"></a>我的2020</h2><p>回望这一年的日子，还是完成了很多事情，虽说惰性无法根除，但也没有太过散漫。<br><strong>这一年令人欣喜的事情</strong>：</p>\n<ol>\n<li>我和我家宝大人结婚了。<br>从见家长，到求婚，到领证，都是今年完成的，我也从男票变成丈夫了，心情激动就不说了，婚后更多的感觉是责任来了，特想学习。哈哈。笔芯老婆大人:heart:。</li>\n<li>19年毕业后找到了一个还不错的工作，慢慢的在公司里从新手干到熟练工，再看着各个老同事离开，到现在成了项目主力，就总体而言，工作进展顺利，学习到了很多东西，当然还有很多的细节需要注意和完善。可不要因为是小事就懈怠哟(比如每周总结)。</li>\n<li>开始安排自主学习了，至少从两个月前到今天，每天坚持学习半个小时，笔记本笔记也写了小一半了。还是值得鼓励的。期望明年继续保持啦。</li>\n</ol>\n<p><strong>这一年不足的事情</strong>：</p>\n<ol>\n<li>第一点，还是万年不变的锻炼了吧，前前后后，时断时续，反正最后结果是，小肚子依旧坚挺。</li>\n<li>阅读，看书学习，说到底还是从10月份开始的，之前立的flag一堆，书没看几本，游戏倒是打了不少。</li>\n<li>嘿嘿，竟然一时间想不到了，还算可以吧:laughing:</li>\n</ol>\n<p><strong>其他</strong>：</p>\n<ol>\n<li>看看我工资年末能涨多少，哈哈(记得减去通胀哟)</li>\n</ol>\n<h2 id=\"明天的2021\"><a href=\"#明天的2021\" class=\"headerlink\" title=\"明天的2021\"></a>明天的2021</h2><p><strong>期望的事情</strong>：</p>\n<ol>\n<li>继续保持学习的习惯，每天的学习期望坚持。</li>\n<li>工作上保持良好态度，注意细节，学习新技术，定期做总结。</li>\n<li>坚持锻炼！！！！！ 不用太多，务必坚持。</li>\n</ol>\n<p><strong>附</strong>：</p>\n<ol>\n<li>要好好爱我媳妇儿</li>\n<li>父母年纪大了，多多联系</li>\n<li>期望摇到号:wink:</li>\n</ol>\n<p><strong>祝2021新年快乐</strong>:tada::tada::tada:</p>"},{"title":"2020阅读史","date":"2020-09-14T03:14:57.000Z","_content":"\n又偷懒了一年咯 手动滑稽 (•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n* 《微观经济学》曼昆 -2020.10.10-2021.1.12\n* 《mysql必知必会》-2020.11.1-2021.1.","source":"_posts/2020阅读史.md","raw":"---\ntitle: 2020阅读史\ndate: 2020-09-14 11:14:57\ncategories: 随笔\ntags:\n---\n\n又偷懒了一年咯 手动滑稽 (•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n* 《微观经济学》曼昆 -2020.10.10-2021.1.12\n* 《mysql必知必会》-2020.11.1-2021.1.","slug":"2020阅读史","published":1,"updated":"2021-01-12T03:37:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insa0005h9uo37p0f6id","content":"<p>又偷懒了一年咯 手动滑稽 (•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n<ul>\n<li>《微观经济学》曼昆 -2020.10.10-2021.1.12</li>\n<li>《mysql必知必会》-2020.11.1-2021.1.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>又偷懒了一年咯 手动滑稽 (•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<ul>\n<li>《微观经济学》曼昆 -2020.10.10-2021.1.12</li>\n<li>《mysql必知必会》-2020.11.1-2021.1.</li>\n</ul>"},{"title":"2021阅读史","date":"2021-01-07T03:48:50.000Z","_content":"\n新年新气象，flag继续 (•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n* 《怪诞行为学》可预测的非理性 2021.01.13-","source":"_posts/2021阅读史.md","raw":"---\ntitle: 2021阅读史\ndate: 2021-01-07 11:48:50\ncategories: 随笔\ntags:\n---\n\n新年新气象，flag继续 (•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n* 《怪诞行为学》可预测的非理性 2021.01.13-","slug":"2021阅读史","published":1,"updated":"2021-01-13T09:01:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insb0006h9uo7qwvy1p6","content":"<p>新年新气象，flag继续 (•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n<ul>\n<li>《怪诞行为学》可预测的非理性 2021.01.13-</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>新年新气象，flag继续 (•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<ul>\n<li>《怪诞行为学》可预测的非理性 2021.01.13-</li>\n</ul>"},{"title":"APISIX调研和使用","date":"2020-09-22T09:20:35.000Z","_content":"\n针对性的了解apisix插件化api网关，期望能给项目提供一些参考和优化(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n*[官方Git](https://github.com/apache/apisix)*\n*[管理端页面](https://github.com/apache/apisix-dashboard)*\n*[router-radixtree](https://github.com/apache/apisix/blob/master/doc/router-radixtree.md)*\n*[结构设计](https://github.com/apache/apisix/blob/master/doc/zh-cn/architecture-design.md)*\n*[安装参考](http://www.itheima.com/news/20200404/193127.html)*\n*[APISIX高性能实践](https://segmentfault.com/a/1190000020128654)*\n*[APISIX高性能实践续](https://zhuanlan.zhihu.com/p/89610466)*\n*[APISIX上手](https://cloud.tencent.com/developer/article/1528618)*\n*[官方参考dashboard](https://apisix.iresty.com/apisix/dashboard/#/schema/routes/list)*\n*目前只在Coentos 7上安装测试，Centos 6上需要升级gcc，要支持`GLIBC_2.14`*\n\n<!-- more -->\n\n## 简介和安装\n### apisix安装\n直接看这个就可以了[**官方中文**](https://github.com/apache/apisix/blob/master/README_CN.md)\n可能遇到问题：\n1. openresty libssl.so.1.1 not found\n   [升级openssl](https://www.cnblogs.com/emanlee/p/6100019.html)\n2. 需要注意的是，etcd的协议版本问题，需要支持2版本? `export ETCDCTL_API=2`\n### APISIX Dashboard安装\n1. 安装前置环境：mysql，golang，nodejs(version >=10.xx)\n2. 安装启用apisix\n3. 配置mysql\n   ```shell\n   #输入你的密码和用户名\n   $ mysql –uroot –p123456\n    > source ./api/script/db/schema.sql\n   ```\n4. 编译运行后端程序\n   ```shell\n   cd api && go build -o ../manager-api . && cd ..\n   sh ./api/run/run.sh &\n   ```\n5. 编译前端\n   ```shell\n   npm insert -g yarn\n   yarn install\n   yarn build\n   ```\n6. 联合apisix使用\n   1. 将刚刚前端编译得到的`/dist`的内容，放到apisix下的dashboard文件夹\n   2. 修改apisix脚本，添加如下服务：\n        ```shell\n        # vi ./bin/apisix\n        server {\n            listen 10080;\n            # gzip config\n            gzip on; \n            gzip_min_length 1k; \n            gzip_comp_level 9;\n            gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n            gzip_vary on; \n            gzip_disable \"MSIE [1-6]\\.\";\n\n            root /usr/share/nginx/html;\n            include /usr/local/openresty/nginx/conf/mime.types;\n\n            location / { \n                alias dashboard/;\n\n                try_files $uri $uri/index.html /index.html =404;\n            }   \n\n            location /apisix/admin {\n                proxy_pass http://127.0.0.1:8080/apisix/admin;\n            }   \n        }\n        ```\n    3. 重启apisix`./bin/apisix restart`\n7. 访问`http://192.168.81.128:10080/`ip根据自己而定。默认登录名`admin`密码`admin`，可以在dashboard的`conf.json`中自己修改。\n\n\n\n## APISIX的route匹配\n项目需要，了解下apisix的route匹配方式。\n首先apisix的架构参考[结构设计](https://github.com/apache/apisix/blob/master/doc/zh-cn/architecture-design.md)\napisix扩展匹配介绍[router-radixtree](https://github.com/apache/apisix/blob/master/doc/router-radixtree.md)\n\n### 匹配原理和机制\n其核心的实现机制是使用了`resty.radixtree`这个lua库，[详情](https://github.com/api7/lua-resty-radixtree)。包括路由匹配，域名匹配，方法匹配等。说白，都是字符匹配。\n`route`匹配源码如下：\n```lua\nlocal require = require\nlocal router = require(\"resty.radixtree\")\nlocal core = require(\"apisix.core\")\nlocal plugin = require(\"apisix.plugin\")\nlocal ipairs = ipairs\nlocal type = type\nlocal error = error\nlocal loadstring = loadstring\nlocal user_routes\nlocal cached_version\n\n\nlocal _M = {version = 0.2}\n\n\n    local uri_routes = {}\n    local uri_router\nlocal function create_radixtree_router(routes)\n    routes = routes or {}\n\n    local api_routes = plugin.api_routes()\n    core.table.clear(uri_routes)\n\n    for _, route in ipairs(api_routes) do\n        if type(route) == \"table\" then\n            core.table.insert(uri_routes, {\n                paths = route.uris or route.uri,\n                methods = route.methods,\n                handler = route.handler,\n            })\n        end\n    end\n\n    for _, route in ipairs(routes) do\n        if type(route) == \"table\" then\n            local filter_fun, err\n            if route.value.filter_func then\n                filter_fun, err = loadstring(\n                                        \"return \" .. route.value.filter_func,\n                                        \"router#\" .. route.value.id)\n                if not filter_fun then\n                    core.log.error(\"failed to load filter function: \", err,\n                                   \" route id: \", route.value.id)\n                    goto CONTINUE\n                end\n\n                filter_fun = filter_fun()\n            end\n\n            core.log.info(\"insert uri route: \",\n                          core.json.delay_encode(route.value))\n            core.table.insert(uri_routes, {\n                paths = route.value.uris or route.value.uri,\n                methods = route.value.methods,\n                priority = route.value.priority,\n                hosts = route.value.hosts or route.value.host,\n                remote_addrs = route.value.remote_addrs\n                               or route.value.remote_addr,\n                vars = route.value.vars,\n                filter_fun = filter_fun,\n                --主要处理函数，如果uri_router匹配上了，会调用这个headler\n                handler = function (api_ctx)\n                    api_ctx.matched_params = nil\n                    api_ctx.matched_route = route\n                end\n            })\n\n            ::CONTINUE::\n        end\n    end\n\n    core.log.info(\"route items: \", core.json.delay_encode(uri_routes, true))\n    uri_router = router.new(uri_routes)\nend\n\n\n    local match_opts = {}\nfunction _M.match(api_ctx)\n    if not cached_version or cached_version ~= user_routes.conf_version then\n        -- 这里生成uri_router\n        create_radixtree_router(user_routes.values)\n        cached_version = user_routes.conf_version\n    end\n\n    if not uri_router then\n        core.log.error(\"failed to fetch valid `uri` router: \")\n        return true\n    end\n\n    core.table.clear(match_opts)\n    match_opts.method = api_ctx.var.request_method\n    match_opts.host = api_ctx.var.host\n    match_opts.remote_addr = api_ctx.var.remote_addr\n    match_opts.vars = api_ctx.var\n\n    -- 这里是匹配核心\n    local ok = uri_router:dispatch(api_ctx.var.uri, match_opts, api_ctx)\n    if not ok then\n        core.log.info(\"not find any matched route\")\n        return true\n    end\n\n    return true\nend\n\n\nfunction _M.routes()\n    if not user_routes then\n        return nil, nil\n    end\n\n    return user_routes.values, user_routes.conf_version\nend\n\n\nfunction _M.init_worker(filter)\n    local err\n    user_routes, err = core.config.new(\"/routes\", {\n            automatic = true,\n            item_schema = core.schema.route,\n            filter = filter,\n        })\n    if not user_routes then\n        error(\"failed to create etcd instance for fetching /routes : \" .. err)\n    end\nend\n\n\nreturn _M\n```\n而在访问过程中对这个调用方式如下：\n```lua\n--调用上述的match函数\nrouter.router_http.match(api_ctx)\n--判断匹配是否成功\nlocal route = api_ctx.matched_route\n    if not route then\n        return core.response.exit(404,\n                    {error_msg = \"failed to match any routes\"})\n    end\n```\n\n#### resty.radixtree匹配原理\n主要分为两个部分，初始化注册`router`和运行时匹配过滤：\n**初始化：**\n![](APISIX调研和使用/radixtree_init流程图.drawio.png)\n1. 数据存储和查找的主key都是uri，全量匹配使用hash，通用匹配使用的都是radixtree。数据结构都可以参考图中的表。\n2. 同一个uri有多个route的情况，会以数组的方式扩展，并且使用sort排序，排序顺序依据route中`priority`参数，越大优先级越高，越优先匹配。\n\n**运行时Match：**\n![](APISIX调研和使用/radixtree_match流程图.drawio.png)\n1. 调用`router:match(api_ctx.var.uri, match_opts, ...)`时，先使用`hash`来寻找相应的注册routes(routes在注册的时候，也是根据uri来进行hash表插入，如果hash表设置不能用，才使用radix_tree)。如果hash找不到，就使用`radix_tree`查找匹配(这部分是c代码，还没看)\n2. 如果都匹配成功，`dispatch`会调用`route`里加入的`handler`。而`match`函数会返回`metadata`\n3. 自定义函数方面，在定义route的时候，自定义`filter_fun`函数，进行匹配过滤的时候，就会调用`filter_fun`调用。类似示例如下：\n    ```shell\n    === TEST 1: sanity\n    --- config\n        location /t {\n            content_by_lua_block {\n                local radix = require(\"resty.radixtree\")\n                local rx = radix.new({\n                    {\n                        paths = \"/aa\",\n                        metadata = \"metadata /aa\",\n                        filter_fun = function(vars)\n                            ngx.log(ngx.WARN, \"start to filter\")\n                            return vars['arg_k'] == 'v'\n                        end\n                    }\n                })\n                ngx.say(rx:match(\"/aa\", {vars = ngx.var}))\n                ngx.say(rx:match(\"/aa\", {}))\n            }\n        }\n    --- request\n    GET /t?k=v\n    --- no_error_log\n    [error]\n    --- error_log\n    start to filter\n    --- response_body\n    metadata /aa\n    metadata /aa\n    ```\n4. 对于自定义变量的读取，比如有header，args和cookie里分别有个stub；nginx.var可以分别通过'http_'，'arg_'和'cookie_'直接读取相应的变量：\n   nginx配置：\n   ```shell\n   access_by_lua_block {\n        ngx.say(\"nnnnnnnnngxxxxxxx say:\")\n        ngx.say(ngx.var['http_stub'])\n        ngx.say(ngx.var['arg_stub'])\n        ngx.say(ngx.var['cookie_stub'])\n        apisix.http_access_phase()\n    }   \n    $ curl -H 'stub:cloudxx' --cookie \"stub=cccccookie\" http://192.168.81.128:9080/args/?stub=arrrrg\n    nnnnnnnnngxxxxxxx say:\n    cloudxx\n    arrrrg\n    cccccookie\n    {\"error_msg\":\"failed to match any routes\"}\n   ```\n\n\n### route匹配成功后server或upstream流程\n首先，在route的配置中，`plugins`、`script`、`upstream/upstream_id`、`service_id`至少选择一个\n当route匹配成功后会相应执行`plugins`...(目前猜测是根据优先级)\nserver最后关联的也是upstream，那么主要的还是介绍upstream的外发：\n在route匹配成功后，会进行server_id和upstream_id的检查，如果有，就将相应的upstream结构赋值到`api_ctx.upstream_conf`，如果只有一个node，那么可以直接赋值相应的`upstream_host`，进行负载平衡，负载平衡特点：\n1. 动态支持有权重的 round-robin 负载平衡\n2. 动态支持一致性 hash 的负载均衡。\n3. 启用上游节点的健康检查，将在负载均衡期间自动过滤不健康的节点，以确保系统稳定性。\n4. 可以在 balancer 阶段使用自定义负载均衡算法。\n\n## 性能\n### route匹配性能\n[lua-resty-radixtree](https://github.com/api7/lua-resty-radixtree)\nWe wrote some simple benchmark scripts. Machine environment: MacBook Pro (16-inch, 2019), CPU 2.3 GHz Intel Core i9.\n```\n$ make\ncc -O2 -g -Wall -fpic -std=c99 -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast -DBUILDING_SO -c src/rax.c -o src/rax.o\ncc -O2 -g -Wall -fpic -std=c99 -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast -DBUILDING_SO -c src/easy_rax.c -o src/easy_rax.o\ncc -shared -fvisibility=hidden src/rax.o src/easy_rax.o -o librestyradixtree.so\n\n$ make bench\nresty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-parameter.lua\nmatched res: 1\nroute count: 100000\nmatch times: 10000000\ntime used  : 3.3849999904633 sec\nQPS        : 2954209\neach time  : 0.33849999904633 ns\n\nresty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-prefix.lua\nmatched res: 500\nroute count: 100000\nmatch times: 1000000\ntime used  : 0.4229998588562 sec\nQPS        : 2364066\n\nresty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-static.lua\nmatched res: 500\nroute count: 100000\nmatch times: 10000000\ntime used  : 0.78799986839294 sec\nQPS        : 12690357\n\nresty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-hosts.lua\nmatched res: 500\nroute count: 1000\nmatch times: 100000\ntime used  : 1.6989998817444 sec\nQPS        : 58858\n\nresty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-wildcard-hosts.lua\nmatched res: 500\nroute count: 1000\nmatch times: 50000\ntime used  : 1.2469999790192 sec\nQPS        : 40096\n```","source":"_posts/APISIX调研和使用.md","raw":"---\ntitle: APISIX调研和使用\ndate: 2020-09-22 17:20:35\ntags:\n---\n\n针对性的了解apisix插件化api网关，期望能给项目提供一些参考和优化(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n*[官方Git](https://github.com/apache/apisix)*\n*[管理端页面](https://github.com/apache/apisix-dashboard)*\n*[router-radixtree](https://github.com/apache/apisix/blob/master/doc/router-radixtree.md)*\n*[结构设计](https://github.com/apache/apisix/blob/master/doc/zh-cn/architecture-design.md)*\n*[安装参考](http://www.itheima.com/news/20200404/193127.html)*\n*[APISIX高性能实践](https://segmentfault.com/a/1190000020128654)*\n*[APISIX高性能实践续](https://zhuanlan.zhihu.com/p/89610466)*\n*[APISIX上手](https://cloud.tencent.com/developer/article/1528618)*\n*[官方参考dashboard](https://apisix.iresty.com/apisix/dashboard/#/schema/routes/list)*\n*目前只在Coentos 7上安装测试，Centos 6上需要升级gcc，要支持`GLIBC_2.14`*\n\n<!-- more -->\n\n## 简介和安装\n### apisix安装\n直接看这个就可以了[**官方中文**](https://github.com/apache/apisix/blob/master/README_CN.md)\n可能遇到问题：\n1. openresty libssl.so.1.1 not found\n   [升级openssl](https://www.cnblogs.com/emanlee/p/6100019.html)\n2. 需要注意的是，etcd的协议版本问题，需要支持2版本? `export ETCDCTL_API=2`\n### APISIX Dashboard安装\n1. 安装前置环境：mysql，golang，nodejs(version >=10.xx)\n2. 安装启用apisix\n3. 配置mysql\n   ```shell\n   #输入你的密码和用户名\n   $ mysql –uroot –p123456\n    > source ./api/script/db/schema.sql\n   ```\n4. 编译运行后端程序\n   ```shell\n   cd api && go build -o ../manager-api . && cd ..\n   sh ./api/run/run.sh &\n   ```\n5. 编译前端\n   ```shell\n   npm insert -g yarn\n   yarn install\n   yarn build\n   ```\n6. 联合apisix使用\n   1. 将刚刚前端编译得到的`/dist`的内容，放到apisix下的dashboard文件夹\n   2. 修改apisix脚本，添加如下服务：\n        ```shell\n        # vi ./bin/apisix\n        server {\n            listen 10080;\n            # gzip config\n            gzip on; \n            gzip_min_length 1k; \n            gzip_comp_level 9;\n            gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n            gzip_vary on; \n            gzip_disable \"MSIE [1-6]\\.\";\n\n            root /usr/share/nginx/html;\n            include /usr/local/openresty/nginx/conf/mime.types;\n\n            location / { \n                alias dashboard/;\n\n                try_files $uri $uri/index.html /index.html =404;\n            }   \n\n            location /apisix/admin {\n                proxy_pass http://127.0.0.1:8080/apisix/admin;\n            }   \n        }\n        ```\n    3. 重启apisix`./bin/apisix restart`\n7. 访问`http://192.168.81.128:10080/`ip根据自己而定。默认登录名`admin`密码`admin`，可以在dashboard的`conf.json`中自己修改。\n\n\n\n## APISIX的route匹配\n项目需要，了解下apisix的route匹配方式。\n首先apisix的架构参考[结构设计](https://github.com/apache/apisix/blob/master/doc/zh-cn/architecture-design.md)\napisix扩展匹配介绍[router-radixtree](https://github.com/apache/apisix/blob/master/doc/router-radixtree.md)\n\n### 匹配原理和机制\n其核心的实现机制是使用了`resty.radixtree`这个lua库，[详情](https://github.com/api7/lua-resty-radixtree)。包括路由匹配，域名匹配，方法匹配等。说白，都是字符匹配。\n`route`匹配源码如下：\n```lua\nlocal require = require\nlocal router = require(\"resty.radixtree\")\nlocal core = require(\"apisix.core\")\nlocal plugin = require(\"apisix.plugin\")\nlocal ipairs = ipairs\nlocal type = type\nlocal error = error\nlocal loadstring = loadstring\nlocal user_routes\nlocal cached_version\n\n\nlocal _M = {version = 0.2}\n\n\n    local uri_routes = {}\n    local uri_router\nlocal function create_radixtree_router(routes)\n    routes = routes or {}\n\n    local api_routes = plugin.api_routes()\n    core.table.clear(uri_routes)\n\n    for _, route in ipairs(api_routes) do\n        if type(route) == \"table\" then\n            core.table.insert(uri_routes, {\n                paths = route.uris or route.uri,\n                methods = route.methods,\n                handler = route.handler,\n            })\n        end\n    end\n\n    for _, route in ipairs(routes) do\n        if type(route) == \"table\" then\n            local filter_fun, err\n            if route.value.filter_func then\n                filter_fun, err = loadstring(\n                                        \"return \" .. route.value.filter_func,\n                                        \"router#\" .. route.value.id)\n                if not filter_fun then\n                    core.log.error(\"failed to load filter function: \", err,\n                                   \" route id: \", route.value.id)\n                    goto CONTINUE\n                end\n\n                filter_fun = filter_fun()\n            end\n\n            core.log.info(\"insert uri route: \",\n                          core.json.delay_encode(route.value))\n            core.table.insert(uri_routes, {\n                paths = route.value.uris or route.value.uri,\n                methods = route.value.methods,\n                priority = route.value.priority,\n                hosts = route.value.hosts or route.value.host,\n                remote_addrs = route.value.remote_addrs\n                               or route.value.remote_addr,\n                vars = route.value.vars,\n                filter_fun = filter_fun,\n                --主要处理函数，如果uri_router匹配上了，会调用这个headler\n                handler = function (api_ctx)\n                    api_ctx.matched_params = nil\n                    api_ctx.matched_route = route\n                end\n            })\n\n            ::CONTINUE::\n        end\n    end\n\n    core.log.info(\"route items: \", core.json.delay_encode(uri_routes, true))\n    uri_router = router.new(uri_routes)\nend\n\n\n    local match_opts = {}\nfunction _M.match(api_ctx)\n    if not cached_version or cached_version ~= user_routes.conf_version then\n        -- 这里生成uri_router\n        create_radixtree_router(user_routes.values)\n        cached_version = user_routes.conf_version\n    end\n\n    if not uri_router then\n        core.log.error(\"failed to fetch valid `uri` router: \")\n        return true\n    end\n\n    core.table.clear(match_opts)\n    match_opts.method = api_ctx.var.request_method\n    match_opts.host = api_ctx.var.host\n    match_opts.remote_addr = api_ctx.var.remote_addr\n    match_opts.vars = api_ctx.var\n\n    -- 这里是匹配核心\n    local ok = uri_router:dispatch(api_ctx.var.uri, match_opts, api_ctx)\n    if not ok then\n        core.log.info(\"not find any matched route\")\n        return true\n    end\n\n    return true\nend\n\n\nfunction _M.routes()\n    if not user_routes then\n        return nil, nil\n    end\n\n    return user_routes.values, user_routes.conf_version\nend\n\n\nfunction _M.init_worker(filter)\n    local err\n    user_routes, err = core.config.new(\"/routes\", {\n            automatic = true,\n            item_schema = core.schema.route,\n            filter = filter,\n        })\n    if not user_routes then\n        error(\"failed to create etcd instance for fetching /routes : \" .. err)\n    end\nend\n\n\nreturn _M\n```\n而在访问过程中对这个调用方式如下：\n```lua\n--调用上述的match函数\nrouter.router_http.match(api_ctx)\n--判断匹配是否成功\nlocal route = api_ctx.matched_route\n    if not route then\n        return core.response.exit(404,\n                    {error_msg = \"failed to match any routes\"})\n    end\n```\n\n#### resty.radixtree匹配原理\n主要分为两个部分，初始化注册`router`和运行时匹配过滤：\n**初始化：**\n![](APISIX调研和使用/radixtree_init流程图.drawio.png)\n1. 数据存储和查找的主key都是uri，全量匹配使用hash，通用匹配使用的都是radixtree。数据结构都可以参考图中的表。\n2. 同一个uri有多个route的情况，会以数组的方式扩展，并且使用sort排序，排序顺序依据route中`priority`参数，越大优先级越高，越优先匹配。\n\n**运行时Match：**\n![](APISIX调研和使用/radixtree_match流程图.drawio.png)\n1. 调用`router:match(api_ctx.var.uri, match_opts, ...)`时，先使用`hash`来寻找相应的注册routes(routes在注册的时候，也是根据uri来进行hash表插入，如果hash表设置不能用，才使用radix_tree)。如果hash找不到，就使用`radix_tree`查找匹配(这部分是c代码，还没看)\n2. 如果都匹配成功，`dispatch`会调用`route`里加入的`handler`。而`match`函数会返回`metadata`\n3. 自定义函数方面，在定义route的时候，自定义`filter_fun`函数，进行匹配过滤的时候，就会调用`filter_fun`调用。类似示例如下：\n    ```shell\n    === TEST 1: sanity\n    --- config\n        location /t {\n            content_by_lua_block {\n                local radix = require(\"resty.radixtree\")\n                local rx = radix.new({\n                    {\n                        paths = \"/aa\",\n                        metadata = \"metadata /aa\",\n                        filter_fun = function(vars)\n                            ngx.log(ngx.WARN, \"start to filter\")\n                            return vars['arg_k'] == 'v'\n                        end\n                    }\n                })\n                ngx.say(rx:match(\"/aa\", {vars = ngx.var}))\n                ngx.say(rx:match(\"/aa\", {}))\n            }\n        }\n    --- request\n    GET /t?k=v\n    --- no_error_log\n    [error]\n    --- error_log\n    start to filter\n    --- response_body\n    metadata /aa\n    metadata /aa\n    ```\n4. 对于自定义变量的读取，比如有header，args和cookie里分别有个stub；nginx.var可以分别通过'http_'，'arg_'和'cookie_'直接读取相应的变量：\n   nginx配置：\n   ```shell\n   access_by_lua_block {\n        ngx.say(\"nnnnnnnnngxxxxxxx say:\")\n        ngx.say(ngx.var['http_stub'])\n        ngx.say(ngx.var['arg_stub'])\n        ngx.say(ngx.var['cookie_stub'])\n        apisix.http_access_phase()\n    }   \n    $ curl -H 'stub:cloudxx' --cookie \"stub=cccccookie\" http://192.168.81.128:9080/args/?stub=arrrrg\n    nnnnnnnnngxxxxxxx say:\n    cloudxx\n    arrrrg\n    cccccookie\n    {\"error_msg\":\"failed to match any routes\"}\n   ```\n\n\n### route匹配成功后server或upstream流程\n首先，在route的配置中，`plugins`、`script`、`upstream/upstream_id`、`service_id`至少选择一个\n当route匹配成功后会相应执行`plugins`...(目前猜测是根据优先级)\nserver最后关联的也是upstream，那么主要的还是介绍upstream的外发：\n在route匹配成功后，会进行server_id和upstream_id的检查，如果有，就将相应的upstream结构赋值到`api_ctx.upstream_conf`，如果只有一个node，那么可以直接赋值相应的`upstream_host`，进行负载平衡，负载平衡特点：\n1. 动态支持有权重的 round-robin 负载平衡\n2. 动态支持一致性 hash 的负载均衡。\n3. 启用上游节点的健康检查，将在负载均衡期间自动过滤不健康的节点，以确保系统稳定性。\n4. 可以在 balancer 阶段使用自定义负载均衡算法。\n\n## 性能\n### route匹配性能\n[lua-resty-radixtree](https://github.com/api7/lua-resty-radixtree)\nWe wrote some simple benchmark scripts. Machine environment: MacBook Pro (16-inch, 2019), CPU 2.3 GHz Intel Core i9.\n```\n$ make\ncc -O2 -g -Wall -fpic -std=c99 -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast -DBUILDING_SO -c src/rax.c -o src/rax.o\ncc -O2 -g -Wall -fpic -std=c99 -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast -DBUILDING_SO -c src/easy_rax.c -o src/easy_rax.o\ncc -shared -fvisibility=hidden src/rax.o src/easy_rax.o -o librestyradixtree.so\n\n$ make bench\nresty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-parameter.lua\nmatched res: 1\nroute count: 100000\nmatch times: 10000000\ntime used  : 3.3849999904633 sec\nQPS        : 2954209\neach time  : 0.33849999904633 ns\n\nresty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-prefix.lua\nmatched res: 500\nroute count: 100000\nmatch times: 1000000\ntime used  : 0.4229998588562 sec\nQPS        : 2364066\n\nresty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-static.lua\nmatched res: 500\nroute count: 100000\nmatch times: 10000000\ntime used  : 0.78799986839294 sec\nQPS        : 12690357\n\nresty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-hosts.lua\nmatched res: 500\nroute count: 1000\nmatch times: 100000\ntime used  : 1.6989998817444 sec\nQPS        : 58858\n\nresty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-wildcard-hosts.lua\nmatched res: 500\nroute count: 1000\nmatch times: 50000\ntime used  : 1.2469999790192 sec\nQPS        : 40096\n```","slug":"APISIX调研和使用","published":1,"updated":"2020-10-15T03:24:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insc0007h9uofp0fmboq","content":"<p>针对性的了解apisix插件化api网关，期望能给项目提供一些参考和优化(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em><a href=\"https://github.com/apache/apisix\" target=\"_blank\" rel=\"noopener\">官方Git</a></em><br><em><a href=\"https://github.com/apache/apisix-dashboard\" target=\"_blank\" rel=\"noopener\">管理端页面</a></em><br><em><a href=\"https://github.com/apache/apisix/blob/master/doc/router-radixtree.md\" target=\"_blank\" rel=\"noopener\">router-radixtree</a></em><br><em><a href=\"https://github.com/apache/apisix/blob/master/doc/zh-cn/architecture-design.md\" target=\"_blank\" rel=\"noopener\">结构设计</a></em><br><em><a href=\"http://www.itheima.com/news/20200404/193127.html\" target=\"_blank\" rel=\"noopener\">安装参考</a></em><br><em><a href=\"https://segmentfault.com/a/1190000020128654\" target=\"_blank\" rel=\"noopener\">APISIX高性能实践</a></em><br><em><a href=\"https://zhuanlan.zhihu.com/p/89610466\" target=\"_blank\" rel=\"noopener\">APISIX高性能实践续</a></em><br><em><a href=\"https://cloud.tencent.com/developer/article/1528618\" target=\"_blank\" rel=\"noopener\">APISIX上手</a></em><br><em><a href=\"https://apisix.iresty.com/apisix/dashboard/#/schema/routes/list\" target=\"_blank\" rel=\"noopener\">官方参考dashboard</a></em><br><em>目前只在Coentos 7上安装测试，Centos 6上需要升级gcc，要支持<code>GLIBC_2.14</code></em></p>\n<a id=\"more\"></a>\n\n<h2 id=\"简介和安装\"><a href=\"#简介和安装\" class=\"headerlink\" title=\"简介和安装\"></a>简介和安装</h2><h3 id=\"apisix安装\"><a href=\"#apisix安装\" class=\"headerlink\" title=\"apisix安装\"></a>apisix安装</h3><p>直接看这个就可以了<a href=\"https://github.com/apache/apisix/blob/master/README_CN.md\" target=\"_blank\" rel=\"noopener\"><strong>官方中文</strong></a><br>可能遇到问题：</p>\n<ol>\n<li><p>openresty libssl.so.1.1 not found<br><a href=\"https://www.cnblogs.com/emanlee/p/6100019.html\" target=\"_blank\" rel=\"noopener\">升级openssl</a></p>\n</li>\n<li><p>需要注意的是，etcd的协议版本问题，需要支持2版本? <code>export ETCDCTL_API=2</code></p>\n<h3 id=\"APISIX-Dashboard安装\"><a href=\"#APISIX-Dashboard安装\" class=\"headerlink\" title=\"APISIX Dashboard安装\"></a>APISIX Dashboard安装</h3></li>\n<li><p>安装前置环境：mysql，golang，nodejs(version &gt;=10.xx)</p>\n</li>\n<li><p>安装启用apisix</p>\n</li>\n<li><p>配置mysql</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>输入你的密码和用户名</span><br><span class=\"line\"><span class=\"meta\">$</span> mysql –uroot –p123456</span><br><span class=\"line\"><span class=\"meta\"> &gt;</span> source ./api/script/db/schema.sql</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>编译运行后端程序</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd api &amp;&amp; go build -o ../manager-api . &amp;&amp; cd ..</span><br><span class=\"line\">sh ./api/run/run.sh &amp;</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>编译前端</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm insert -g yarn</span><br><span class=\"line\">yarn install</span><br><span class=\"line\">yarn build</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>联合apisix使用</p>\n<ol>\n<li><p>将刚刚前端编译得到的<code>/dist</code>的内容，放到apisix下的dashboard文件夹</p>\n</li>\n<li><p>修改apisix脚本，添加如下服务：</p>\n  <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> vi ./bin/apisix</span><br><span class=\"line\">server {</span><br><span class=\"line\">    listen 10080;</span><br><span class=\"line\">    # gzip config</span><br><span class=\"line\">    gzip on; </span><br><span class=\"line\">    gzip_min_length 1k; </span><br><span class=\"line\">    gzip_comp_level 9;</span><br><span class=\"line\">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class=\"line\">    gzip_vary on; </span><br><span class=\"line\">    gzip_disable \"MSIE [1-6]\\.\";</span><br><span class=\"line\"></span><br><span class=\"line\">    root /usr/share/nginx/html;</span><br><span class=\"line\">    include /usr/local/openresty/nginx/conf/mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / { </span><br><span class=\"line\">        alias dashboard/;</span><br><span class=\"line\"></span><br><span class=\"line\">        try_files $uri $uri/index.html /index.html =404;</span><br><span class=\"line\">    }   </span><br><span class=\"line\"></span><br><span class=\"line\">    location /apisix/admin {</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080/apisix/admin;</span><br><span class=\"line\">    }   </span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>重启apisix<code>./bin/apisix restart</code></p>\n</li>\n</ol>\n</li>\n<li><p>访问<code>http://192.168.81.128:10080/</code>ip根据自己而定。默认登录名<code>admin</code>密码<code>admin</code>，可以在dashboard的<code>conf.json</code>中自己修改。</p>\n</li>\n</ol>\n<h2 id=\"APISIX的route匹配\"><a href=\"#APISIX的route匹配\" class=\"headerlink\" title=\"APISIX的route匹配\"></a>APISIX的route匹配</h2><p>项目需要，了解下apisix的route匹配方式。<br>首先apisix的架构参考<a href=\"https://github.com/apache/apisix/blob/master/doc/zh-cn/architecture-design.md\" target=\"_blank\" rel=\"noopener\">结构设计</a><br>apisix扩展匹配介绍<a href=\"https://github.com/apache/apisix/blob/master/doc/router-radixtree.md\" target=\"_blank\" rel=\"noopener\">router-radixtree</a></p>\n<h3 id=\"匹配原理和机制\"><a href=\"#匹配原理和机制\" class=\"headerlink\" title=\"匹配原理和机制\"></a>匹配原理和机制</h3><p>其核心的实现机制是使用了<code>resty.radixtree</code>这个lua库，<a href=\"https://github.com/api7/lua-resty-radixtree\" target=\"_blank\" rel=\"noopener\">详情</a>。包括路由匹配，域名匹配，方法匹配等。说白，都是字符匹配。<br><code>route</code>匹配源码如下：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">require</span> = <span class=\"built_in\">require</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"resty.radixtree\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> core = <span class=\"built_in\">require</span>(<span class=\"string\">\"apisix.core\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> plugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"apisix.plugin\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">ipairs</span> = <span class=\"built_in\">ipairs</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">type</span> = <span class=\"built_in\">type</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">error</span> = <span class=\"built_in\">error</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> loadstring = loadstring</span><br><span class=\"line\"><span class=\"keyword\">local</span> user_routes</span><br><span class=\"line\"><span class=\"keyword\">local</span> cached_version</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> _M = {version = <span class=\"number\">0.2</span>}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> uri_routes = {}</span><br><span class=\"line\">    <span class=\"keyword\">local</span> uri_router</span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_radixtree_router</span><span class=\"params\">(routes)</span></span></span><br><span class=\"line\">    routes = routes <span class=\"keyword\">or</span> {}</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> api_routes = plugin.api_routes()</span><br><span class=\"line\">    core.<span class=\"built_in\">table</span>.clear(uri_routes)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, route <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(api_routes) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(route) == <span class=\"string\">\"table\"</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            core.<span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(uri_routes, {</span><br><span class=\"line\">                paths = route.uris <span class=\"keyword\">or</span> route.uri,</span><br><span class=\"line\">                methods = route.methods,</span><br><span class=\"line\">                handler = route.handler,</span><br><span class=\"line\">            })</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, route <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(routes) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(route) == <span class=\"string\">\"table\"</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">local</span> filter_fun, err</span><br><span class=\"line\">            <span class=\"keyword\">if</span> route.value.filter_func <span class=\"keyword\">then</span></span><br><span class=\"line\">                filter_fun, err = loadstring(</span><br><span class=\"line\">                                        <span class=\"string\">\"return \"</span> .. route.value.filter_func,</span><br><span class=\"line\">                                        <span class=\"string\">\"router#\"</span> .. route.value.id)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> filter_fun <span class=\"keyword\">then</span></span><br><span class=\"line\">                    core.<span class=\"built_in\">log</span>.<span class=\"built_in\">error</span>(<span class=\"string\">\"failed to load filter function: \"</span>, err,</span><br><span class=\"line\">                                   <span class=\"string\">\" route id: \"</span>, route.value.id)</span><br><span class=\"line\">                    <span class=\"keyword\">goto</span> CONTINUE</span><br><span class=\"line\">                <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">                filter_fun = filter_fun()</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">            core.<span class=\"built_in\">log</span>.info(<span class=\"string\">\"insert uri route: \"</span>,</span><br><span class=\"line\">                          core.json.delay_encode(route.value))</span><br><span class=\"line\">            core.<span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(uri_routes, {</span><br><span class=\"line\">                paths = route.value.uris <span class=\"keyword\">or</span> route.value.uri,</span><br><span class=\"line\">                methods = route.value.methods,</span><br><span class=\"line\">                priority = route.value.priority,</span><br><span class=\"line\">                hosts = route.value.hosts <span class=\"keyword\">or</span> route.value.host,</span><br><span class=\"line\">                remote_addrs = route.value.remote_addrs</span><br><span class=\"line\">                               <span class=\"keyword\">or</span> route.value.remote_addr,</span><br><span class=\"line\">                vars = route.value.vars,</span><br><span class=\"line\">                filter_fun = filter_fun,</span><br><span class=\"line\">                <span class=\"comment\">--主要处理函数，如果uri_router匹配上了，会调用这个headler</span></span><br><span class=\"line\">                handler = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(api_ctx)</span></span></span><br><span class=\"line\">                    api_ctx.matched_params = <span class=\"literal\">nil</span></span><br><span class=\"line\">                    api_ctx.matched_route = route</span><br><span class=\"line\">                <span class=\"keyword\">end</span></span><br><span class=\"line\">            })</span><br><span class=\"line\"></span><br><span class=\"line\">            ::CONTINUE::</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    core.<span class=\"built_in\">log</span>.info(<span class=\"string\">\"route items: \"</span>, core.json.delay_encode(uri_routes, <span class=\"literal\">true</span>))</span><br><span class=\"line\">    uri_router = router.new(uri_routes)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> match_opts = {}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_M.match</span><span class=\"params\">(api_ctx)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cached_version <span class=\"keyword\">or</span> cached_version ~= user_routes.conf_version <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\">-- 这里生成uri_router</span></span><br><span class=\"line\">        create_radixtree_router(user_routes.values)</span><br><span class=\"line\">        cached_version = user_routes.conf_version</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> uri_router <span class=\"keyword\">then</span></span><br><span class=\"line\">        core.<span class=\"built_in\">log</span>.<span class=\"built_in\">error</span>(<span class=\"string\">\"failed to fetch valid `uri` router: \"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    core.<span class=\"built_in\">table</span>.clear(match_opts)</span><br><span class=\"line\">    match_opts.method = api_ctx.var.request_method</span><br><span class=\"line\">    match_opts.host = api_ctx.var.host</span><br><span class=\"line\">    match_opts.remote_addr = api_ctx.var.remote_addr</span><br><span class=\"line\">    match_opts.vars = api_ctx.var</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 这里是匹配核心</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> ok = uri_router:dispatch(api_ctx.var.uri, match_opts, api_ctx)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span></span><br><span class=\"line\">        core.<span class=\"built_in\">log</span>.info(<span class=\"string\">\"not find any matched route\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_M.routes</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> user_routes <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_routes.values, user_routes.conf_version</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_M.init_worker</span><span class=\"params\">(filter)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> err</span><br><span class=\"line\">    user_routes, err = core.<span class=\"built_in\">config</span>.new(<span class=\"string\">\"/routes\"</span>, {</span><br><span class=\"line\">            automatic = <span class=\"literal\">true</span>,</span><br><span class=\"line\">            item_schema = core.schema.route,</span><br><span class=\"line\">            filter = filter,</span><br><span class=\"line\">        })</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> user_routes <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">error</span>(<span class=\"string\">\"failed to create etcd instance for fetching /routes : \"</span> .. err)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> _M</span><br></pre></td></tr></tbody></table></figure>\n\n<p>而在访问过程中对这个调用方式如下：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--调用上述的match函数</span></span><br><span class=\"line\">router.router_http.<span class=\"built_in\">match</span>(api_ctx)</span><br><span class=\"line\"><span class=\"comment\">--判断匹配是否成功</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> route = api_ctx.matched_route</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> route <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> core.response.<span class=\"built_in\">exit</span>(<span class=\"number\">404</span>,</span><br><span class=\"line\">                    {error_msg = <span class=\"string\">\"failed to match any routes\"</span>})</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"resty-radixtree匹配原理\"><a href=\"#resty-radixtree匹配原理\" class=\"headerlink\" title=\"resty.radixtree匹配原理\"></a>resty.radixtree匹配原理</h4><p>主要分为两个部分，初始化注册<code>router</code>和运行时匹配过滤：<br><strong>初始化：</strong><br><img src=\"/2020/09/22/APISIX调研和使用/radixtree_init%E6%B5%81%E7%A8%8B%E5%9B%BE.drawio.png\"></p>\n<ol>\n<li>数据存储和查找的主key都是uri，全量匹配使用hash，通用匹配使用的都是radixtree。数据结构都可以参考图中的表。</li>\n<li>同一个uri有多个route的情况，会以数组的方式扩展，并且使用sort排序，排序顺序依据route中<code>priority</code>参数，越大优先级越高，越优先匹配。</li>\n</ol>\n<p><strong>运行时Match：</strong><br><img src=\"/2020/09/22/APISIX调研和使用/radixtree_match%E6%B5%81%E7%A8%8B%E5%9B%BE.drawio.png\"></p>\n<ol>\n<li><p>调用<code>router:match(api_ctx.var.uri, match_opts, ...)</code>时，先使用<code>hash</code>来寻找相应的注册routes(routes在注册的时候，也是根据uri来进行hash表插入，如果hash表设置不能用，才使用radix_tree)。如果hash找不到，就使用<code>radix_tree</code>查找匹配(这部分是c代码，还没看)</p>\n</li>\n<li><p>如果都匹配成功，<code>dispatch</code>会调用<code>route</code>里加入的<code>handler</code>。而<code>match</code>函数会返回<code>metadata</code></p>\n</li>\n<li><p>自定义函数方面，在定义route的时候，自定义<code>filter_fun</code>函数，进行匹配过滤的时候，就会调用<code>filter_fun</code>调用。类似示例如下：</p>\n <figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=== TEST 1: sanity</span><br><span class=\"line\">--- config</span><br><span class=\"line\">    location /t {</span><br><span class=\"line\">        content_by_lua_block {</span><br><span class=\"line\">            local radix = require(\"resty.radixtree\")</span><br><span class=\"line\">            local rx = radix.new({</span><br><span class=\"line\">                {</span><br><span class=\"line\">                    paths = \"/aa\",</span><br><span class=\"line\">                    metadata = \"metadata /aa\",</span><br><span class=\"line\">                    filter_fun = function(vars)</span><br><span class=\"line\">                        ngx.log(ngx.WARN, \"start to filter\")</span><br><span class=\"line\">                        return vars['arg_k'] == 'v'</span><br><span class=\"line\">                    end</span><br><span class=\"line\">                }</span><br><span class=\"line\">            })</span><br><span class=\"line\">            ngx.say(rx:match(\"/aa\", {vars = ngx.var}))</span><br><span class=\"line\">            ngx.say(rx:match(\"/aa\", {}))</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">--- request</span><br><span class=\"line\">GET /t?k=v</span><br><span class=\"line\">--- no_error_log</span><br><span class=\"line\">[error]</span><br><span class=\"line\">--- error_log</span><br><span class=\"line\">start to filter</span><br><span class=\"line\">--- response_body</span><br><span class=\"line\">metadata /aa</span><br><span class=\"line\">metadata /aa</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>对于自定义变量的读取，比如有header，args和cookie里分别有个stub；nginx.var可以分别通过’http_’，’arg_’和’cookie_’直接读取相应的变量：<br>nginx配置：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access_by_lua_block {</span><br><span class=\"line\">     ngx.say(\"nnnnnnnnngxxxxxxx say:\")</span><br><span class=\"line\">     ngx.say(ngx.var['http_stub'])</span><br><span class=\"line\">     ngx.say(ngx.var['arg_stub'])</span><br><span class=\"line\">     ngx.say(ngx.var['cookie_stub'])</span><br><span class=\"line\">     apisix.http_access_phase()</span><br><span class=\"line\"> }   </span><br><span class=\"line\"><span class=\"meta\"> $</span> curl -H 'stub:cloudxx' --cookie \"stub=cccccookie\" http://192.168.81.128:9080/args/?stub=arrrrg</span><br><span class=\"line\"> nnnnnnnnngxxxxxxx say:</span><br><span class=\"line\"> cloudxx</span><br><span class=\"line\"> arrrrg</span><br><span class=\"line\"> cccccookie</span><br><span class=\"line\"> {\"error_msg\":\"failed to match any routes\"}</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h3 id=\"route匹配成功后server或upstream流程\"><a href=\"#route匹配成功后server或upstream流程\" class=\"headerlink\" title=\"route匹配成功后server或upstream流程\"></a>route匹配成功后server或upstream流程</h3><p>首先，在route的配置中，<code>plugins</code>、<code>script</code>、<code>upstream/upstream_id</code>、<code>service_id</code>至少选择一个<br>当route匹配成功后会相应执行<code>plugins</code>…(目前猜测是根据优先级)<br>server最后关联的也是upstream，那么主要的还是介绍upstream的外发：<br>在route匹配成功后，会进行server_id和upstream_id的检查，如果有，就将相应的upstream结构赋值到<code>api_ctx.upstream_conf</code>，如果只有一个node，那么可以直接赋值相应的<code>upstream_host</code>，进行负载平衡，负载平衡特点：</p>\n<ol>\n<li>动态支持有权重的 round-robin 负载平衡</li>\n<li>动态支持一致性 hash 的负载均衡。</li>\n<li>启用上游节点的健康检查，将在负载均衡期间自动过滤不健康的节点，以确保系统稳定性。</li>\n<li>可以在 balancer 阶段使用自定义负载均衡算法。</li>\n</ol>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><h3 id=\"route匹配性能\"><a href=\"#route匹配性能\" class=\"headerlink\" title=\"route匹配性能\"></a>route匹配性能</h3><p><a href=\"https://github.com/api7/lua-resty-radixtree\" target=\"_blank\" rel=\"noopener\">lua-resty-radixtree</a><br>We wrote some simple benchmark scripts. Machine environment: MacBook Pro (16-inch, 2019), CPU 2.3 GHz Intel Core i9.</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make</span><br><span class=\"line\">cc -O2 -g -Wall -fpic -std=c99 -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast -DBUILDING_SO -c src/rax.c -o src/rax.o</span><br><span class=\"line\">cc -O2 -g -Wall -fpic -std=c99 -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast -DBUILDING_SO -c src/easy_rax.c -o src/easy_rax.o</span><br><span class=\"line\">cc -shared -fvisibility=hidden src/rax.o src/easy_rax.o -o librestyradixtree.so</span><br><span class=\"line\"></span><br><span class=\"line\">$ make bench</span><br><span class=\"line\">resty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-parameter.lua</span><br><span class=\"line\">matched res: 1</span><br><span class=\"line\">route count: 100000</span><br><span class=\"line\">match times: 10000000</span><br><span class=\"line\">time used  : 3.3849999904633 sec</span><br><span class=\"line\">QPS        : 2954209</span><br><span class=\"line\">each time  : 0.33849999904633 ns</span><br><span class=\"line\"></span><br><span class=\"line\">resty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-prefix.lua</span><br><span class=\"line\">matched res: 500</span><br><span class=\"line\">route count: 100000</span><br><span class=\"line\">match times: 1000000</span><br><span class=\"line\">time used  : 0.4229998588562 sec</span><br><span class=\"line\">QPS        : 2364066</span><br><span class=\"line\"></span><br><span class=\"line\">resty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-static.lua</span><br><span class=\"line\">matched res: 500</span><br><span class=\"line\">route count: 100000</span><br><span class=\"line\">match times: 10000000</span><br><span class=\"line\">time used  : 0.78799986839294 sec</span><br><span class=\"line\">QPS        : 12690357</span><br><span class=\"line\"></span><br><span class=\"line\">resty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-hosts.lua</span><br><span class=\"line\">matched res: 500</span><br><span class=\"line\">route count: 1000</span><br><span class=\"line\">match times: 100000</span><br><span class=\"line\">time used  : 1.6989998817444 sec</span><br><span class=\"line\">QPS        : 58858</span><br><span class=\"line\"></span><br><span class=\"line\">resty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-wildcard-hosts.lua</span><br><span class=\"line\">matched res: 500</span><br><span class=\"line\">route count: 1000</span><br><span class=\"line\">match times: 50000</span><br><span class=\"line\">time used  : 1.2469999790192 sec</span><br><span class=\"line\">QPS        : 40096</span><br></pre></td></tr></tbody></table></figure>","site":{"data":{}},"excerpt":"<p>针对性的了解apisix插件化api网关，期望能给项目提供一些参考和优化(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em><a href=\"https://github.com/apache/apisix\" target=\"_blank\" rel=\"noopener\">官方Git</a></em><br><em><a href=\"https://github.com/apache/apisix-dashboard\" target=\"_blank\" rel=\"noopener\">管理端页面</a></em><br><em><a href=\"https://github.com/apache/apisix/blob/master/doc/router-radixtree.md\" target=\"_blank\" rel=\"noopener\">router-radixtree</a></em><br><em><a href=\"https://github.com/apache/apisix/blob/master/doc/zh-cn/architecture-design.md\" target=\"_blank\" rel=\"noopener\">结构设计</a></em><br><em><a href=\"http://www.itheima.com/news/20200404/193127.html\" target=\"_blank\" rel=\"noopener\">安装参考</a></em><br><em><a href=\"https://segmentfault.com/a/1190000020128654\" target=\"_blank\" rel=\"noopener\">APISIX高性能实践</a></em><br><em><a href=\"https://zhuanlan.zhihu.com/p/89610466\" target=\"_blank\" rel=\"noopener\">APISIX高性能实践续</a></em><br><em><a href=\"https://cloud.tencent.com/developer/article/1528618\" target=\"_blank\" rel=\"noopener\">APISIX上手</a></em><br><em><a href=\"https://apisix.iresty.com/apisix/dashboard/#/schema/routes/list\" target=\"_blank\" rel=\"noopener\">官方参考dashboard</a></em><br><em>目前只在Coentos 7上安装测试，Centos 6上需要升级gcc，要支持<code>GLIBC_2.14</code></em></p>","more":"<h2 id=\"简介和安装\"><a href=\"#简介和安装\" class=\"headerlink\" title=\"简介和安装\"></a>简介和安装</h2><h3 id=\"apisix安装\"><a href=\"#apisix安装\" class=\"headerlink\" title=\"apisix安装\"></a>apisix安装</h3><p>直接看这个就可以了<a href=\"https://github.com/apache/apisix/blob/master/README_CN.md\" target=\"_blank\" rel=\"noopener\"><strong>官方中文</strong></a><br>可能遇到问题：</p>\n<ol>\n<li><p>openresty libssl.so.1.1 not found<br><a href=\"https://www.cnblogs.com/emanlee/p/6100019.html\" target=\"_blank\" rel=\"noopener\">升级openssl</a></p>\n</li>\n<li><p>需要注意的是，etcd的协议版本问题，需要支持2版本? <code>export ETCDCTL_API=2</code></p>\n<h3 id=\"APISIX-Dashboard安装\"><a href=\"#APISIX-Dashboard安装\" class=\"headerlink\" title=\"APISIX Dashboard安装\"></a>APISIX Dashboard安装</h3></li>\n<li><p>安装前置环境：mysql，golang，nodejs(version &gt;=10.xx)</p>\n</li>\n<li><p>安装启用apisix</p>\n</li>\n<li><p>配置mysql</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span>输入你的密码和用户名</span><br><span class=\"line\"><span class=\"meta\">$</span> mysql –uroot –p123456</span><br><span class=\"line\"><span class=\"meta\"> &gt;</span> source ./api/script/db/schema.sql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译运行后端程序</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd api &amp;&amp; go build -o ../manager-api . &amp;&amp; cd ..</span><br><span class=\"line\">sh ./api/run/run.sh &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译前端</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm insert -g yarn</span><br><span class=\"line\">yarn install</span><br><span class=\"line\">yarn build</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>联合apisix使用</p>\n<ol>\n<li><p>将刚刚前端编译得到的<code>/dist</code>的内容，放到apisix下的dashboard文件夹</p>\n</li>\n<li><p>修改apisix脚本，添加如下服务：</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> vi ./bin/apisix</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 10080;</span><br><span class=\"line\">    # gzip config</span><br><span class=\"line\">    gzip on; </span><br><span class=\"line\">    gzip_min_length 1k; </span><br><span class=\"line\">    gzip_comp_level 9;</span><br><span class=\"line\">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class=\"line\">    gzip_vary on; </span><br><span class=\"line\">    gzip_disable \"MSIE [1-6]\\.\";</span><br><span class=\"line\"></span><br><span class=\"line\">    root /usr/share/nginx/html;</span><br><span class=\"line\">    include /usr/local/openresty/nginx/conf/mime.types;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123; </span><br><span class=\"line\">        alias dashboard/;</span><br><span class=\"line\"></span><br><span class=\"line\">        try_files $uri $uri/index.html /index.html =404;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    location /apisix/admin &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080/apisix/admin;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启apisix<code>./bin/apisix restart</code></p>\n</li>\n</ol>\n</li>\n<li><p>访问<code>http://192.168.81.128:10080/</code>ip根据自己而定。默认登录名<code>admin</code>密码<code>admin</code>，可以在dashboard的<code>conf.json</code>中自己修改。</p>\n</li>\n</ol>\n<h2 id=\"APISIX的route匹配\"><a href=\"#APISIX的route匹配\" class=\"headerlink\" title=\"APISIX的route匹配\"></a>APISIX的route匹配</h2><p>项目需要，了解下apisix的route匹配方式。<br>首先apisix的架构参考<a href=\"https://github.com/apache/apisix/blob/master/doc/zh-cn/architecture-design.md\" target=\"_blank\" rel=\"noopener\">结构设计</a><br>apisix扩展匹配介绍<a href=\"https://github.com/apache/apisix/blob/master/doc/router-radixtree.md\" target=\"_blank\" rel=\"noopener\">router-radixtree</a></p>\n<h3 id=\"匹配原理和机制\"><a href=\"#匹配原理和机制\" class=\"headerlink\" title=\"匹配原理和机制\"></a>匹配原理和机制</h3><p>其核心的实现机制是使用了<code>resty.radixtree</code>这个lua库，<a href=\"https://github.com/api7/lua-resty-radixtree\" target=\"_blank\" rel=\"noopener\">详情</a>。包括路由匹配，域名匹配，方法匹配等。说白，都是字符匹配。<br><code>route</code>匹配源码如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">require</span> = <span class=\"built_in\">require</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"resty.radixtree\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> core = <span class=\"built_in\">require</span>(<span class=\"string\">\"apisix.core\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> plugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"apisix.plugin\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">ipairs</span> = <span class=\"built_in\">ipairs</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">type</span> = <span class=\"built_in\">type</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"built_in\">error</span> = <span class=\"built_in\">error</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> loadstring = loadstring</span><br><span class=\"line\"><span class=\"keyword\">local</span> user_routes</span><br><span class=\"line\"><span class=\"keyword\">local</span> cached_version</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">local</span> _M = &#123;version = <span class=\"number\">0.2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> uri_routes = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">local</span> uri_router</span><br><span class=\"line\"><span class=\"keyword\">local</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_radixtree_router</span><span class=\"params\">(routes)</span></span></span><br><span class=\"line\">    routes = routes <span class=\"keyword\">or</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> api_routes = plugin.api_routes()</span><br><span class=\"line\">    core.<span class=\"built_in\">table</span>.clear(uri_routes)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, route <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(api_routes) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(route) == <span class=\"string\">\"table\"</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            core.<span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(uri_routes, &#123;</span><br><span class=\"line\">                paths = route.uris <span class=\"keyword\">or</span> route.uri,</span><br><span class=\"line\">                methods = route.methods,</span><br><span class=\"line\">                handler = route.handler,</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, route <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(routes) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(route) == <span class=\"string\">\"table\"</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">local</span> filter_fun, err</span><br><span class=\"line\">            <span class=\"keyword\">if</span> route.value.filter_func <span class=\"keyword\">then</span></span><br><span class=\"line\">                filter_fun, err = loadstring(</span><br><span class=\"line\">                                        <span class=\"string\">\"return \"</span> .. route.value.filter_func,</span><br><span class=\"line\">                                        <span class=\"string\">\"router#\"</span> .. route.value.id)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> filter_fun <span class=\"keyword\">then</span></span><br><span class=\"line\">                    core.<span class=\"built_in\">log</span>.<span class=\"built_in\">error</span>(<span class=\"string\">\"failed to load filter function: \"</span>, err,</span><br><span class=\"line\">                                   <span class=\"string\">\" route id: \"</span>, route.value.id)</span><br><span class=\"line\">                    <span class=\"keyword\">goto</span> CONTINUE</span><br><span class=\"line\">                <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">                filter_fun = filter_fun()</span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">            core.<span class=\"built_in\">log</span>.info(<span class=\"string\">\"insert uri route: \"</span>,</span><br><span class=\"line\">                          core.json.delay_encode(route.value))</span><br><span class=\"line\">            core.<span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(uri_routes, &#123;</span><br><span class=\"line\">                paths = route.value.uris <span class=\"keyword\">or</span> route.value.uri,</span><br><span class=\"line\">                methods = route.value.methods,</span><br><span class=\"line\">                priority = route.value.priority,</span><br><span class=\"line\">                hosts = route.value.hosts <span class=\"keyword\">or</span> route.value.host,</span><br><span class=\"line\">                remote_addrs = route.value.remote_addrs</span><br><span class=\"line\">                               <span class=\"keyword\">or</span> route.value.remote_addr,</span><br><span class=\"line\">                vars = route.value.vars,</span><br><span class=\"line\">                filter_fun = filter_fun,</span><br><span class=\"line\">                <span class=\"comment\">--主要处理函数，如果uri_router匹配上了，会调用这个headler</span></span><br><span class=\"line\">                handler = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(api_ctx)</span></span></span><br><span class=\"line\">                    api_ctx.matched_params = <span class=\"literal\">nil</span></span><br><span class=\"line\">                    api_ctx.matched_route = route</span><br><span class=\"line\">                <span class=\"keyword\">end</span></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            ::CONTINUE::</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    core.<span class=\"built_in\">log</span>.info(<span class=\"string\">\"route items: \"</span>, core.json.delay_encode(uri_routes, <span class=\"literal\">true</span>))</span><br><span class=\"line\">    uri_router = router.new(uri_routes)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">local</span> match_opts = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_M.match</span><span class=\"params\">(api_ctx)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cached_version <span class=\"keyword\">or</span> cached_version ~= user_routes.conf_version <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"comment\">-- 这里生成uri_router</span></span><br><span class=\"line\">        create_radixtree_router(user_routes.values)</span><br><span class=\"line\">        cached_version = user_routes.conf_version</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> uri_router <span class=\"keyword\">then</span></span><br><span class=\"line\">        core.<span class=\"built_in\">log</span>.<span class=\"built_in\">error</span>(<span class=\"string\">\"failed to fetch valid `uri` router: \"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    core.<span class=\"built_in\">table</span>.clear(match_opts)</span><br><span class=\"line\">    match_opts.method = api_ctx.var.request_method</span><br><span class=\"line\">    match_opts.host = api_ctx.var.host</span><br><span class=\"line\">    match_opts.remote_addr = api_ctx.var.remote_addr</span><br><span class=\"line\">    match_opts.vars = api_ctx.var</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">-- 这里是匹配核心</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> ok = uri_router:dispatch(api_ctx.var.uri, match_opts, api_ctx)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> ok <span class=\"keyword\">then</span></span><br><span class=\"line\">        core.<span class=\"built_in\">log</span>.info(<span class=\"string\">\"not find any matched route\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_M.routes</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> user_routes <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user_routes.values, user_routes.conf_version</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_M.init_worker</span><span class=\"params\">(filter)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> err</span><br><span class=\"line\">    user_routes, err = core.<span class=\"built_in\">config</span>.new(<span class=\"string\">\"/routes\"</span>, &#123;</span><br><span class=\"line\">            automatic = <span class=\"literal\">true</span>,</span><br><span class=\"line\">            item_schema = core.schema.route,</span><br><span class=\"line\">            filter = filter,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> user_routes <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">error</span>(<span class=\"string\">\"failed to create etcd instance for fetching /routes : \"</span> .. err)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> _M</span><br></pre></td></tr></table></figure>\n\n<p>而在访问过程中对这个调用方式如下：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--调用上述的match函数</span></span><br><span class=\"line\">router.router_http.<span class=\"built_in\">match</span>(api_ctx)</span><br><span class=\"line\"><span class=\"comment\">--判断匹配是否成功</span></span><br><span class=\"line\"><span class=\"keyword\">local</span> route = api_ctx.matched_route</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> route <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> core.response.<span class=\"built_in\">exit</span>(<span class=\"number\">404</span>,</span><br><span class=\"line\">                    &#123;error_msg = <span class=\"string\">\"failed to match any routes\"</span>&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"resty-radixtree匹配原理\"><a href=\"#resty-radixtree匹配原理\" class=\"headerlink\" title=\"resty.radixtree匹配原理\"></a>resty.radixtree匹配原理</h4><p>主要分为两个部分，初始化注册<code>router</code>和运行时匹配过滤：<br><strong>初始化：</strong><br><img src=\"/2020/09/22/APISIX调研和使用/radixtree_init%E6%B5%81%E7%A8%8B%E5%9B%BE.drawio.png\"></p>\n<ol>\n<li>数据存储和查找的主key都是uri，全量匹配使用hash，通用匹配使用的都是radixtree。数据结构都可以参考图中的表。</li>\n<li>同一个uri有多个route的情况，会以数组的方式扩展，并且使用sort排序，排序顺序依据route中<code>priority</code>参数，越大优先级越高，越优先匹配。</li>\n</ol>\n<p><strong>运行时Match：</strong><br><img src=\"/2020/09/22/APISIX调研和使用/radixtree_match%E6%B5%81%E7%A8%8B%E5%9B%BE.drawio.png\"></p>\n<ol>\n<li><p>调用<code>router:match(api_ctx.var.uri, match_opts, ...)</code>时，先使用<code>hash</code>来寻找相应的注册routes(routes在注册的时候，也是根据uri来进行hash表插入，如果hash表设置不能用，才使用radix_tree)。如果hash找不到，就使用<code>radix_tree</code>查找匹配(这部分是c代码，还没看)</p>\n</li>\n<li><p>如果都匹配成功，<code>dispatch</code>会调用<code>route</code>里加入的<code>handler</code>。而<code>match</code>函数会返回<code>metadata</code></p>\n</li>\n<li><p>自定义函数方面，在定义route的时候，自定义<code>filter_fun</code>函数，进行匹配过滤的时候，就会调用<code>filter_fun</code>调用。类似示例如下：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=== TEST 1: sanity</span><br><span class=\"line\">--- config</span><br><span class=\"line\">    location /t &#123;</span><br><span class=\"line\">        content_by_lua_block &#123;</span><br><span class=\"line\">            local radix = require(\"resty.radixtree\")</span><br><span class=\"line\">            local rx = radix.new(&#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    paths = \"/aa\",</span><br><span class=\"line\">                    metadata = \"metadata /aa\",</span><br><span class=\"line\">                    filter_fun = function(vars)</span><br><span class=\"line\">                        ngx.log(ngx.WARN, \"start to filter\")</span><br><span class=\"line\">                        return vars['arg_k'] == 'v'</span><br><span class=\"line\">                    end</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            ngx.say(rx:match(\"/aa\", &#123;vars = ngx.var&#125;))</span><br><span class=\"line\">            ngx.say(rx:match(\"/aa\", &#123;&#125;))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">--- request</span><br><span class=\"line\">GET /t?k=v</span><br><span class=\"line\">--- no_error_log</span><br><span class=\"line\">[error]</span><br><span class=\"line\">--- error_log</span><br><span class=\"line\">start to filter</span><br><span class=\"line\">--- response_body</span><br><span class=\"line\">metadata /aa</span><br><span class=\"line\">metadata /aa</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于自定义变量的读取，比如有header，args和cookie里分别有个stub；nginx.var可以分别通过’http_’，’arg_’和’cookie_’直接读取相应的变量：<br>nginx配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">access_by_lua_block &#123;</span><br><span class=\"line\">     ngx.say(\"nnnnnnnnngxxxxxxx say:\")</span><br><span class=\"line\">     ngx.say(ngx.var['http_stub'])</span><br><span class=\"line\">     ngx.say(ngx.var['arg_stub'])</span><br><span class=\"line\">     ngx.say(ngx.var['cookie_stub'])</span><br><span class=\"line\">     apisix.http_access_phase()</span><br><span class=\"line\"> &#125;   </span><br><span class=\"line\"><span class=\"meta\"> $</span> curl -H 'stub:cloudxx' --cookie \"stub=cccccookie\" http://192.168.81.128:9080/args/?stub=arrrrg</span><br><span class=\"line\"> nnnnnnnnngxxxxxxx say:</span><br><span class=\"line\"> cloudxx</span><br><span class=\"line\"> arrrrg</span><br><span class=\"line\"> cccccookie</span><br><span class=\"line\"> &#123;\"error_msg\":\"failed to match any routes\"&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"route匹配成功后server或upstream流程\"><a href=\"#route匹配成功后server或upstream流程\" class=\"headerlink\" title=\"route匹配成功后server或upstream流程\"></a>route匹配成功后server或upstream流程</h3><p>首先，在route的配置中，<code>plugins</code>、<code>script</code>、<code>upstream/upstream_id</code>、<code>service_id</code>至少选择一个<br>当route匹配成功后会相应执行<code>plugins</code>…(目前猜测是根据优先级)<br>server最后关联的也是upstream，那么主要的还是介绍upstream的外发：<br>在route匹配成功后，会进行server_id和upstream_id的检查，如果有，就将相应的upstream结构赋值到<code>api_ctx.upstream_conf</code>，如果只有一个node，那么可以直接赋值相应的<code>upstream_host</code>，进行负载平衡，负载平衡特点：</p>\n<ol>\n<li>动态支持有权重的 round-robin 负载平衡</li>\n<li>动态支持一致性 hash 的负载均衡。</li>\n<li>启用上游节点的健康检查，将在负载均衡期间自动过滤不健康的节点，以确保系统稳定性。</li>\n<li>可以在 balancer 阶段使用自定义负载均衡算法。</li>\n</ol>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><h3 id=\"route匹配性能\"><a href=\"#route匹配性能\" class=\"headerlink\" title=\"route匹配性能\"></a>route匹配性能</h3><p><a href=\"https://github.com/api7/lua-resty-radixtree\" target=\"_blank\" rel=\"noopener\">lua-resty-radixtree</a><br>We wrote some simple benchmark scripts. Machine environment: MacBook Pro (16-inch, 2019), CPU 2.3 GHz Intel Core i9.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make</span><br><span class=\"line\">cc -O2 -g -Wall -fpic -std=c99 -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast -DBUILDING_SO -c src/rax.c -o src/rax.o</span><br><span class=\"line\">cc -O2 -g -Wall -fpic -std=c99 -Wno-pointer-to-int-cast -Wno-int-to-pointer-cast -DBUILDING_SO -c src/easy_rax.c -o src/easy_rax.o</span><br><span class=\"line\">cc -shared -fvisibility=hidden src/rax.o src/easy_rax.o -o librestyradixtree.so</span><br><span class=\"line\"></span><br><span class=\"line\">$ make bench</span><br><span class=\"line\">resty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-parameter.lua</span><br><span class=\"line\">matched res: 1</span><br><span class=\"line\">route count: 100000</span><br><span class=\"line\">match times: 10000000</span><br><span class=\"line\">time used  : 3.3849999904633 sec</span><br><span class=\"line\">QPS        : 2954209</span><br><span class=\"line\">each time  : 0.33849999904633 ns</span><br><span class=\"line\"></span><br><span class=\"line\">resty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-prefix.lua</span><br><span class=\"line\">matched res: 500</span><br><span class=\"line\">route count: 100000</span><br><span class=\"line\">match times: 1000000</span><br><span class=\"line\">time used  : 0.4229998588562 sec</span><br><span class=\"line\">QPS        : 2364066</span><br><span class=\"line\"></span><br><span class=\"line\">resty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-static.lua</span><br><span class=\"line\">matched res: 500</span><br><span class=\"line\">route count: 100000</span><br><span class=\"line\">match times: 10000000</span><br><span class=\"line\">time used  : 0.78799986839294 sec</span><br><span class=\"line\">QPS        : 12690357</span><br><span class=\"line\"></span><br><span class=\"line\">resty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-hosts.lua</span><br><span class=\"line\">matched res: 500</span><br><span class=\"line\">route count: 1000</span><br><span class=\"line\">match times: 100000</span><br><span class=\"line\">time used  : 1.6989998817444 sec</span><br><span class=\"line\">QPS        : 58858</span><br><span class=\"line\"></span><br><span class=\"line\">resty -I=./lib -I=./deps/share/lua/5.1 benchmark/match-wildcard-hosts.lua</span><br><span class=\"line\">matched res: 500</span><br><span class=\"line\">route count: 1000</span><br><span class=\"line\">match times: 50000</span><br><span class=\"line\">time used  : 1.2469999790192 sec</span><br><span class=\"line\">QPS        : 40096</span><br></pre></td></tr></table></figure>"},{"title":"Docker使用","date":"2020-09-14T03:27:39.000Z","_content":"\n\n苦于python环境的迁移，开始尝试使用docker来实现不同linux平台的环境搬迁。(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n*[Docker官方](https://www.docker.com)*  \n*[参考教程1](https://www.runoob.com/docker/centos-docker-install.html)  [参考教程2](https://yeasy.gitbooks.io/docker_practice/install/mirror.html)*  \n*[Docker Hub](https://hub.docker.com/)*\n\n<!-- more -->\n\n### 创建基本镜像\n我这儿的基础镜像是：`centos7+python3.7`  官方已经不支持centos7以下的版本了。   \n但是由于我想用这个基本镜像做开发，因此还根据我自己添加了其他的一些工具。  \n基本步骤如下[参考](https://docs.docker.com/install/linux/docker-ce/centos/)：  \n**脚本安装(懒人)：**\n```sh\n$ curl -fsSL https://get.docker.com -o get-docker.sh\n$ sudo sh get-docker.sh\n```\n**安装包安装(离线)：**\n1. 下载安装包，这儿有三类安装包，保险都下：https://download.docker.com/linux/centos/7/x86_64/stable/Packages/  \n2. 安装：\n   ```sh\n   $ sudo yum install /path/to/package.rpm\n   ```\n3. 启动：\n   ```sh\n   $ sudo systemctl start docker\n   ```\n4. 验证：\n   ```sh\n    $ sudo docker run hello-world\n   ```\n**社区版安装：**\n1. 卸载旧版本docker\n   ```sh\n   $ sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n   ```\n2. 由于linux是社区版本(开源)，需要安装docker仓库，以便更新.\n   ```sh\n   $ sudo yum install -y yum-utils \\\n        device-mapper-persistent-data \\\n        lvm2\n    ```\n3. 设置仓库：\n   ```sh\n   $ sudo yum-config-manager \\\n        --add-repo \\\n        https://download.docker.com/linux/centos/docker-ce.repo\n   ```\n4. 官网还有一些配置操作，我这儿做开发，基本用不到。跳过，直接安装。(如果网速慢，自行配置yum源)\n   ```sh\n   $ sudo yum install docker-ce docker-ce-cli containerd.io\n   ```\n5. 查看需要安装的版本：\n   ```sh\n   $ yum list docker-ce --showduplicates | sort -r\n    docker-ce.x86_64            3:19.03.5-3.el7                    docker-ce-stable \n    ...\n   ```\n6. 安装docker：\n   ```sh\n   $ sudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io\n   $ sudo yum install docker-ce-19.03.5 docker-ce-cli-19.03.5 containerd.io\n   ```\n7. 启动docker：\n   ```sh\n   $ sudo systemctl start docker\n   ```\n8. 检查安装是否成功：\n   ```sh\n   $ sudo docker run hello-world\n   ```\n**创建镜像**\n1. 最保险的方式，就是创建`系统+平台`这种镜像，但是缺点是镜像占用空间大。\n2. 直接创建`平台`镜像，占用空间小，但是有可能在不同版本的系统上运行不畅。\n\n那么我们两种都试试。\n老规矩，给docker hub加速，[参考](https://yeasy.gitbooks.io/docker_practice/install/mirror.html)：  \nUbuntu 16.04+、Debian 8+、CentOS 7  \n对应`/etc/docker/daemon.json`文件中添加：\n```json\n{\n  \"registry-mirrors\": [\n    \"https://dockerhub.azk8s.cn\",\n    \"https://hub-mirror.c.163.com\"\n  ]\n}\n```\n重启服务：\n```sh\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker\n```\n1. 系统+镜像  \n   1. 上docker hub，注册（docker2jihan）\n   2. 找个系统，我喜欢centos7，找个7.5纯净版的。[官方镜像](https://hub.docker.com/_/centos?tab=tags)\n   ```sh\n   $ docker pull centos:centos7.5.1804\n   $ docker images\n        REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n        centos              centos7.5.1804      cf49811e3cdb        9 months ago        200MB\n   ```\n   3. 进入到相应该镜像：\n   ```sh\n   docker run -t -i centos:centos7.5.1804 /bin/bash\n    <-i 参数后面跟镜像名:标签>\n    ```\n    4. 安装各种你所需要的东西，我这儿安装了常用命令，python等。宿主机到docker拷贝`docker cp .vimrc <容器ID>:/root/`，反正也一样。\n    5. 制作镜像：\n    ```sh\n    docker commit -m=\"init and conda\" -a=\"jihan\" <容器ID> <name>:<tag>\n    ```\n    6. 上传镜像或者导出镜像：  \n   上传：  \n   创建tag：`docker tag IMAGEID new_repository newTAG`  \n   登录验证：`docker login`  \n   上传docker hub：`docker push <hub-user>/<repo-name>:<tag>`  \n   导出：  \n   `docker save  <repo-name>:<tag> -o <name>.tar`  \n   导入：  \n   `docker import <name>.tar - <repo-name>:<tag`\n","source":"_posts/Docker使用.md","raw":"---\ntitle: Docker使用\ndate: 2020-09-14 11:27:39\ntags:\n---\n\n\n苦于python环境的迁移，开始尝试使用docker来实现不同linux平台的环境搬迁。(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n*[Docker官方](https://www.docker.com)*  \n*[参考教程1](https://www.runoob.com/docker/centos-docker-install.html)  [参考教程2](https://yeasy.gitbooks.io/docker_practice/install/mirror.html)*  \n*[Docker Hub](https://hub.docker.com/)*\n\n<!-- more -->\n\n### 创建基本镜像\n我这儿的基础镜像是：`centos7+python3.7`  官方已经不支持centos7以下的版本了。   \n但是由于我想用这个基本镜像做开发，因此还根据我自己添加了其他的一些工具。  \n基本步骤如下[参考](https://docs.docker.com/install/linux/docker-ce/centos/)：  \n**脚本安装(懒人)：**\n```sh\n$ curl -fsSL https://get.docker.com -o get-docker.sh\n$ sudo sh get-docker.sh\n```\n**安装包安装(离线)：**\n1. 下载安装包，这儿有三类安装包，保险都下：https://download.docker.com/linux/centos/7/x86_64/stable/Packages/  \n2. 安装：\n   ```sh\n   $ sudo yum install /path/to/package.rpm\n   ```\n3. 启动：\n   ```sh\n   $ sudo systemctl start docker\n   ```\n4. 验证：\n   ```sh\n    $ sudo docker run hello-world\n   ```\n**社区版安装：**\n1. 卸载旧版本docker\n   ```sh\n   $ sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n   ```\n2. 由于linux是社区版本(开源)，需要安装docker仓库，以便更新.\n   ```sh\n   $ sudo yum install -y yum-utils \\\n        device-mapper-persistent-data \\\n        lvm2\n    ```\n3. 设置仓库：\n   ```sh\n   $ sudo yum-config-manager \\\n        --add-repo \\\n        https://download.docker.com/linux/centos/docker-ce.repo\n   ```\n4. 官网还有一些配置操作，我这儿做开发，基本用不到。跳过，直接安装。(如果网速慢，自行配置yum源)\n   ```sh\n   $ sudo yum install docker-ce docker-ce-cli containerd.io\n   ```\n5. 查看需要安装的版本：\n   ```sh\n   $ yum list docker-ce --showduplicates | sort -r\n    docker-ce.x86_64            3:19.03.5-3.el7                    docker-ce-stable \n    ...\n   ```\n6. 安装docker：\n   ```sh\n   $ sudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io\n   $ sudo yum install docker-ce-19.03.5 docker-ce-cli-19.03.5 containerd.io\n   ```\n7. 启动docker：\n   ```sh\n   $ sudo systemctl start docker\n   ```\n8. 检查安装是否成功：\n   ```sh\n   $ sudo docker run hello-world\n   ```\n**创建镜像**\n1. 最保险的方式，就是创建`系统+平台`这种镜像，但是缺点是镜像占用空间大。\n2. 直接创建`平台`镜像，占用空间小，但是有可能在不同版本的系统上运行不畅。\n\n那么我们两种都试试。\n老规矩，给docker hub加速，[参考](https://yeasy.gitbooks.io/docker_practice/install/mirror.html)：  \nUbuntu 16.04+、Debian 8+、CentOS 7  \n对应`/etc/docker/daemon.json`文件中添加：\n```json\n{\n  \"registry-mirrors\": [\n    \"https://dockerhub.azk8s.cn\",\n    \"https://hub-mirror.c.163.com\"\n  ]\n}\n```\n重启服务：\n```sh\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker\n```\n1. 系统+镜像  \n   1. 上docker hub，注册（docker2jihan）\n   2. 找个系统，我喜欢centos7，找个7.5纯净版的。[官方镜像](https://hub.docker.com/_/centos?tab=tags)\n   ```sh\n   $ docker pull centos:centos7.5.1804\n   $ docker images\n        REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n        centos              centos7.5.1804      cf49811e3cdb        9 months ago        200MB\n   ```\n   3. 进入到相应该镜像：\n   ```sh\n   docker run -t -i centos:centos7.5.1804 /bin/bash\n    <-i 参数后面跟镜像名:标签>\n    ```\n    4. 安装各种你所需要的东西，我这儿安装了常用命令，python等。宿主机到docker拷贝`docker cp .vimrc <容器ID>:/root/`，反正也一样。\n    5. 制作镜像：\n    ```sh\n    docker commit -m=\"init and conda\" -a=\"jihan\" <容器ID> <name>:<tag>\n    ```\n    6. 上传镜像或者导出镜像：  \n   上传：  \n   创建tag：`docker tag IMAGEID new_repository newTAG`  \n   登录验证：`docker login`  \n   上传docker hub：`docker push <hub-user>/<repo-name>:<tag>`  \n   导出：  \n   `docker save  <repo-name>:<tag> -o <name>.tar`  \n   导入：  \n   `docker import <name>.tar - <repo-name>:<tag`\n","slug":"Docker使用","published":1,"updated":"2020-09-14T03:28:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0inse0009h9uor8pxbqvi","content":"<p>苦于python环境的迁移，开始尝试使用docker来实现不同linux平台的环境搬迁。(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker官方</a></em><br><em><a href=\"https://www.runoob.com/docker/centos-docker-install.html\" target=\"_blank\" rel=\"noopener\">参考教程1</a>  <a href=\"https://yeasy.gitbooks.io/docker_practice/install/mirror.html\" target=\"_blank\" rel=\"noopener\">参考教程2</a></em><br><em><a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker Hub</a></em></p>\n<a id=\"more\"></a>\n\n<h3 id=\"创建基本镜像\"><a href=\"#创建基本镜像\" class=\"headerlink\" title=\"创建基本镜像\"></a>创建基本镜像</h3><p>我这儿的基础镜像是：<code>centos7+python3.7</code>  官方已经不支持centos7以下的版本了。<br>但是由于我想用这个基本镜像做开发，因此还根据我自己添加了其他的一些工具。<br>基本步骤如下<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">参考</a>：<br><strong>脚本安装(懒人)：</strong></p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class=\"line\">$ sudo sh get-docker.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>安装包安装(离线)：</strong></p>\n<ol>\n<li><p>下载安装包，这儿有三类安装包，保险都下：<a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a>  </p>\n</li>\n<li><p>安装：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install /path/to/package.rpm</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>启动：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>验证：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run hello-world</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<p><strong>社区版安装：</strong></p>\n<ol>\n<li><p>卸载旧版本docker</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum remove docker \\</span><br><span class=\"line\">               docker-client \\</span><br><span class=\"line\">               docker-client-latest \\</span><br><span class=\"line\">               docker-common \\</span><br><span class=\"line\">               docker-latest \\</span><br><span class=\"line\">               docker-latest-logrotate \\</span><br><span class=\"line\">               docker-logrotate \\</span><br><span class=\"line\">               docker-engine</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>由于linux是社区版本(开源)，需要安装docker仓库，以便更新.</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install -y yum-utils \\</span><br><span class=\"line\">     device-mapper-persistent-data \\</span><br><span class=\"line\">     lvm2</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>设置仓库：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum-config-manager \\</span><br><span class=\"line\">     --add-repo \\</span><br><span class=\"line\">     https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>官网还有一些配置操作，我这儿做开发，基本用不到。跳过，直接安装。(如果网速慢，自行配置yum源)</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>查看需要安装的版本：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"> docker-ce.x86_64            3:19.03.5-3.el7                    docker-ce-stable </span><br><span class=\"line\"> ...</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>安装docker：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class=\"line\">$ sudo yum install docker-ce-19.03.5 docker-ce-cli-19.03.5 containerd.io</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>启动docker：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>检查安装是否成功：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run hello-world</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<p><strong>创建镜像</strong></p>\n<ol>\n<li>最保险的方式，就是创建<code>系统+平台</code>这种镜像，但是缺点是镜像占用空间大。</li>\n<li>直接创建<code>平台</code>镜像，占用空间小，但是有可能在不同版本的系统上运行不畅。</li>\n</ol>\n<p>那么我们两种都试试。<br>老规矩，给docker hub加速，<a href=\"https://yeasy.gitbooks.io/docker_practice/install/mirror.html\" target=\"_blank\" rel=\"noopener\">参考</a>：<br>Ubuntu 16.04+、Debian 8+、CentOS 7<br>对应<code>/etc/docker/daemon.json</code>文件中添加：</p>\n<figure class=\"highlight json\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"https://dockerhub.azk8s.cn\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"https://hub-mirror.c.163.com\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>重启服务：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl daemon-reload</span><br><span class=\"line\">$ sudo systemctl restart docker</span><br></pre></td></tr></tbody></table></figure>\n\n<ol>\n<li><p>系统+镜像  </p>\n<ol>\n<li><p>上docker hub，注册（docker2jihan）</p>\n</li>\n<li><p>找个系统，我喜欢centos7，找个7.5纯净版的。<a href=\"https://hub.docker.com/_/centos?tab=tags\" target=\"_blank\" rel=\"noopener\">官方镜像</a></p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull centos:centos7.5.1804</span><br><span class=\"line\">$ docker images</span><br><span class=\"line\">     REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">     centos              centos7.5.1804      cf49811e3cdb        9 months ago        200MB</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>进入到相应该镜像：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i centos:centos7.5.1804 /bin/bash</span><br><span class=\"line\"> &lt;-i 参数后面跟镜像名:标签&gt;</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>安装各种你所需要的东西，我这儿安装了常用命令，python等。宿主机到docker拷贝<code>docker cp .vimrc &lt;容器ID&gt;:/root/</code>，反正也一样。</p>\n</li>\n<li><p>制作镜像：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m=<span class=\"string\">\"init and conda\"</span> -a=<span class=\"string\">\"jihan\"</span> &lt;容器ID&gt; &lt;name&gt;:&lt;tag&gt;</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>上传镜像或者导出镜像：<br>上传：<br>创建tag：<code>docker tag IMAGEID new_repository newTAG</code><br>登录验证：<code>docker login</code><br>上传docker hub：<code>docker push &lt;hub-user&gt;/&lt;repo-name&gt;:&lt;tag&gt;</code><br>导出：<br><code>docker save  &lt;repo-name&gt;:&lt;tag&gt; -o &lt;name&gt;.tar</code><br>导入：<br><code>docker import &lt;name&gt;.tar - &lt;repo-name&gt;:&lt;tag</code></p>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>苦于python环境的迁移，开始尝试使用docker来实现不同linux平台的环境搬迁。(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker官方</a></em><br><em><a href=\"https://www.runoob.com/docker/centos-docker-install.html\" target=\"_blank\" rel=\"noopener\">参考教程1</a>  <a href=\"https://yeasy.gitbooks.io/docker_practice/install/mirror.html\" target=\"_blank\" rel=\"noopener\">参考教程2</a></em><br><em><a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker Hub</a></em></p>","more":"<h3 id=\"创建基本镜像\"><a href=\"#创建基本镜像\" class=\"headerlink\" title=\"创建基本镜像\"></a>创建基本镜像</h3><p>我这儿的基础镜像是：<code>centos7+python3.7</code>  官方已经不支持centos7以下的版本了。<br>但是由于我想用这个基本镜像做开发，因此还根据我自己添加了其他的一些工具。<br>基本步骤如下<a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\">参考</a>：<br><strong>脚本安装(懒人)：</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class=\"line\">$ sudo sh get-docker.sh</span><br></pre></td></tr></table></figure>\n\n<p><strong>安装包安装(离线)：</strong></p>\n<ol>\n<li><p>下载安装包，这儿有三类安装包，保险都下：<a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a>  </p>\n</li>\n<li><p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install /path/to/package.rpm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>社区版安装：</strong></p>\n<ol>\n<li><p>卸载旧版本docker</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum remove docker \\</span><br><span class=\"line\">               docker-client \\</span><br><span class=\"line\">               docker-client-latest \\</span><br><span class=\"line\">               docker-common \\</span><br><span class=\"line\">               docker-latest \\</span><br><span class=\"line\">               docker-latest-logrotate \\</span><br><span class=\"line\">               docker-logrotate \\</span><br><span class=\"line\">               docker-engine</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由于linux是社区版本(开源)，需要安装docker仓库，以便更新.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install -y yum-utils \\</span><br><span class=\"line\">     device-mapper-persistent-data \\</span><br><span class=\"line\">     lvm2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum-config-manager \\</span><br><span class=\"line\">     --add-repo \\</span><br><span class=\"line\">     https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>官网还有一些配置操作，我这儿做开发，基本用不到。跳过，直接安装。(如果网速慢，自行配置yum源)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看需要安装的版本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"> docker-ce.x86_64            3:19.03.5-3.el7                    docker-ce-stable </span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装docker：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br><span class=\"line\">$ sudo yum install docker-ce-19.03.5 docker-ce-cli-19.03.5 containerd.io</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动docker：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查安装是否成功：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>创建镜像</strong></p>\n<ol>\n<li>最保险的方式，就是创建<code>系统+平台</code>这种镜像，但是缺点是镜像占用空间大。</li>\n<li>直接创建<code>平台</code>镜像，占用空间小，但是有可能在不同版本的系统上运行不畅。</li>\n</ol>\n<p>那么我们两种都试试。<br>老规矩，给docker hub加速，<a href=\"https://yeasy.gitbooks.io/docker_practice/install/mirror.html\" target=\"_blank\" rel=\"noopener\">参考</a>：<br>Ubuntu 16.04+、Debian 8+、CentOS 7<br>对应<code>/etc/docker/daemon.json</code>文件中添加：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"https://dockerhub.azk8s.cn\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"https://hub-mirror.c.163.com\"</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重启服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl daemon-reload</span><br><span class=\"line\">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>系统+镜像  </p>\n<ol>\n<li><p>上docker hub，注册（docker2jihan）</p>\n</li>\n<li><p>找个系统，我喜欢centos7，找个7.5纯净版的。<a href=\"https://hub.docker.com/_/centos?tab=tags\" target=\"_blank\" rel=\"noopener\">官方镜像</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull centos:centos7.5.1804</span><br><span class=\"line\">$ docker images</span><br><span class=\"line\">     REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">     centos              centos7.5.1804      cf49811e3cdb        9 months ago        200MB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入到相应该镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -t -i centos:centos7.5.1804 /bin/bash</span><br><span class=\"line\"> &lt;-i 参数后面跟镜像名:标签&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装各种你所需要的东西，我这儿安装了常用命令，python等。宿主机到docker拷贝<code>docker cp .vimrc &lt;容器ID&gt;:/root/</code>，反正也一样。</p>\n</li>\n<li><p>制作镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m=<span class=\"string\">\"init and conda\"</span> -a=<span class=\"string\">\"jihan\"</span> &lt;容器ID&gt; &lt;name&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上传镜像或者导出镜像：<br>上传：<br>创建tag：<code>docker tag IMAGEID new_repository newTAG</code><br>登录验证：<code>docker login</code><br>上传docker hub：<code>docker push &lt;hub-user&gt;/&lt;repo-name&gt;:&lt;tag&gt;</code><br>导出：<br><code>docker save  &lt;repo-name&gt;:&lt;tag&gt; -o &lt;name&gt;.tar</code><br>导入：<br><code>docker import &lt;name&gt;.tar - &lt;repo-name&gt;:&lt;tag</code></p>\n</li>\n</ol>\n</li>\n</ol>"},{"title":"Netfilter介绍及其实现原理","date":"2020-09-14T03:29:27.000Z","_content":"\n\n工作需要，了解了一下Net filter的工作原理。(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n\n*源码的版本：linux-3.10.0-1127.18.2.el7 (centos)*\n\n<!-- more -->\n\n\n[简介](https://www.ibm.com/developerworks/cn/linux/network/s-netip/index.html)\n\n*包含netfilter的基本介绍，iptables规则介绍及使用，netfilter实现原理，自定义match实现，链接跟踪实现、ipset和iptables联动和ipset实现*\n\n## 简介\n**Netfilter**，在Linux内核中的一个软件框架，用于管理网络数据包。不仅具有网络地址转换（NAT）的功能，也具备数据包内容修改、以及数据包过滤等防火墙功能。利用运作于用户空间的应用软件，如`iptables`、`ebtables`和`arptables`等，来控制Netfilter，系统管理者可以管理通过Linux操作系统的各种网络数据包。\n**iptables：**\nNetfilter中最为常用的一种网络数据包过滤方式——IP包过滤，我们也将重点介绍这种过滤方式。用户在使用`iptables`时需要超级用户权限，以及内核模块需要`Xtables`模块做支撑。iptables只能处理ipv4，对应的ipv6则使ip6tables来处理。\n**ebtables**\nebtables 是以太网桥防火墙，以太网桥工作在数据链路层，ebtables 主要用来过滤数据链路层数据包。使用 ebtables 可以实现 filtering 、NAT 和 brouting。过滤根据 MAC 头包括 VLAN ID 等信息确定是否丢弃该帧。MAC NAT 可以修改 MAC 源和目的地址。Brouting 意为 bridge or route，根据规则确定应该将数据帧路由给上层（iptables）还是通过网桥转给其它的接口。\nebtables 和我们熟悉的 iptables 很像，也有规则（rules）、链（chains）和表（tables）的概念。ebtables 使用规则确定应当对数据帧执行什么动作。规则按照不同的链分组，不同的表中包含不同的链。在 ebtables 中有三张表：filter、nat 和 broute，分别对应其三大功能模块。\n需要注意的是如果一个以太网接口 eth1，它并没有桥接到网桥上，此时，从 eth1 进来的数据包不会走到 ebtables 中。在 bridge check 点，会检查数据包进入的接口是否属于某个桥，如果是则走 ebtables，否则直接走 iptables。也就是说，ebtables 只对桥接网络生效。\n**arptables**\narptables 是运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理地址解析协议(arp)数据包的过滤和转发。\narptables基于iptables开发，使用时也与iptables有些类似，都有“表（tables）”、“链（chain）”和“规则（rules）”三个层面。\n但是arptables功能较单一，仅有filter一个表。并且，也只有INPUT（从内核2.4版）、OUTPUT（从内核2.4版）和FORWARD（从内核2.6版）三个内建链。arptables的主要用途之一是防范ARP欺骗。\n### 基础结构\n**Netfilter** 包含了一组内核钩子 API ，周边内核组件可以使用这些钩子在网络栈中注册回调函数。每一个在网络栈中流通的包到达相应的钩子时，就会触发相应的回调函数，从而能够完成包过滤、网络地址（端口）转换和网络包协议头修改等各种操作。\nNetfilter 提供了五种钩子：\n![Netfilter hook](Netfilter介绍及其实现原理/Netfilter%20hooks.png)\n1. `NF_IP_PER_ROUNTING` — 当数据包到达计算机立即触发。\n2. `NF_IP_LOCAL_IN` — 当数据包的目的地就是当前计算机时触发。\n3. `NF_IP_FORWARD` — 当数据包目的地址是其它的网络接口时触发。\n4. `NF_IP_POST_ROUTING` — 当数据包即将从计算机发出时触发。\n5. `NF_IP_LOCAL_OUT` — 当数据包由本地生成并发向外部时触发。\n\n基于 Netfilter 钩子 API 实现的内核模块主要有 ebtables、arptables、ip(6)tables、nf_tables、NAT、connection tracking 等。如下架构图：\n![Netfilter](Netfilter介绍及其实现原理/Netfilter架构.png)\n\n而数据包在整个Netfilter中的数据流如下图：\n![网络数据包流](Netfilter介绍及其实现原理/1920px-Netfilter-packet-flow.png)\n\n\n### 建立规则和链\n通过向防火墙提供有关对来自某个源、到某个目的地或具有特定协议类型的信息包要做些什么的指令，规则控制信息包的过滤。 通过使用 netfilter/iptables 系统提供的特殊命令 iptables ，建立这些规则，并将其添加到内核空间的特定信息包过滤表内的链中。关于添加／除去／编辑规则的命令的一般语法如下：\n```\niptables [-t table] command [match] [target]\n```\n#### 用法\n|选项| 描述 | \n|---|---|\n|-A --append|将一个或多个规则添加到所选链的末尾。|\n|-C --check|检查与所选链中的规范匹配的规则。|\n|-D --delete|从所选链中删除一个或多个规则。|\n|-F --flush|逐个删除所有规则。|\n|-I --insert|将一个或多个规则作为给定的规则编号插入所选链中。|\n|-L --list|显示所选链中的规则。|\n|-n --numeric|以数字格式显示IP地址或主机名和邮政编号。|\n|-N --new-chain <name>|创建一个新的用户定义链。|\n|-v --verbose|与list选项一起使用时提供更多信息。|\n|-X --delete-chain <name>|删除用户定义的链。|\n\n#### 示例\n```\n// 删除规则\niptables -F\niptables –flush\n//设置链的默认策略\niptables -P INPUT DROP\n//指定IP源和网卡丢弃\niptables -A INPUT -i eth0 -p tcp -s 192.168.100.1 -j DROP\n//指定IP源和网卡tcp拒绝\niptables -A INPUT -i eth0 -p tcp -s 192.168.100.1 -j REJECT --reject-with tcp-reset\n//仅允许来自于192.168.100.0/24域的用户的ssh连接请求\niptables -A INPUT -i eth0 -p tcp -s 192.168.100.0/24 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\n//端口转发\niptables -t nat -A PREROUTING -p tcp -d 192.168.102.37 --dport 422 -j DNAT --to 192.168.102.37:22\n//允许多端口访问，也支持端口段：22-443\niptables -A INPUT -i eth0 -p tcp -m multiport --dports 22,80,443 -m state --state NEW,ESTABLISHED -j ACCEPT\n//使用iptables nth将HTTPS流量负载平衡至两个不同的ip地址。\niptables -t nat -A PREROUTING -p tcp --dport 8000 -m state --state NEW -m statistic --mode nth --every 2 --packet 0 -j DNAT --to-destination 192.168.17.33:8001\niptables -t nat -A PREROUTING -p tcp --dport 8000 -m state --state NEW -m statistic --mode nth --every 2 --packet 1 -j DNAT --to-destination 192.168.17.33:8002\n//防火墙服务器上的其中一个网卡连接到外部，另一个网卡连接到内部服务器，使用以下规则允许内部网络与外部网络的通信。此例中，eth1连接到外部网络(互联网)，eth0连接到内部网络(例如:192.168.1.x)。\niptables -A FORWARD -i eth0 -o eth1 -j ACCEPT\n//按流量匹配ping次数。（--limit 10/minute表示一分钟产生10个令牌即6秒一个，--limit-burst 5表示令牌桶最多可以放5个令牌，此项默认值就是5。即实现了平均值(--limit)和峰值(--limit-burst)约束）\niptables -I INPUT 1 -p icmp -m limit --limit 10/minute --limit-burst 5 -j ACCEPT\n//记录丢弃的数据表\niptables -N LOGGING\niptables -A INPUT -i eth0 -p tcp -s 10.92.2.188 -j LOGGING\niptables -A LOGGING -m limit --limit 2/min -j LOG --log-prefix \"IPTables Packet Dropped: \" --log-level 4\niptables -A LOGGING -j DROP\ncat /var/log/messages | grep IPTables #(centos) 根据syslog的配置来确定位置。\n```\n## 规则构成\n在我们执行一个iptables命令的时候，往往达到的效果，就是在某个表的某个链中添加某一条规则。而参与这条规则构成的包括表(table)、链（chain）、匹配(match)和目标（target）。下面将详细介绍这几个部分。\n### 表(table)\niptables里包含了4张表，分别是filter、nat、mangle和raw表。而表的作用在于存放规则，比如我们平时执行`iptables -nL`会得到类似的结果：\n```\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination         \nACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:80\n\nChain FORWARD (policy ACCEPT)\ntarget     prot opt source               destination         \n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination         \n```\n(policy XXX)表示着默认策略。表中包含的链，表示着表里的规则可生效的链范围。表和链有着如下关系：\n![iptables的表和链](Netfilter介绍及其实现原理/iptables-表和链.png)\n### 链(chain)\n如果表是存放规则的地方，而链就是决定规则执行的时机，iptables中的5条链PREROUTING、INPUT、OUTPUT、FORWARD和POSTROUTING。而执行的位置也在简介中的netfilter hook原理中给出了。链把相应的表按照一定的顺序串起来，找出表里对应的规则进行执行。\n![iptables-链和表](Netfilter介绍及其实现原理/[iptables-链和表.png)\n### 匹配(match)\n`-m`或`--match`命令所做的工作，当然这部分我们称为扩展匹配，`-s -i`所执行的也是匹配工作，称为通用匹配。\n**通用匹配**\n类似`-s`这类的通用匹配，通常在用户态代码，和内核代码都包含了，不需要额外加载module。在iptables规则下发里，也是属于附加的基本参数。\n**扩展匹配**\n首先，我们在使用扩展匹配的时候，可以使用帮助文档：`iptables -m the_match_you_want --help`。扩展模块要工作的时候，都需要进行模块匹配，用户态匹配对应的libipt_xxx或libxt_xxx。内核态匹配对应的xt_xxx。比如我们使用的`-m state`在iptables命令执行时，会找`libxt_state.so`的动态库，规则下发到内核的时候，内核会找对应的`xt_state.ko`模块。具体源码实现后续会说明。\n如果想自定义扩展匹配，那么需要写内核模块代码(参考内核模块源码的xt_multiport.c)和用户态模块代码(参考libxt_multiport.c)以及定义的头文件(参考xt_multiport.h)\n### 目标(target)\n`-j`所做的工作，在包匹配成功后，就会执行`-j`后面的动作，来对包进行处理。\n#### 通用目标\n`DROP`,`ACCEPT`,`QUEUE`和`RETURN`这几个属于通用匹配，他们同样以模块的形式进行加载和工作，对应的模块是`standard`\n#### 扩展目标\n扩展目标和扩展匹配也是相似的工作原理，都是进行模块加载。如果要写自定义模块，需要内核模块代码(参考xt_LOG.c)和用户态模块代码(参考libipt_LOG.c)和头文件(参考xt_LOG.h)\n\n## Netfilter源码实现\nNetfilter的整体工作方式类似下图：\n![](Netfilter介绍及其实现原理/iptables内核通信.jpg)\n### 基本数据结构\n由于本人也没有精读源码，所以也只能介绍个大概，一切以源码为准。\n**xt_table与xt_table_info**\nxt_table是Netfilter的核心数据结构，它包含了每个表的所有规则信息，以及匹配处理方法。数据包进入Netfilter后通过查表，匹配相应的规则来决定对数据包的处理结果。下面是xt_table的完整定义（在X_tables.h中）：\n```c\nstruct xt_table {\n    struct list_head list;\n\n    /* What hooks you will enter on */\n    unsigned int valid_hooks;\n\n    /* Man behind the curtain... */\n    struct xt_table_info *private;\n\n    /* Set this to THIS_MODULE if you are a module, otherwise NULL */\n    struct module *me;\n\n    u_int8_t af;      /* address/protocol family */\n\n    int priority;     /* hook order */\n\n    /* A unique name... */\n\n    const char name[XT_TABLE_MAXNAMELEN];\n};\n```\n每个成员意思见上文定义中的注释，个别成员说明如下：\nvalid_hooks：所支持的hook点类型，决定后续注册hook操作的位置。比如filter表的valid_hoos被指定为：(1 << NF_INET_LOCAL_IN) | (1 << NF_INET_FORWARD) | (1 << NF_INET_LOCAL_OUT))，即在NF_INET_LOCAL_IN、NF_INET_FORWARD、NF_INET_LOCAL_OUT三处注册hook操作；\nprivate：xt_table的数据区，包含了所有规则和规则处理方法等信息。xt_table_info详细信息见下文。\n\nxt_table的所有数据都存在private的成员变量中，private是结构体struct xt_table_info，其定义如下：\n```c\nstruct xt_table_info {\n    /* Size per table */\n    unsigned int size;\n\n    /* Number of entries: FIXME. --RR */\n    unsigned int number;\n\n    /* Initial number of entries. Needed for module usage count */\n    unsigned int initial_entries;\n\n    /* Entry points and underflows */\n    unsigned int hook_entry[NF_INET_NUMHOOKS];\n    unsigned int underflow[NF_INET_NUMHOOKS];\n\n    /*\n     * Number of user chains. Since tables cannot have loops, at most\n     * @stacksize jumps (number of user chains) can possibly be made.\n     */\n    unsigned int stacksize;\n    unsigned int __percpu *stackptr;\n    void ***jumpstack;\n\n    /* ipt_entry tables: one per CPU */\n    /* Note : this field MUST be the last one, see XT_TABLE_INFO_SZ */\n\n    void *entries[1];\n};\n```\n重要成员说明：\nhook_entry: 不同hook点的规则的偏移量；\nentries： 规则存储的入口，为可变区域，必须放在结构末尾。entries本质上是ipt_entry结构。关于ipt_entry定义和成员介绍见下文。\n\n**ipt_entry**\nipt_entry结构是对规则的描述，其定义如下：\n```c\n/* This structure defines each of the firewall rules.  Consists of 3\n   parts which are 1) general IP header stuff 2) match specific\n   stuff 3) the target to perform if the rule matches */\nstruct ipt_entry {\n\n    struct ipt_ip ip;\n\n    /* Mark with fields that we care about. */\n    unsigned int nfcache;\n\n    /* Size of ipt_entry + matches */\n    u_int16_t target_offset;\n\n    /* Size of ipt_entry + matches + target */\n    u_int16_t next_offset;\n\n    /* Back pointer */\n    unsigned int comefrom;\n\n    /* Packet and byte counters. */\n    struct xt_counters counters;\n\n    /* The matches (if any), then the target. */\n    unsigned char elems[0];\n};\n```\n成员elems中，保存了一条规则的所有匹配（matchs），以及匹配后的处理操作（target）。在Iptables.c中，generate_entry（）方法新建一个ipt_entry，可以看到如何将matchs和target添加到ipt_entry中的：\n```c\nstatic struct ipt_entry *\ngenerate_entry(const struct ipt_entry *fw,\n           struct xtables_rule_match *matches,\n           struct ipt_entry_target *target)\n{\n    unsigned int size;\n    struct xtables_rule_match *matchp;\n    struct ipt_entry *e;\n\n    size = sizeof(struct ipt_entry);\n\n    for (matchp = matches; matchp; matchp = matchp->next)\n       size += matchp->match->m->u.match_size;\n\n    e = xtables_malloc(size + target->u.target_size);\n    *e = *fw;\n    e->target_offset = size;\n    e->next_offset = size + target->u.target_size;\n\n    size = 0;\n    for (matchp = matches; matchp; matchp = matchp->next) {\n       memcpy(e->elems + size, matchp->match->m, matchp->match->m->u.match_size);\n       size += matchp->match->m->u.match_size;\n    }\n    memcpy(e->elems + size, target, target->u.target_size);\n    return e;\n}\n```\n见上文的程序片段，ipt_entry的空间占用为：ipt_entry结构自身的size，加之所有match的size总和，加之target的size。填写elems时，首先将所有的match依次拷贝到elems指向的存储位置，紧接着将target拷贝到其后。下图是ipt_entry存储示意图：\n![](Netfilter介绍及其实现原理/ipt_entry存储分布示意图.png)\n\n\n**nf_hook_ops**\nnf_hook_ops用于注册一个hook操作，它主要包含了hook操作执行函数、hook类型，以及优先级。我们可以认为，一个nf_hook_ops表征了一个表的一条链，因为它与一个表的一个hook类型唯一对应。其完整定义如下：\n```c\nstruct nf_hook_ops {\n    struct list_head list;\n\n    /* User fills in from here down. */\n    nf_hookfn *hook;\n\n    struct module *owner;\n\n    u_int8_t pf;\n\n    unsigned int hooknum;\n\n    /* Hooks are ordered in ascending priority. */\n    int priority;\n};\n```\n重要成员说明：\nhook：hook操作函数；\nowner：所属的表；\nhooknum：hook类型；\npriority：优先级，决定同一hook点，链（不同表在同一个hook点的链）的执行次序。\n\n**ipt_replace** \n结构主要用于iptables的规则下发，在setsockopt进行规则下发时以此结构体作为传输数据。\n```c\n/* The argument to IPT_SO_SET_REPLACE. */\nstruct ipt_replace {\n\t/* Which table. */\n\tchar name[XT_TABLE_MAXNAMELEN];\n\n\t/* Which hook entry points are valid: bitmask.  You can't\n           change this. */\n\tunsigned int valid_hooks;\n\n\t/* Number of entries */\n\tunsigned int num_entries;\n\n\t/* Total size of new entries */\n\tunsigned int size;\n\n\t/* Hook entry points. */\n\tunsigned int hook_entry[NF_INET_NUMHOOKS];\n\n\t/* Underflow points. */\n\tunsigned int underflow[NF_INET_NUMHOOKS];\n\n\t/* Information about old entries: */\n\t/* Number of counters (must be equal to current number of entries). */\n\tunsigned int num_counters;\n\t/* The old entries' counters. */\n\tstruct xt_counters *counters;\n  \n\t/* The entries (hang off end: not really an array). */\n\tstruct ipt_entry entries[0];\n};\n```\n重要成员说明：\nentries：对应的扩展matches和target的数据集合，其组成方式就是上面对应ip_entry的介绍。\n\n### Netfilter内部数据包处理\n在简介中已经提到了netfilter的hook机制和hook点，现在我们来了解下具体流程。\n首先，内核在收到ip包后，会进行一系列的操作，而hook的位置如下：\n![](Netfilter介绍及其实现原理/ip报文hook点.drawio.png)\n当我们对应的hook点有相应的注册函数时，就会进行相应的注册的hook函数调用：\n```c\n/*\n * \tDeliver IP Packets to the higher protocol layers.\n */\nint ip_local_deliver(struct sk_buff *skb)\n{\n\t/*\n\t *\tReassemble IP fragments.\n\t */\n\n\tif (ip_is_fragment(ip_hdr(skb))) {\n\t\tif (ip_defrag(skb, IP_DEFRAG_LOCAL_DELIVER))\n\t\t\treturn 0;\n\t}\n\n\treturn NF_HOOK(NFPROTO_IPV4, NF_INET_LOCAL_IN, NULL, skb,\n\t\t       skb->dev, NULL,\n\t\t       ip_local_deliver_finish);\n}\n```\n*ip_input.c*\n而实际的hook处理流程如下：\n![](Netfilter介绍及其实现原理/Netfilter内部数据包处理流程.drawio.png)\n这里主要的实现函数`nf_hook_slow`\n```c\nint nf_hook_slow(struct sk_buff *skb, struct nf_hook_state *state)\n{\n\tstruct nf_hook_ops *elem;\n\tunsigned int verdict;\n\tint ret = 0;\n\n\t/* We may already have this, but read-locks nest anyway */\n\trcu_read_lock();\n\n\telem = list_entry_rcu(&nf_hooks[state->pf][state->hook],\n\t\t\t      struct nf_hook_ops, list);\nnext_hook:\n\tverdict = nf_iterate(&nf_hooks[state->pf][state->hook], skb, state,\n\t\t\t     &elem);\n\tif (verdict == NF_ACCEPT || verdict == NF_STOP) {\n\t\tret = 1;\n\t} else if ((verdict & NF_VERDICT_MASK) == NF_DROP) {\n\t\tkfree_skb(skb);\n\t\tret = NF_DROP_GETERR(verdict);\n\t\tif (ret == 0)\n\t\t\tret = -EPERM;\n\t} else if ((verdict & NF_VERDICT_MASK) == NF_QUEUE) {\n\t\tint err = nf_queue(skb, elem, state,\n\t\t\t\t   verdict >> NF_VERDICT_QBITS);\n\t\tif (err < 0) {\n\t\t\tif (err == -ECANCELED)\n\t\t\t\tgoto next_hook;\n\t\t\tif (err == -ESRCH &&\n\t\t\t   (verdict & NF_VERDICT_FLAG_QUEUE_BYPASS))\n\t\t\t\tgoto next_hook;\n\t\t\tkfree_skb(skb);\n\t\t}\n\t}\n\trcu_read_unlock();\n\treturn ret;\n}\n```\n这里的`nf_hooks[state->pf][state->hook]`中，`state->pf`是对应的协议，比如`NFPROTO_IPV4`, `state->hook`表示hook的点，比如`NF_INET_LOCAL_IN`。而nf_hooks是一个全局变量，包含了所有的注册hook。\n在进入到`ipt_do_table`函数后，会进行包的匹配和处理，流程如下：\n![](Netfilter介绍及其实现原理/netfilter包过滤.drawio.png)\n`ipt_do_table`会先匹配基本match，再匹配扩展match，匹配成功后，进行基础target或扩展target的处理。如果匹配不成功，则会一直匹配直到所有matches匹配完。这也导致了iptables规则在命中一条规则后，后续的规则都不会再进行匹配了(除非你target指向其他链)。\n内部数据包处理大概如上所说，但是我们仍然抱有疑惑，hook函数哪里来？扩展match怎么生效等。这就要归功于netfilter的注册机制。\n### Netfilter模块注册\n模块注册的时机是在模块加载的时候，而模块加载分系统启动时加载，即系统启动时加载netfilter以及编译到内核的模块。\n而没有编译到内核，而是以独立模块存在的netfilter模块，则会在规则下发的时候，会根据你传入的match或target名称到对应的路径下寻找，并载入模块。\nnetfilter在设计的时候，就设计了强大的模块加载机制，因此也表现出强大的扩展性。\n![](Netfilter介绍及其实现原理/Netfilter扩展机制示意图.png)\n本质上，模块加载结构都是相似的。我们就以`iptable_filter.c`为例，讲解一下hook的注册过程。\n![](Netfilter介绍及其实现原理/netfilter模块注册过程.drawio.png)\n对应的部分`iptable_filter.c`代码：\n```c\nstatic const struct xt_table packet_filter = {\n\t.name\t\t= \"filter\",\n\t.valid_hooks\t= FILTER_VALID_HOOKS,\n\t.me\t\t= THIS_MODULE,\n\t.af\t\t= NFPROTO_IPV4,\n\t.priority\t= NF_IP_PRI_FILTER,\n};\n\nstatic unsigned int\niptable_filter_hook(const struct nf_hook_ops *ops, struct sk_buff *skb,\n\t\t    const struct net_device *in, const struct net_device *out,\n\t\t    const struct nf_hook_state *state)\n{\n\tconst struct net *net;\n\n\tif (ops->hooknum == NF_INET_LOCAL_OUT &&\n\t    (skb->len < sizeof(struct iphdr) ||\n\t     ip_hdrlen(skb) < sizeof(struct iphdr)))\n\t\t/* root is playing with raw sockets. */\n\t\treturn NF_ACCEPT;\n\n\tnet = dev_net(state->in ? state->in : state->out);\n\treturn ipt_do_table(skb, ops->hooknum, state, net->ipv4.iptable_filter);\n}\n\n....\n\nstatic int __init iptable_filter_init(void)\n{\n\tint ret;\n\n\tret = register_pernet_subsys(&iptable_filter_net_ops);\n\tif (ret < 0)\n\t\treturn ret;\n\n\t/* Register hooks */\n\tfilter_ops = xt_hook_link(&packet_filter, iptable_filter_hook);\n\tif (IS_ERR(filter_ops)) {\n\t\tret = PTR_ERR(filter_ops);\n\t\tunregister_pernet_subsys(&iptable_filter_net_ops);\n\t}\n\n\treturn ret;\n}\n\nstatic void __exit iptable_filter_fini(void)\n{\n\txt_hook_unlink(&packet_filter, filter_ops);\n\tunregister_pernet_subsys(&iptable_filter_net_ops);\n}\n\nmodule_init(iptable_filter_init);\nmodule_exit(iptable_filter_fini);\n```\nnetfilter注册的逻辑依赖内核模块注册。内核模块加载的时候，会自动调用module_init，在iptable_filter中，调用`iptable_filter_init`，执行`xt_hook_link`函数，将`packet_filter`全局量挂载到`nf_hooks`全局量。实际包过滤的时候，就会根据`nf_hooks`来调用注册的hook。\n以上就是hook的注册过程，实际在看源码中，match和target等注册过程也是类似的，通过module_init将模块文件的变量注册到全局量中。\n### iptables规则下发\n内核空间与用户空间的数据交互通过getsockopt和setsockopt来完成，这个两个函数用来控制相关socket文件描述符的的选项值。先来看这两个函数的原型：\nset/getsockopt(2)函数的基本使用格式为：\n```\nint setsockopt(int sockfd, int proto, int cmd, void *data, int datalen)\nint getsockopt(int sockfd, int proto, int cmd, void *data, int datalen)\n```\n在调用`setsockopt`函数时，实际执行的流程如下：\n![](Netfilter介绍及其实现原理/规则提交函数调用示意图.png)\n上图中，从setsockopt()到ip_setsockopt()是常规的setsockopt调用流程；在新的流程中，Netfilter加入的自己的处理函数nf_setsockopt()。\n![](Netfilter介绍及其实现原理/setsockopt流程图.drawio.png)\n上图中，核心函数`do_replace`，进行的数据拷贝传输，源码如下：\n```c\nstatic int\ndo_replace(struct net *net, const void __user *user, unsigned int len)\n{\n\tint ret;\n\tstruct ipt_replace tmp;\n\tstruct xt_table_info *newinfo;\n\tvoid *loc_cpu_entry;\n\tstruct ipt_entry *iter;\n\n\tif (copy_from_user(&tmp, user, sizeof(tmp)) != 0)\n\t\treturn -EFAULT;\n\n\t/* overflow check */\n\tif (tmp.num_counters >= INT_MAX / sizeof(struct xt_counters))\n\t\treturn -ENOMEM;\n\tif (tmp.num_counters == 0)\n\t\treturn -EINVAL;\n\n\ttmp.name[sizeof(tmp.name)-1] = 0;\n\n\tnewinfo = xt_alloc_table_info(tmp.size);\n\tif (!newinfo)\n\t\treturn -ENOMEM;\n\n\tloc_cpu_entry = newinfo->entries;\n\tif (copy_from_user(loc_cpu_entry, user + sizeof(tmp),\n\t\t\t   tmp.size) != 0) {\n\t\tret = -EFAULT;\n\t\tgoto free_newinfo;\n\t}\n\n\tret = translate_table(net, newinfo, loc_cpu_entry, &tmp);\n\tif (ret != 0)\n\t\tgoto free_newinfo;\n\n\tduprintf(\"Translated table\\n\");\n\n\tret = __do_replace(net, tmp.name, tmp.valid_hooks, newinfo,\n\t\t\t   tmp.num_counters, tmp.counters);\n\tif (ret)\n\t\tgoto free_newinfo_untrans;\n\treturn 0;\n\n free_newinfo_untrans:\n\txt_entry_foreach(iter, loc_cpu_entry, newinfo->size)\n\t\tcleanup_entry(iter, net);\n free_newinfo:\n\txt_free_table_info(newinfo);\n\treturn ret;\n}\n```\n从源码可以看到，iptables和内核间的通信，就是通过调用`copy_from_user`函数进行数据拷贝来完成的。而拷贝的核心数据结构，就是上面介绍过的`ipt_replace`结构。\n至此，Netfilter源码实现的主要流程就介绍完了，更多的细节可自行阅读源码。\n## 自定义match\n主要是为了练习，功能就是命中后打印输出一下。\n要实现一个iptables的自定义功能，那么，我应该产生三个文件libipt_xx.c、ipt_xx.c和ipt_xx.h(ipt更换为xt一样有效)，并放到对应目录中：\n```\nipt_xx.c   -> /<linux-kernel-src>/net/ipv4/netfilter/\nipt_xx.h   -> /<linux-kernel-src>/include/uapi/linux/netfilter_ipv4\nlibipt_xx.c   -> /usr/local/src/iptables-x.x.x/extensions/\n```\n然后再分别编译内核部分ipt_xx.c和ipt_xx.h源码及用户部分libipt_xx.c源码。\n### 环境准备\n**内核源码下载**\n通用的linux内核源码的[下载](https://www.kernel.org/)\ncentos/redhat的内核在上面找不到对应的，他们是自己维护的版本，下载方法如下：\n```\n# 先复制及设定 centos-common 源码\n[user@host ~]$ git clone  https://git.centos.org/centos-git-common.git\n[user@host ~]$ git clone https://git.centos.org/rpms/kernel.git ; cd kernel\n# 让我们存取 cenots7 内核\n[user@host kernel]$ git checkout c7 \n# get_sources会根据你的电脑内核版本，匹配对应的源码。\n[user@host kernel]$ ~/centos-git-common/get_sources.sh\n```\n如果你对特定分支感兴趣，也可以下载特定分支：\n```\ngit clone -b c7 --single-branch https://git.centos.org/rpms/kernel.git\n```\n这里的内核源码也包含了Netfilter的内核源码。\n\n**iptables源码：**\n*本文使用的是iptables v1.14.21版本，对应的源码也是这个版本* [下载](https://www.netfilter.org/projects/iptables/downloads.html)\n\n### 自定义match源码\n内核部分：xt_test.c\n```c\n#define pr_fmt(fmt) KBUILD_MODNAME \": \" fmt\n#include <linux/module.h>\n#include <linux/types.h>\n#include <linux/udp.h>\n#include <linux/skbuff.h>\n#include <linux/in.h>\n#include <linux/kernel.h>  \n\n#include <linux/netfilter/xt_test.h>\n#include <linux/netfilter/x_tables.h>\n#include <linux/netfilter_ipv4/ip_tables.h>\n#include <linux/netfilter_ipv6/ip6_tables.h>\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Netfilter Core Team <coreteam@netfilter.org>\");\nMODULE_DESCRIPTION(\"Xtables: multiple port matching for TCP, UDP, UDP-Lite, SCTP and DCCP\");\nMODULE_ALIAS(\"ipt_test\");\nMODULE_ALIAS(\"ip6t_test\");\n\nstatic bool\ntest_mt(const struct sk_buff *skb, struct xt_action_param *par)\n{\n\tconst struct xt_test *testinfo = par->matchinfo;\n\tconst struct iphdr *ip;\n\tip = ip_hdr(skb);\n\tif (testinfo->s_addr == ip->saddr){\n\t\tprintk(\"match ip [%s]\",ip->saddr);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nstatic inline bool\ncheck(u_int16_t proto)\n{\n\treturn proto == IPPROTO_TCP;\n}\n\nchar *\ninet_ntoa(struct in_addr ina)\n{\n\tstatic char buf[sizeof \"aaa.bbb.ccc.ddd\"];\n\tunsigned char *ucp = (unsigned char *)&ina;\n\n\tsprintf(buf, \"%d.%d.%d.%d\",\n\t\tucp[0] & 0xff,\n\t\tucp[1] & 0xff,\n\t\tucp[2] & 0xff,\n\t\tucp[3] & 0xff);\n    return buf;\n}\n\nstatic int test_mt_check(const struct xt_mtchk_param *par)\n{\n\tconst struct ipt_ip *ip = par->entryinfo;\n\tprintk(\"input ip:%s\", inet_ntoa(ip->src));\n\treturn 0;\n}\n\nstatic struct xt_match test_mt_reg __read_mostly = {\n\t.name\t\t= \"test\",\n\t.family\t\t= NFPROTO_IPV4,\n\t.revision\t= 1,\n\t.checkentry\t= test_mt_check,\n\t.match\t\t= test_mt,\n\t.matchsize\t= sizeof(struct xt_test),\n\t.me\t\t= THIS_MODULE,\n};\n\nstatic int __init test_mt_init(void)\n{\n\tprintk(\"test module init sucess\");\n\treturn xt_register_match(&test_mt_reg);\n}\n\nstatic void __exit test_mt_exit(void)\n{\n\txt_unregister_match(&test_mt_reg);\n}\n\nmodule_init(test_mt_init);\nmodule_exit(test_mt_exit);\n```\n用户部分：libxt_test.c\n```c\n#include <stdio.h>\n#include <netdb.h>\n#include <string.h>\n#include <stdlib.h>\n#include <xtables.h>\n#include <limits.h> /* INT_MAX in ip_tables.h/ip6_tables.h */\n#include <linux/netfilter_ipv4/ip_tables.h>\n#include <linux/netfilter_ipv6/ip6_tables.h>\n#include <linux/netfilter/xt_test.h>\n#include <sys/socket.h>\n\nenum {\n\tO_SOURCE_PORTS = 0,\n\tO_DEST_PORTS,\n\tO_SD_PORTS,\n\tF_SOURCE_PORTS = 1 << O_SOURCE_PORTS,\n\tF_DEST_PORTS   = 1 << O_DEST_PORTS,\n\tF_SD_PORTS     = 1 << O_SD_PORTS,\n\tF_ANY          = F_SOURCE_PORTS | F_DEST_PORTS | F_SD_PORTS,\n};\n\n/* Function which prints out usage message. */\nstatic void test_help(void)\n{\n\tprintf(\n\"test match options:\\n\"\n\" --source-ip [ip]\\n\"\n\" NOTE: just for test.\\n\");\n}\n\nstatic const struct xt_option_entry test_opts[] = {\n\t{.name = \"source-ip\", .id = O_SOURCE_PORTS, .type = XTTYPE_STRING,\n\t .excl = F_ANY, .flags = XTOPT_INVERT},\n\tXTOPT_TABLEEND,\n};\n\nstatic const char *\nproto_to_name(uint8_t proto)\n{\n\tswitch (proto) {\n\tcase IPPROTO_TCP:\n\t\treturn \"tcp\";\n\tdefault:\n\t\treturn NULL;\n\t}\n}\n\nstatic unsigned int\nparse_srource_ip(const char *portstring)\n{\n\tchar *buffer;\n\tstruct in_addr addr;\n\n\tbuffer = strdup(portstring);\n\tif (!buffer) xtables_error(OTHER_PROBLEM, \"strdup failed\");\n\n\tif(!inet_aton(buffer, &addr)) xtables_error(OTHER_PROBLEM, \"ip not vaild\");\n\tfree(buffer);\n\treturn (unsigned int)addr.s_addr;\n}\n\nstatic const char *\ncheck_proto(uint16_t pnum, uint8_t invflags)\n{\n\tconst char *proto;\n\n\tif (invflags & XT_INV_PROTO)\n\t\txtables_error(PARAMETER_PROBLEM,\n\t\t\t   \"test only works with TCP, UDP, UDPLITE, SCTP and DCCP\");\n\n\tif ((proto = proto_to_name(pnum)) != NULL)\n\t\treturn proto;\n\telse if (!pnum)\n\t\txtables_error(PARAMETER_PROBLEM,\n\t\t\t   \"test needs `-p tcp', `-p udp', `-p udplite', \"\n\t\t\t   \"`-p sctp' or `-p dccp'\");\n\telse\n\t\txtables_error(PARAMETER_PROBLEM,\n\t\t\t   \"test only works with TCP, UDP, UDPLITE, SCTP and DCCP\");\n}\n\nstatic void __test_parse(struct xt_option_call *cb, uint16_t pnum,\n\t\t\t      uint8_t invflags)\n{\n\tconst char *proto;\n\tstruct xt_test *multiinfo = cb->data;\n\n\txtables_option_parse(cb);\n\tswitch (cb->entry->id) {\n\tcase O_SOURCE_PORTS:\n\t\t//proto = check_proto(pnum, invflags);\n\t\tmultiinfo->s_addr = (__be32)parse_srource_ip(cb->arg);\n\t\tbreak;\n\t}\n\tif (cb->invert)\n\t\txtables_error(PARAMETER_PROBLEM,\n\t\t\t   \"test.0 does not support invert\");\n}\n\nstatic void test_parse(struct xt_option_call *cb)\n{\n\tconst struct ipt_entry *entry = cb->xt_entry;\n\treturn __test_parse(cb,\n\t       entry->ip.proto, entry->ip.invflags);\n}\n\nstatic void test_check(struct xt_fcheck_call *cb)\n{\n\tif (cb->xflags == 0)\n\t\txtables_error(PARAMETER_PROBLEM, \"test expection an option\");\n}\n\nstatic void\n__test_print(const struct xt_entry_match *match, int numeric,\n                  uint16_t proto)\n{\n\tconst struct xt_test *multiinfo\n\t\t= (const struct xt_test *)match->data;\n\tstruct in_addr addr;\n\taddr.s_addr = (in_addr_t)multiinfo->s_addr;\n\n\tprintf(\" test \");\n\n\tprintf(\"%s\",inet_ntoa(addr));\n}\n\nstatic void test_print(const void *ip_void,\n                            const struct xt_entry_match *match, int numeric)\n{\n\tconst struct ipt_ip *ip = ip_void;\n\t__test_print(match, numeric, ip->proto);\n}\n\nstatic void __test_save(const struct xt_entry_match *match,\n                             uint16_t proto)\n{\n\tconst struct xt_test *multiinfo\n\t\t= (const struct xt_test *)match->data;\n\tstruct in_addr addr;\n\taddr.s_addr = (in_addr_t)multiinfo->s_addr;\n\n\tprintf(\" test \");\n\n\tprintf(\"%s\",inet_ntoa(addr));\n}\n\nstatic void test_save(const void *ip_void,\n                           const struct xt_entry_match *match)\n{\n\tconst struct ipt_ip *ip = ip_void;\n\t__test_save(match, ip->proto);\n}\n\nstatic struct xtables_match test_mt_reg = {\n\t.family        = NFPROTO_IPV4,\n\t.name          = \"test\",\n\t.revision      = 1,\n\t.version       = XTABLES_VERSION,\n\t.size          = XT_ALIGN(sizeof(struct xt_test)),\n\t.userspacesize = XT_ALIGN(sizeof(struct xt_test)),\n\t.help          = test_help,\n\t.x6_parse      = test_parse,\n\t.x6_fcheck     = test_check,\n\t.print         = test_print,\n\t.save          = test_save,\n\t.x6_options    = test_opts,\n};\n\nvoid\n_init(void)\n{\n\txtables_register_match(&test_mt_reg);\n}\n```\n头文件：xt_test.h\n```c\n/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */\n#ifndef _XT_TEST_H\n#define _XT_TEST_H\n\n#include <linux/types.h>\n\n/* Must fit inside union xt_matchinfo: 16 bytes */\nstruct xt_test {\n\t__be32\ts_addr;\t\t\t\t/* Type of comparison */\n};\n\n#endif /*_XT_MULTIPORT_H*/\n```\n### 编译\n首先把对应的文件放到对应的位置：\n```\nxt_test.c   -> /<linux-kernel-src>/net/ipv4/netfilter/\nxt_test.h   -> /<linux-kernel-src>/include/uapi/linux/netfilter_ipv4\nlibxt_test.c   -> /<iptables-x.x.x>/extensions/\n```\n用户态源码编译：\n```shell\n./autogen.sh\n./configure --prefix=/usr/local/iptables\nmake\nmake install\n```\n内核源码编译：\n```\ncd <your_kernel_src_path>/net/netfilter\n#修改Makefile，新增：obj-$(CONFIG_NETFILTER_XT_MATCH_TEST) += xt_test.o\nmake CONFIG_NETFILTER_XT_MATCH_TEST=m -C <your_kernel_src_path>  M=`pwd` modules\n```\n如果出现`No rule to make target 'tools/objtool/objtool'`的错误：\n1. `yum install kernel-headers kernel-devel -y`\n2. 找到`/usr/src/kernels/`下安装的tools/objtool/objtool/objtool，将可执行文件拷贝到你的内核源码对应目录。\n3. 重新执行make\n\n### 测试\n1. 先把编译得到的`xt_test.ko`放到`/usr/lib/modules/3.10.0.xxxx/kernel/net/netfilter/`目录下。\n2. 添加iptables规则：\n   ```\n   /usr/local/iptables/sbin/iptables -A INPUT -p tcp -m test --source-ip <ip> -j DROP\n   ```\n3. 使用你配置了的`<ip>`地址的机器来访问目标机器(tcp)\n4. `dmesg`命令来查看打印输出的消息。\n\n如果出现`Couldn't load match 'test11':No such file or directory`证明你用户态代码，没有找到你编译的模块。\n如果出现`iptables:No chain/target/match by the name`证明你内核相应的模块没有嵌入。\n如果`dmesg`没有显示出你想要的信息，可能是输出日志级别不够，尝试：`dmesg -n 7`；或者是存在缓存，尝试删除原有iptables规则，重新配置，之前的日志消息就打印了。\n\n\n## 链接跟踪(conntrack)\n功能就是给链接做标识。这一章节主要都是参考(也就是抄[狗头])Netfilter[链接跟踪简介](http://blog.chinaunix.net/uid-26517122-id-4281274.html)(想看更详细内容最好看原文，我这里只是简单截取了主要核心部分，就不重复copy了)，他其他的netfilter相关的解析也写的挺好，建议去看看。\n#### conntrack介绍\n 我们期望一种场景，即外网无法访问内网，但是内网能够访问外网。但配置了拒绝所有外网来的数据包以后，内网访问外网返回的包也无法进入内网，导致内网访问外网失败。因此我们可以利用conntrack(链接跟踪)来解决这一问题。\n通用的数据访问方式分两种：\n1. TCP这种面向连接的协议，源和目的的连接终止时，状态防火墙通过检查TCP头的控制标记来跟踪整个过程，并动态地将该连接从状态表中删除。\n2. DP和ICMP不是面向连接的协议，无法通过报文来判断连接是否终止。状态防火墙会把将UDP流量看成是有连接的，通过在状态表中设置一个定时器，来定期的老化删除一些无用连接。\n\n期望连接：\n有一些协议，连接时会分为控制连接和数据连接，我们把数据连接称为是控制连接的期望连接。\n我们以tftp协议为例来说明一下期望连接：\n![](Netfilter介绍及其实现原理/期望链接.jpg)\n如果，客户端先发起连接，使用熟知的69端口。因为69端口是分给了tftp server的，tftp server接收到连接请求后，会自己申请一个server主机上未用的端口1235（因为tftp server的69端口还需要接收其他client发来的连接请求，所有不能使用69来传输数据），给tftp client发送回应。以后client和server就使用端口1235来进行通信了。\n现在来看，上面连接是两条不同的连接。我们把第二条连接是其一条连接的期望连接。\n比如防火墙上只放开了目的端口号69的访问，当内网访问外网的tftp server时，回应报文就会被拦截，导致tftp 功能失效。状态防火墙提出期望连接，当回应报文根据目的端口号发现该回应是已存在连接的期望连接，防火墙放过该回应报文，这样tftp功能OK。\n做个实验：\n在一台主机上配置如下规则：\n```\niptables  -P  INPUT DROP   //丢弃所有到本机的报文\niptables -A INPUT -p udp --dport 69 -j ACCEPT //放行目的端口69的报文\n```\n这时把该主机当tftp client，从tftp server下载东西是无法下载的。\n```\niptables -A INPUT -m conntrack --ctstatus EXPECTED -j ACCEPT//放行期望连接\n```\n这时tftp功能OK。\n\n因此，为了满足上述需求，链接跟踪实现了以下功能：\n1. 建立一张连接状态表，来存放连接记录\n2. 连接状态表中，有定时的垃圾回收机制\n3. 根据报文进行连接状态的建立及对已有连接状态的更新\n4. 期望连接的建立和关联\n5. 在连接跟踪上需要提供易于扩展的接口，来实现用户自定义的一些功能。\n下面本文将从两个方向来描述链接跟踪，一是从模块扩展上，模块如何注册到conntrack中，提供报文的处理方法；第二是数据流上，报文时如何一步步的在netfilter框架中流动，被conntrack处理的。\n\n### conntrack标识\n连接跟踪是根据报文的L3，L4层头信息来标识一条连接的，而这些标识需要一个数据结构来进行定义和存储。改数据结构包含了一条连接的全部信息，并且链接跟踪的查找，建立，关联和更新都是依据该数据结构，我们称该数据结构为元组。\n**元组数据结构：**\n```c\nstruct nf_conntrack_tuple\n{\n     struct nf_conntrack_man src;  //源端信息\n\n   //目的端信息。\n    /* These are the parts of the tuple which are fixed. */\n    struct {\n        union nf_inet_addr u3;  //目的IP地址\n　　  //目的端口的信息，不同协议使用不同的报文字段\n        union {\n             /* Add other protocols here. */\n            __be16 all;\n            struct {\n                __be16 port;//TCP报文就使用目的端口\n            } tcp;\n            struct {\n                 __be16 port;//UDP报文就使用目的端口\n            } udp;\n            struct {\n                u_int8_t type, code;//ICMPP报文使用type，cod两个字段\n            } icmp;\n            ... //其他协议此处省略\n        } u;\n        //传输层协议类型，既L4协议类型\n        u_int8_t protonum;\n        //标识连接的方向，一条连接分两个方向，一来一回\n        /* The direction (for tuplehash) */\n        u_int8_t dir;\n    } dst;\n};\n\n\nstruct nf_conntrack_man\n{\n     union nf_inet_addr u3; //IP地址\n    //L4协议源端信息\n    union nf_conntrack_man_proto u;\n    //L3协议类型\n    u_int16_t l3num;\n};\n\n\n//L4层源端的信息。\nunion nf_conntrack_man_proto\n{\n    /* Add other protocols here. */\n    __be16 all;\n    struct {\n        __be16 port;\n    } tcp;\n    struct {\n        __be16 port;\n    } udp;\n    struct {\n        __be16 id;\n    } icmp;\n    .... //其他协议此处省略\n};\n```\n从上面数据结构定义看，标识一条连接的元组为：\nTCP  源IP，源端口，L3协议类型，目的IP，目的端口号，L4协议类型\nUDP  源IP，源端口，L3协议类型，目的IP，目的端口号，L4协议类型\nICMP 源IP，L3协议类型，目的IP，id，type，code,，L4协议类型\n\n**conntrack数据结构：**\n一个连接包含正反两个方向的两条报文流.\n```c\nstruct nf_conn {\n    //对连接的引用计数\n    struct nf_conntrack ct_general;\n    spinlock_t lock;\n\n    //正向和反向的连接元组信息。\n    struct nf_conntrack_tuple_hash tuplehash[IP_CT_DIR_MAX];\n\n    //该连接的连接状态\n    unsigned long status;\n\n    //如果该连接是期望连接，指向跟其关联的主连接\n    struct nf_conn *master;\n\n    //连接垃圾回收定时器\n    struct timer_list timeout;\n\n    /*存储特定协议的连接跟踪信息*/\n    union nf_conntrack_proto proto;\n\n    /*指向扩展结构，该结构中包含一些基于连接的功能扩展处理函数 */\n    struct nf_ct_ext *ext;\n   //网络命名空间\n    struct net *ct_net;\n};\n\nstruct nf_conntrack_tuple_hash {\n    struct hlist_nulls_node hnnode;\n    struct nf_conntrack_tuple tuple;\n};\n```\n每个struct nf_conn实例代表一个连接。每个skb都有一个指针，指向和它相关联的连接。\n```c\nstruct sk_buff {\n\tstruct nf_conntrack *nfct;//指向struct nf_conn实例\n\n\tkmemcheck_bitfield_begin(flags1);\n\t__u8 local_df:1,\n\tcloned:1,\n\tip_summed:2,\n\tnohdr:1,\n\tnfctinfo:3; //记录报文的连接状态。\n\tkmemcheck_bitfield_end(flags1);\n};\n```\n\n**conntrack的存储:**\n*/include/net/netns/conntrack.h*\n每个网络命名空间有如下一个数据结构的实例，来管理和存放生成的连接的一些信息。\n```c\nstruct netns_ct \n{\n    atomic_t count;\n    unsigned int expect_count;\n    unsigned int htable_size; \n    struct kmem_cache *nf_conntrack_cachep;\n    struct hlist_nulls_head *hash;//存放已经经过确认的连接hash表\n    struct hlist_head *expect_hash;//期望连接hash表\n    struct hlist_nulls_head unconfirmed; //存放没经过确认的连接hash表\n    struct hlist_nulls_head dying;\n    struct ip_conntrack_stat *stat;\n\n    int hash_vmalloc;\n    int expect_vmalloc;\n    char *slabname;\n};\n```\n整体conntrack相关的数据结构如下：\n![](Netfilter介绍及其实现原理/conntrack的存储.jpg)\n\n### conntrack的建立过程\n我们先来看一下iptables定义的连接状态：\n**INVALID** :无效连接，防火墙一般会丢弃该连接\n**NEW**：新建立的，既只是通信双方中只一方发送了报文，还没有得到回应的\n**ESTABLISHED**：已经得到回应的连接。既通信双方都发送过报文的连接\n**RELATED**:关联的连接，既有期望连接关联的连接\n**UNTRACKED**：不进行连接跟踪的连接\n**SNAT**:配置了SNAT的连接\n**DNAT**:配置了DNAT的连接\n\n#### 一般连接建立过程：\n这里我们拿一个udp通信的例子来走一遍连接建立的过程。先不具体到代码的实现。\n\n1、首先，PC和SERVER使用udp报文进行通信。\n![](Netfilter介绍及其实现原理/conntrack一般连接建立1.jpg)\n**PC--------->SERVER**\n\n报文的元组信息如下：\n```\nSip：1.1.1.6\nSport:1116\nDip:1.1.1.5\nDport:1115\nl4protonum:udp\nL3num:INET\n```\n报文到达防火墙，防火墙的处理如下：\n**防火墙入口处:**\n1. conntrack模块截获报文。\n2. 根据报文的元组信息在防火墙内的连接表中查找是否已经存在建立的连接，因为第一次通信，没有已建立的连接。\n\n建立一个新的连接，连接的正反向元组信息如下图，并把该连接的正向连接A挂到unconfirmed链表上\n![](Netfilter介绍及其实现原理/conntrack一般连接建立2.jpg)\n如上，新建连接后，把该连接和报文进行关联，连接状态是NEW。\n\n**防火墙出口处：**\n拦截报文后，根据报文携带的连接信息，找到连接，把该连接的正向连接A从unconfirmed链表上摘下来，把该连接的正反向连接A和B加入到连接hash表中。并把该连接确认状态置为confirmed状态，即置位status的IPS_CONFIRMED_BIT位。\n![](Netfilter介绍及其实现原理/conntrack一般连接建立3.jpg)\n\n**SERVER----->PC**\nSERVER回应PC的报文元组信息如下：\n```\nSip：1.1.1.5\nSport:1115\nDip:1.1.1.6\nDport:1116\nl4protonum:udp\nL3num:INET\n```\n\n报文到达防火墙，防火墙的处理如下：\n**防火墙入口处:**\n1. conntrack模块截获报文。\n2. 根据报文的元组信息在防火墙内的连接表中查找是否已经存在建立的连接，可以找到已建立的连接B。\n3. 发现连接B里的dir是reply，表明该连接已经有回应报文了，给连接中的status置位IPS_SEEN_REPLY_BIT，表明该连接已经收到了回应报文。这时把报文的连接状态变为ESTABLISHED\n\n**防火墙出口处：**\n1. 拦截报文后，根据报文携带的连接信息，找到连接，发现该连接确认状态是confirmed的，直接不进行连接处理。\n\n至此，连接建立完成。\n\n后续该连接的正反方向的报文都可以在连接表中查到相应的连接，就可以根据连接进行相应的处理了。\n\n#### 期望连接的建立过程：\n这里就不介绍了，详情可看[原文](http://blog.chinaunix.net/uid-26517122-id-4281305.html)\n\n**奉上原文后续章节：**\n[Netfilter中conntrack 功能扩展机制](http://blog.chinaunix.net/uid-26517122-id-4292718.html)\n[Netfilter中conntrack helper扩展实现](http://blog.chinaunix.net/uid-26517122-id-4292730.html)\n[Netfilter中L3和L4层提供的conntrack处理方法](http://blog.chinaunix.net/uid-26517122-id-4292946.html)\n[Netfilter中conntrack的HOOK点](http://blog.chinaunix.net/uid-26517122-id-4293010.html)\n[Nefilter中IP conntrack核心函数详解](http://blog.chinaunix.net/uid-26517122-id-4293135.html)\n\n\n## 参考\n[Netfilter](https://zh.wikipedia.org/wiki/Netfilter)\n[netfilter/iptables 简介](https://www.ibm.com/developerworks/cn/linux/network/s-netip/index.html)\n[Netfilter 框架及其周边组件](https://www.xiayinchang.top/post/d617cc74.html)\n[netfilter框架研究](https://opengers.github.io/openstack/openstack-base-netfilter-framework-overview/#connection-tracking)\n[使用iptables控制网络流量](https://cloud.tencent.com/developer/article/1199506)\n[深入理解Iptables和Netfilter架构](https://xiaoz.co/2020/01/10/a-deep-dive-into-iptables-and-netfilter-architecture/)\n[深入理解Iptables和Netfilter架构](http://arthurchiao.art/blog/deep-dive-into-iptables-and-netfilter-arch-zh/)\n[iptables和netfilter的通信流程](https://blog.csdn.net/haolipengzhanshen/article/details/85007427)\n[netfilter内核源码分析](https://blog.csdn.net/venoy4806/article/details/5136626)\n[Netfilter内核源码分析](https://blog.csdn.net/venoy4806/article/details/5136626)\n[Netfilter全面讲解](http://chinaunix.net/uid-29547110-id-5038602.html)\n[conntrack详解](http://blog.chinaunix.net/uid-26517122-id-4292718.html)","source":"_posts/Netfilter介绍及其实现原理.md","raw":"---\ntitle: Netfilter介绍及其实现原理\ndate: 2020-09-14 11:29:27\ncategories: 技术杂谈\ntags: [NETFILTER]\n---\n\n\n工作需要，了解了一下Net filter的工作原理。(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n\n*源码的版本：linux-3.10.0-1127.18.2.el7 (centos)*\n\n<!-- more -->\n\n\n[简介](https://www.ibm.com/developerworks/cn/linux/network/s-netip/index.html)\n\n*包含netfilter的基本介绍，iptables规则介绍及使用，netfilter实现原理，自定义match实现，链接跟踪实现、ipset和iptables联动和ipset实现*\n\n## 简介\n**Netfilter**，在Linux内核中的一个软件框架，用于管理网络数据包。不仅具有网络地址转换（NAT）的功能，也具备数据包内容修改、以及数据包过滤等防火墙功能。利用运作于用户空间的应用软件，如`iptables`、`ebtables`和`arptables`等，来控制Netfilter，系统管理者可以管理通过Linux操作系统的各种网络数据包。\n**iptables：**\nNetfilter中最为常用的一种网络数据包过滤方式——IP包过滤，我们也将重点介绍这种过滤方式。用户在使用`iptables`时需要超级用户权限，以及内核模块需要`Xtables`模块做支撑。iptables只能处理ipv4，对应的ipv6则使ip6tables来处理。\n**ebtables**\nebtables 是以太网桥防火墙，以太网桥工作在数据链路层，ebtables 主要用来过滤数据链路层数据包。使用 ebtables 可以实现 filtering 、NAT 和 brouting。过滤根据 MAC 头包括 VLAN ID 等信息确定是否丢弃该帧。MAC NAT 可以修改 MAC 源和目的地址。Brouting 意为 bridge or route，根据规则确定应该将数据帧路由给上层（iptables）还是通过网桥转给其它的接口。\nebtables 和我们熟悉的 iptables 很像，也有规则（rules）、链（chains）和表（tables）的概念。ebtables 使用规则确定应当对数据帧执行什么动作。规则按照不同的链分组，不同的表中包含不同的链。在 ebtables 中有三张表：filter、nat 和 broute，分别对应其三大功能模块。\n需要注意的是如果一个以太网接口 eth1，它并没有桥接到网桥上，此时，从 eth1 进来的数据包不会走到 ebtables 中。在 bridge check 点，会检查数据包进入的接口是否属于某个桥，如果是则走 ebtables，否则直接走 iptables。也就是说，ebtables 只对桥接网络生效。\n**arptables**\narptables 是运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理地址解析协议(arp)数据包的过滤和转发。\narptables基于iptables开发，使用时也与iptables有些类似，都有“表（tables）”、“链（chain）”和“规则（rules）”三个层面。\n但是arptables功能较单一，仅有filter一个表。并且，也只有INPUT（从内核2.4版）、OUTPUT（从内核2.4版）和FORWARD（从内核2.6版）三个内建链。arptables的主要用途之一是防范ARP欺骗。\n### 基础结构\n**Netfilter** 包含了一组内核钩子 API ，周边内核组件可以使用这些钩子在网络栈中注册回调函数。每一个在网络栈中流通的包到达相应的钩子时，就会触发相应的回调函数，从而能够完成包过滤、网络地址（端口）转换和网络包协议头修改等各种操作。\nNetfilter 提供了五种钩子：\n![Netfilter hook](Netfilter介绍及其实现原理/Netfilter%20hooks.png)\n1. `NF_IP_PER_ROUNTING` — 当数据包到达计算机立即触发。\n2. `NF_IP_LOCAL_IN` — 当数据包的目的地就是当前计算机时触发。\n3. `NF_IP_FORWARD` — 当数据包目的地址是其它的网络接口时触发。\n4. `NF_IP_POST_ROUTING` — 当数据包即将从计算机发出时触发。\n5. `NF_IP_LOCAL_OUT` — 当数据包由本地生成并发向外部时触发。\n\n基于 Netfilter 钩子 API 实现的内核模块主要有 ebtables、arptables、ip(6)tables、nf_tables、NAT、connection tracking 等。如下架构图：\n![Netfilter](Netfilter介绍及其实现原理/Netfilter架构.png)\n\n而数据包在整个Netfilter中的数据流如下图：\n![网络数据包流](Netfilter介绍及其实现原理/1920px-Netfilter-packet-flow.png)\n\n\n### 建立规则和链\n通过向防火墙提供有关对来自某个源、到某个目的地或具有特定协议类型的信息包要做些什么的指令，规则控制信息包的过滤。 通过使用 netfilter/iptables 系统提供的特殊命令 iptables ，建立这些规则，并将其添加到内核空间的特定信息包过滤表内的链中。关于添加／除去／编辑规则的命令的一般语法如下：\n```\niptables [-t table] command [match] [target]\n```\n#### 用法\n|选项| 描述 | \n|---|---|\n|-A --append|将一个或多个规则添加到所选链的末尾。|\n|-C --check|检查与所选链中的规范匹配的规则。|\n|-D --delete|从所选链中删除一个或多个规则。|\n|-F --flush|逐个删除所有规则。|\n|-I --insert|将一个或多个规则作为给定的规则编号插入所选链中。|\n|-L --list|显示所选链中的规则。|\n|-n --numeric|以数字格式显示IP地址或主机名和邮政编号。|\n|-N --new-chain <name>|创建一个新的用户定义链。|\n|-v --verbose|与list选项一起使用时提供更多信息。|\n|-X --delete-chain <name>|删除用户定义的链。|\n\n#### 示例\n```\n// 删除规则\niptables -F\niptables –flush\n//设置链的默认策略\niptables -P INPUT DROP\n//指定IP源和网卡丢弃\niptables -A INPUT -i eth0 -p tcp -s 192.168.100.1 -j DROP\n//指定IP源和网卡tcp拒绝\niptables -A INPUT -i eth0 -p tcp -s 192.168.100.1 -j REJECT --reject-with tcp-reset\n//仅允许来自于192.168.100.0/24域的用户的ssh连接请求\niptables -A INPUT -i eth0 -p tcp -s 192.168.100.0/24 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\n//端口转发\niptables -t nat -A PREROUTING -p tcp -d 192.168.102.37 --dport 422 -j DNAT --to 192.168.102.37:22\n//允许多端口访问，也支持端口段：22-443\niptables -A INPUT -i eth0 -p tcp -m multiport --dports 22,80,443 -m state --state NEW,ESTABLISHED -j ACCEPT\n//使用iptables nth将HTTPS流量负载平衡至两个不同的ip地址。\niptables -t nat -A PREROUTING -p tcp --dport 8000 -m state --state NEW -m statistic --mode nth --every 2 --packet 0 -j DNAT --to-destination 192.168.17.33:8001\niptables -t nat -A PREROUTING -p tcp --dport 8000 -m state --state NEW -m statistic --mode nth --every 2 --packet 1 -j DNAT --to-destination 192.168.17.33:8002\n//防火墙服务器上的其中一个网卡连接到外部，另一个网卡连接到内部服务器，使用以下规则允许内部网络与外部网络的通信。此例中，eth1连接到外部网络(互联网)，eth0连接到内部网络(例如:192.168.1.x)。\niptables -A FORWARD -i eth0 -o eth1 -j ACCEPT\n//按流量匹配ping次数。（--limit 10/minute表示一分钟产生10个令牌即6秒一个，--limit-burst 5表示令牌桶最多可以放5个令牌，此项默认值就是5。即实现了平均值(--limit)和峰值(--limit-burst)约束）\niptables -I INPUT 1 -p icmp -m limit --limit 10/minute --limit-burst 5 -j ACCEPT\n//记录丢弃的数据表\niptables -N LOGGING\niptables -A INPUT -i eth0 -p tcp -s 10.92.2.188 -j LOGGING\niptables -A LOGGING -m limit --limit 2/min -j LOG --log-prefix \"IPTables Packet Dropped: \" --log-level 4\niptables -A LOGGING -j DROP\ncat /var/log/messages | grep IPTables #(centos) 根据syslog的配置来确定位置。\n```\n## 规则构成\n在我们执行一个iptables命令的时候，往往达到的效果，就是在某个表的某个链中添加某一条规则。而参与这条规则构成的包括表(table)、链（chain）、匹配(match)和目标（target）。下面将详细介绍这几个部分。\n### 表(table)\niptables里包含了4张表，分别是filter、nat、mangle和raw表。而表的作用在于存放规则，比如我们平时执行`iptables -nL`会得到类似的结果：\n```\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination         \nACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:80\n\nChain FORWARD (policy ACCEPT)\ntarget     prot opt source               destination         \n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination         \n```\n(policy XXX)表示着默认策略。表中包含的链，表示着表里的规则可生效的链范围。表和链有着如下关系：\n![iptables的表和链](Netfilter介绍及其实现原理/iptables-表和链.png)\n### 链(chain)\n如果表是存放规则的地方，而链就是决定规则执行的时机，iptables中的5条链PREROUTING、INPUT、OUTPUT、FORWARD和POSTROUTING。而执行的位置也在简介中的netfilter hook原理中给出了。链把相应的表按照一定的顺序串起来，找出表里对应的规则进行执行。\n![iptables-链和表](Netfilter介绍及其实现原理/[iptables-链和表.png)\n### 匹配(match)\n`-m`或`--match`命令所做的工作，当然这部分我们称为扩展匹配，`-s -i`所执行的也是匹配工作，称为通用匹配。\n**通用匹配**\n类似`-s`这类的通用匹配，通常在用户态代码，和内核代码都包含了，不需要额外加载module。在iptables规则下发里，也是属于附加的基本参数。\n**扩展匹配**\n首先，我们在使用扩展匹配的时候，可以使用帮助文档：`iptables -m the_match_you_want --help`。扩展模块要工作的时候，都需要进行模块匹配，用户态匹配对应的libipt_xxx或libxt_xxx。内核态匹配对应的xt_xxx。比如我们使用的`-m state`在iptables命令执行时，会找`libxt_state.so`的动态库，规则下发到内核的时候，内核会找对应的`xt_state.ko`模块。具体源码实现后续会说明。\n如果想自定义扩展匹配，那么需要写内核模块代码(参考内核模块源码的xt_multiport.c)和用户态模块代码(参考libxt_multiport.c)以及定义的头文件(参考xt_multiport.h)\n### 目标(target)\n`-j`所做的工作，在包匹配成功后，就会执行`-j`后面的动作，来对包进行处理。\n#### 通用目标\n`DROP`,`ACCEPT`,`QUEUE`和`RETURN`这几个属于通用匹配，他们同样以模块的形式进行加载和工作，对应的模块是`standard`\n#### 扩展目标\n扩展目标和扩展匹配也是相似的工作原理，都是进行模块加载。如果要写自定义模块，需要内核模块代码(参考xt_LOG.c)和用户态模块代码(参考libipt_LOG.c)和头文件(参考xt_LOG.h)\n\n## Netfilter源码实现\nNetfilter的整体工作方式类似下图：\n![](Netfilter介绍及其实现原理/iptables内核通信.jpg)\n### 基本数据结构\n由于本人也没有精读源码，所以也只能介绍个大概，一切以源码为准。\n**xt_table与xt_table_info**\nxt_table是Netfilter的核心数据结构，它包含了每个表的所有规则信息，以及匹配处理方法。数据包进入Netfilter后通过查表，匹配相应的规则来决定对数据包的处理结果。下面是xt_table的完整定义（在X_tables.h中）：\n```c\nstruct xt_table {\n    struct list_head list;\n\n    /* What hooks you will enter on */\n    unsigned int valid_hooks;\n\n    /* Man behind the curtain... */\n    struct xt_table_info *private;\n\n    /* Set this to THIS_MODULE if you are a module, otherwise NULL */\n    struct module *me;\n\n    u_int8_t af;      /* address/protocol family */\n\n    int priority;     /* hook order */\n\n    /* A unique name... */\n\n    const char name[XT_TABLE_MAXNAMELEN];\n};\n```\n每个成员意思见上文定义中的注释，个别成员说明如下：\nvalid_hooks：所支持的hook点类型，决定后续注册hook操作的位置。比如filter表的valid_hoos被指定为：(1 << NF_INET_LOCAL_IN) | (1 << NF_INET_FORWARD) | (1 << NF_INET_LOCAL_OUT))，即在NF_INET_LOCAL_IN、NF_INET_FORWARD、NF_INET_LOCAL_OUT三处注册hook操作；\nprivate：xt_table的数据区，包含了所有规则和规则处理方法等信息。xt_table_info详细信息见下文。\n\nxt_table的所有数据都存在private的成员变量中，private是结构体struct xt_table_info，其定义如下：\n```c\nstruct xt_table_info {\n    /* Size per table */\n    unsigned int size;\n\n    /* Number of entries: FIXME. --RR */\n    unsigned int number;\n\n    /* Initial number of entries. Needed for module usage count */\n    unsigned int initial_entries;\n\n    /* Entry points and underflows */\n    unsigned int hook_entry[NF_INET_NUMHOOKS];\n    unsigned int underflow[NF_INET_NUMHOOKS];\n\n    /*\n     * Number of user chains. Since tables cannot have loops, at most\n     * @stacksize jumps (number of user chains) can possibly be made.\n     */\n    unsigned int stacksize;\n    unsigned int __percpu *stackptr;\n    void ***jumpstack;\n\n    /* ipt_entry tables: one per CPU */\n    /* Note : this field MUST be the last one, see XT_TABLE_INFO_SZ */\n\n    void *entries[1];\n};\n```\n重要成员说明：\nhook_entry: 不同hook点的规则的偏移量；\nentries： 规则存储的入口，为可变区域，必须放在结构末尾。entries本质上是ipt_entry结构。关于ipt_entry定义和成员介绍见下文。\n\n**ipt_entry**\nipt_entry结构是对规则的描述，其定义如下：\n```c\n/* This structure defines each of the firewall rules.  Consists of 3\n   parts which are 1) general IP header stuff 2) match specific\n   stuff 3) the target to perform if the rule matches */\nstruct ipt_entry {\n\n    struct ipt_ip ip;\n\n    /* Mark with fields that we care about. */\n    unsigned int nfcache;\n\n    /* Size of ipt_entry + matches */\n    u_int16_t target_offset;\n\n    /* Size of ipt_entry + matches + target */\n    u_int16_t next_offset;\n\n    /* Back pointer */\n    unsigned int comefrom;\n\n    /* Packet and byte counters. */\n    struct xt_counters counters;\n\n    /* The matches (if any), then the target. */\n    unsigned char elems[0];\n};\n```\n成员elems中，保存了一条规则的所有匹配（matchs），以及匹配后的处理操作（target）。在Iptables.c中，generate_entry（）方法新建一个ipt_entry，可以看到如何将matchs和target添加到ipt_entry中的：\n```c\nstatic struct ipt_entry *\ngenerate_entry(const struct ipt_entry *fw,\n           struct xtables_rule_match *matches,\n           struct ipt_entry_target *target)\n{\n    unsigned int size;\n    struct xtables_rule_match *matchp;\n    struct ipt_entry *e;\n\n    size = sizeof(struct ipt_entry);\n\n    for (matchp = matches; matchp; matchp = matchp->next)\n       size += matchp->match->m->u.match_size;\n\n    e = xtables_malloc(size + target->u.target_size);\n    *e = *fw;\n    e->target_offset = size;\n    e->next_offset = size + target->u.target_size;\n\n    size = 0;\n    for (matchp = matches; matchp; matchp = matchp->next) {\n       memcpy(e->elems + size, matchp->match->m, matchp->match->m->u.match_size);\n       size += matchp->match->m->u.match_size;\n    }\n    memcpy(e->elems + size, target, target->u.target_size);\n    return e;\n}\n```\n见上文的程序片段，ipt_entry的空间占用为：ipt_entry结构自身的size，加之所有match的size总和，加之target的size。填写elems时，首先将所有的match依次拷贝到elems指向的存储位置，紧接着将target拷贝到其后。下图是ipt_entry存储示意图：\n![](Netfilter介绍及其实现原理/ipt_entry存储分布示意图.png)\n\n\n**nf_hook_ops**\nnf_hook_ops用于注册一个hook操作，它主要包含了hook操作执行函数、hook类型，以及优先级。我们可以认为，一个nf_hook_ops表征了一个表的一条链，因为它与一个表的一个hook类型唯一对应。其完整定义如下：\n```c\nstruct nf_hook_ops {\n    struct list_head list;\n\n    /* User fills in from here down. */\n    nf_hookfn *hook;\n\n    struct module *owner;\n\n    u_int8_t pf;\n\n    unsigned int hooknum;\n\n    /* Hooks are ordered in ascending priority. */\n    int priority;\n};\n```\n重要成员说明：\nhook：hook操作函数；\nowner：所属的表；\nhooknum：hook类型；\npriority：优先级，决定同一hook点，链（不同表在同一个hook点的链）的执行次序。\n\n**ipt_replace** \n结构主要用于iptables的规则下发，在setsockopt进行规则下发时以此结构体作为传输数据。\n```c\n/* The argument to IPT_SO_SET_REPLACE. */\nstruct ipt_replace {\n\t/* Which table. */\n\tchar name[XT_TABLE_MAXNAMELEN];\n\n\t/* Which hook entry points are valid: bitmask.  You can't\n           change this. */\n\tunsigned int valid_hooks;\n\n\t/* Number of entries */\n\tunsigned int num_entries;\n\n\t/* Total size of new entries */\n\tunsigned int size;\n\n\t/* Hook entry points. */\n\tunsigned int hook_entry[NF_INET_NUMHOOKS];\n\n\t/* Underflow points. */\n\tunsigned int underflow[NF_INET_NUMHOOKS];\n\n\t/* Information about old entries: */\n\t/* Number of counters (must be equal to current number of entries). */\n\tunsigned int num_counters;\n\t/* The old entries' counters. */\n\tstruct xt_counters *counters;\n  \n\t/* The entries (hang off end: not really an array). */\n\tstruct ipt_entry entries[0];\n};\n```\n重要成员说明：\nentries：对应的扩展matches和target的数据集合，其组成方式就是上面对应ip_entry的介绍。\n\n### Netfilter内部数据包处理\n在简介中已经提到了netfilter的hook机制和hook点，现在我们来了解下具体流程。\n首先，内核在收到ip包后，会进行一系列的操作，而hook的位置如下：\n![](Netfilter介绍及其实现原理/ip报文hook点.drawio.png)\n当我们对应的hook点有相应的注册函数时，就会进行相应的注册的hook函数调用：\n```c\n/*\n * \tDeliver IP Packets to the higher protocol layers.\n */\nint ip_local_deliver(struct sk_buff *skb)\n{\n\t/*\n\t *\tReassemble IP fragments.\n\t */\n\n\tif (ip_is_fragment(ip_hdr(skb))) {\n\t\tif (ip_defrag(skb, IP_DEFRAG_LOCAL_DELIVER))\n\t\t\treturn 0;\n\t}\n\n\treturn NF_HOOK(NFPROTO_IPV4, NF_INET_LOCAL_IN, NULL, skb,\n\t\t       skb->dev, NULL,\n\t\t       ip_local_deliver_finish);\n}\n```\n*ip_input.c*\n而实际的hook处理流程如下：\n![](Netfilter介绍及其实现原理/Netfilter内部数据包处理流程.drawio.png)\n这里主要的实现函数`nf_hook_slow`\n```c\nint nf_hook_slow(struct sk_buff *skb, struct nf_hook_state *state)\n{\n\tstruct nf_hook_ops *elem;\n\tunsigned int verdict;\n\tint ret = 0;\n\n\t/* We may already have this, but read-locks nest anyway */\n\trcu_read_lock();\n\n\telem = list_entry_rcu(&nf_hooks[state->pf][state->hook],\n\t\t\t      struct nf_hook_ops, list);\nnext_hook:\n\tverdict = nf_iterate(&nf_hooks[state->pf][state->hook], skb, state,\n\t\t\t     &elem);\n\tif (verdict == NF_ACCEPT || verdict == NF_STOP) {\n\t\tret = 1;\n\t} else if ((verdict & NF_VERDICT_MASK) == NF_DROP) {\n\t\tkfree_skb(skb);\n\t\tret = NF_DROP_GETERR(verdict);\n\t\tif (ret == 0)\n\t\t\tret = -EPERM;\n\t} else if ((verdict & NF_VERDICT_MASK) == NF_QUEUE) {\n\t\tint err = nf_queue(skb, elem, state,\n\t\t\t\t   verdict >> NF_VERDICT_QBITS);\n\t\tif (err < 0) {\n\t\t\tif (err == -ECANCELED)\n\t\t\t\tgoto next_hook;\n\t\t\tif (err == -ESRCH &&\n\t\t\t   (verdict & NF_VERDICT_FLAG_QUEUE_BYPASS))\n\t\t\t\tgoto next_hook;\n\t\t\tkfree_skb(skb);\n\t\t}\n\t}\n\trcu_read_unlock();\n\treturn ret;\n}\n```\n这里的`nf_hooks[state->pf][state->hook]`中，`state->pf`是对应的协议，比如`NFPROTO_IPV4`, `state->hook`表示hook的点，比如`NF_INET_LOCAL_IN`。而nf_hooks是一个全局变量，包含了所有的注册hook。\n在进入到`ipt_do_table`函数后，会进行包的匹配和处理，流程如下：\n![](Netfilter介绍及其实现原理/netfilter包过滤.drawio.png)\n`ipt_do_table`会先匹配基本match，再匹配扩展match，匹配成功后，进行基础target或扩展target的处理。如果匹配不成功，则会一直匹配直到所有matches匹配完。这也导致了iptables规则在命中一条规则后，后续的规则都不会再进行匹配了(除非你target指向其他链)。\n内部数据包处理大概如上所说，但是我们仍然抱有疑惑，hook函数哪里来？扩展match怎么生效等。这就要归功于netfilter的注册机制。\n### Netfilter模块注册\n模块注册的时机是在模块加载的时候，而模块加载分系统启动时加载，即系统启动时加载netfilter以及编译到内核的模块。\n而没有编译到内核，而是以独立模块存在的netfilter模块，则会在规则下发的时候，会根据你传入的match或target名称到对应的路径下寻找，并载入模块。\nnetfilter在设计的时候，就设计了强大的模块加载机制，因此也表现出强大的扩展性。\n![](Netfilter介绍及其实现原理/Netfilter扩展机制示意图.png)\n本质上，模块加载结构都是相似的。我们就以`iptable_filter.c`为例，讲解一下hook的注册过程。\n![](Netfilter介绍及其实现原理/netfilter模块注册过程.drawio.png)\n对应的部分`iptable_filter.c`代码：\n```c\nstatic const struct xt_table packet_filter = {\n\t.name\t\t= \"filter\",\n\t.valid_hooks\t= FILTER_VALID_HOOKS,\n\t.me\t\t= THIS_MODULE,\n\t.af\t\t= NFPROTO_IPV4,\n\t.priority\t= NF_IP_PRI_FILTER,\n};\n\nstatic unsigned int\niptable_filter_hook(const struct nf_hook_ops *ops, struct sk_buff *skb,\n\t\t    const struct net_device *in, const struct net_device *out,\n\t\t    const struct nf_hook_state *state)\n{\n\tconst struct net *net;\n\n\tif (ops->hooknum == NF_INET_LOCAL_OUT &&\n\t    (skb->len < sizeof(struct iphdr) ||\n\t     ip_hdrlen(skb) < sizeof(struct iphdr)))\n\t\t/* root is playing with raw sockets. */\n\t\treturn NF_ACCEPT;\n\n\tnet = dev_net(state->in ? state->in : state->out);\n\treturn ipt_do_table(skb, ops->hooknum, state, net->ipv4.iptable_filter);\n}\n\n....\n\nstatic int __init iptable_filter_init(void)\n{\n\tint ret;\n\n\tret = register_pernet_subsys(&iptable_filter_net_ops);\n\tif (ret < 0)\n\t\treturn ret;\n\n\t/* Register hooks */\n\tfilter_ops = xt_hook_link(&packet_filter, iptable_filter_hook);\n\tif (IS_ERR(filter_ops)) {\n\t\tret = PTR_ERR(filter_ops);\n\t\tunregister_pernet_subsys(&iptable_filter_net_ops);\n\t}\n\n\treturn ret;\n}\n\nstatic void __exit iptable_filter_fini(void)\n{\n\txt_hook_unlink(&packet_filter, filter_ops);\n\tunregister_pernet_subsys(&iptable_filter_net_ops);\n}\n\nmodule_init(iptable_filter_init);\nmodule_exit(iptable_filter_fini);\n```\nnetfilter注册的逻辑依赖内核模块注册。内核模块加载的时候，会自动调用module_init，在iptable_filter中，调用`iptable_filter_init`，执行`xt_hook_link`函数，将`packet_filter`全局量挂载到`nf_hooks`全局量。实际包过滤的时候，就会根据`nf_hooks`来调用注册的hook。\n以上就是hook的注册过程，实际在看源码中，match和target等注册过程也是类似的，通过module_init将模块文件的变量注册到全局量中。\n### iptables规则下发\n内核空间与用户空间的数据交互通过getsockopt和setsockopt来完成，这个两个函数用来控制相关socket文件描述符的的选项值。先来看这两个函数的原型：\nset/getsockopt(2)函数的基本使用格式为：\n```\nint setsockopt(int sockfd, int proto, int cmd, void *data, int datalen)\nint getsockopt(int sockfd, int proto, int cmd, void *data, int datalen)\n```\n在调用`setsockopt`函数时，实际执行的流程如下：\n![](Netfilter介绍及其实现原理/规则提交函数调用示意图.png)\n上图中，从setsockopt()到ip_setsockopt()是常规的setsockopt调用流程；在新的流程中，Netfilter加入的自己的处理函数nf_setsockopt()。\n![](Netfilter介绍及其实现原理/setsockopt流程图.drawio.png)\n上图中，核心函数`do_replace`，进行的数据拷贝传输，源码如下：\n```c\nstatic int\ndo_replace(struct net *net, const void __user *user, unsigned int len)\n{\n\tint ret;\n\tstruct ipt_replace tmp;\n\tstruct xt_table_info *newinfo;\n\tvoid *loc_cpu_entry;\n\tstruct ipt_entry *iter;\n\n\tif (copy_from_user(&tmp, user, sizeof(tmp)) != 0)\n\t\treturn -EFAULT;\n\n\t/* overflow check */\n\tif (tmp.num_counters >= INT_MAX / sizeof(struct xt_counters))\n\t\treturn -ENOMEM;\n\tif (tmp.num_counters == 0)\n\t\treturn -EINVAL;\n\n\ttmp.name[sizeof(tmp.name)-1] = 0;\n\n\tnewinfo = xt_alloc_table_info(tmp.size);\n\tif (!newinfo)\n\t\treturn -ENOMEM;\n\n\tloc_cpu_entry = newinfo->entries;\n\tif (copy_from_user(loc_cpu_entry, user + sizeof(tmp),\n\t\t\t   tmp.size) != 0) {\n\t\tret = -EFAULT;\n\t\tgoto free_newinfo;\n\t}\n\n\tret = translate_table(net, newinfo, loc_cpu_entry, &tmp);\n\tif (ret != 0)\n\t\tgoto free_newinfo;\n\n\tduprintf(\"Translated table\\n\");\n\n\tret = __do_replace(net, tmp.name, tmp.valid_hooks, newinfo,\n\t\t\t   tmp.num_counters, tmp.counters);\n\tif (ret)\n\t\tgoto free_newinfo_untrans;\n\treturn 0;\n\n free_newinfo_untrans:\n\txt_entry_foreach(iter, loc_cpu_entry, newinfo->size)\n\t\tcleanup_entry(iter, net);\n free_newinfo:\n\txt_free_table_info(newinfo);\n\treturn ret;\n}\n```\n从源码可以看到，iptables和内核间的通信，就是通过调用`copy_from_user`函数进行数据拷贝来完成的。而拷贝的核心数据结构，就是上面介绍过的`ipt_replace`结构。\n至此，Netfilter源码实现的主要流程就介绍完了，更多的细节可自行阅读源码。\n## 自定义match\n主要是为了练习，功能就是命中后打印输出一下。\n要实现一个iptables的自定义功能，那么，我应该产生三个文件libipt_xx.c、ipt_xx.c和ipt_xx.h(ipt更换为xt一样有效)，并放到对应目录中：\n```\nipt_xx.c   -> /<linux-kernel-src>/net/ipv4/netfilter/\nipt_xx.h   -> /<linux-kernel-src>/include/uapi/linux/netfilter_ipv4\nlibipt_xx.c   -> /usr/local/src/iptables-x.x.x/extensions/\n```\n然后再分别编译内核部分ipt_xx.c和ipt_xx.h源码及用户部分libipt_xx.c源码。\n### 环境准备\n**内核源码下载**\n通用的linux内核源码的[下载](https://www.kernel.org/)\ncentos/redhat的内核在上面找不到对应的，他们是自己维护的版本，下载方法如下：\n```\n# 先复制及设定 centos-common 源码\n[user@host ~]$ git clone  https://git.centos.org/centos-git-common.git\n[user@host ~]$ git clone https://git.centos.org/rpms/kernel.git ; cd kernel\n# 让我们存取 cenots7 内核\n[user@host kernel]$ git checkout c7 \n# get_sources会根据你的电脑内核版本，匹配对应的源码。\n[user@host kernel]$ ~/centos-git-common/get_sources.sh\n```\n如果你对特定分支感兴趣，也可以下载特定分支：\n```\ngit clone -b c7 --single-branch https://git.centos.org/rpms/kernel.git\n```\n这里的内核源码也包含了Netfilter的内核源码。\n\n**iptables源码：**\n*本文使用的是iptables v1.14.21版本，对应的源码也是这个版本* [下载](https://www.netfilter.org/projects/iptables/downloads.html)\n\n### 自定义match源码\n内核部分：xt_test.c\n```c\n#define pr_fmt(fmt) KBUILD_MODNAME \": \" fmt\n#include <linux/module.h>\n#include <linux/types.h>\n#include <linux/udp.h>\n#include <linux/skbuff.h>\n#include <linux/in.h>\n#include <linux/kernel.h>  \n\n#include <linux/netfilter/xt_test.h>\n#include <linux/netfilter/x_tables.h>\n#include <linux/netfilter_ipv4/ip_tables.h>\n#include <linux/netfilter_ipv6/ip6_tables.h>\n\nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"Netfilter Core Team <coreteam@netfilter.org>\");\nMODULE_DESCRIPTION(\"Xtables: multiple port matching for TCP, UDP, UDP-Lite, SCTP and DCCP\");\nMODULE_ALIAS(\"ipt_test\");\nMODULE_ALIAS(\"ip6t_test\");\n\nstatic bool\ntest_mt(const struct sk_buff *skb, struct xt_action_param *par)\n{\n\tconst struct xt_test *testinfo = par->matchinfo;\n\tconst struct iphdr *ip;\n\tip = ip_hdr(skb);\n\tif (testinfo->s_addr == ip->saddr){\n\t\tprintk(\"match ip [%s]\",ip->saddr);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nstatic inline bool\ncheck(u_int16_t proto)\n{\n\treturn proto == IPPROTO_TCP;\n}\n\nchar *\ninet_ntoa(struct in_addr ina)\n{\n\tstatic char buf[sizeof \"aaa.bbb.ccc.ddd\"];\n\tunsigned char *ucp = (unsigned char *)&ina;\n\n\tsprintf(buf, \"%d.%d.%d.%d\",\n\t\tucp[0] & 0xff,\n\t\tucp[1] & 0xff,\n\t\tucp[2] & 0xff,\n\t\tucp[3] & 0xff);\n    return buf;\n}\n\nstatic int test_mt_check(const struct xt_mtchk_param *par)\n{\n\tconst struct ipt_ip *ip = par->entryinfo;\n\tprintk(\"input ip:%s\", inet_ntoa(ip->src));\n\treturn 0;\n}\n\nstatic struct xt_match test_mt_reg __read_mostly = {\n\t.name\t\t= \"test\",\n\t.family\t\t= NFPROTO_IPV4,\n\t.revision\t= 1,\n\t.checkentry\t= test_mt_check,\n\t.match\t\t= test_mt,\n\t.matchsize\t= sizeof(struct xt_test),\n\t.me\t\t= THIS_MODULE,\n};\n\nstatic int __init test_mt_init(void)\n{\n\tprintk(\"test module init sucess\");\n\treturn xt_register_match(&test_mt_reg);\n}\n\nstatic void __exit test_mt_exit(void)\n{\n\txt_unregister_match(&test_mt_reg);\n}\n\nmodule_init(test_mt_init);\nmodule_exit(test_mt_exit);\n```\n用户部分：libxt_test.c\n```c\n#include <stdio.h>\n#include <netdb.h>\n#include <string.h>\n#include <stdlib.h>\n#include <xtables.h>\n#include <limits.h> /* INT_MAX in ip_tables.h/ip6_tables.h */\n#include <linux/netfilter_ipv4/ip_tables.h>\n#include <linux/netfilter_ipv6/ip6_tables.h>\n#include <linux/netfilter/xt_test.h>\n#include <sys/socket.h>\n\nenum {\n\tO_SOURCE_PORTS = 0,\n\tO_DEST_PORTS,\n\tO_SD_PORTS,\n\tF_SOURCE_PORTS = 1 << O_SOURCE_PORTS,\n\tF_DEST_PORTS   = 1 << O_DEST_PORTS,\n\tF_SD_PORTS     = 1 << O_SD_PORTS,\n\tF_ANY          = F_SOURCE_PORTS | F_DEST_PORTS | F_SD_PORTS,\n};\n\n/* Function which prints out usage message. */\nstatic void test_help(void)\n{\n\tprintf(\n\"test match options:\\n\"\n\" --source-ip [ip]\\n\"\n\" NOTE: just for test.\\n\");\n}\n\nstatic const struct xt_option_entry test_opts[] = {\n\t{.name = \"source-ip\", .id = O_SOURCE_PORTS, .type = XTTYPE_STRING,\n\t .excl = F_ANY, .flags = XTOPT_INVERT},\n\tXTOPT_TABLEEND,\n};\n\nstatic const char *\nproto_to_name(uint8_t proto)\n{\n\tswitch (proto) {\n\tcase IPPROTO_TCP:\n\t\treturn \"tcp\";\n\tdefault:\n\t\treturn NULL;\n\t}\n}\n\nstatic unsigned int\nparse_srource_ip(const char *portstring)\n{\n\tchar *buffer;\n\tstruct in_addr addr;\n\n\tbuffer = strdup(portstring);\n\tif (!buffer) xtables_error(OTHER_PROBLEM, \"strdup failed\");\n\n\tif(!inet_aton(buffer, &addr)) xtables_error(OTHER_PROBLEM, \"ip not vaild\");\n\tfree(buffer);\n\treturn (unsigned int)addr.s_addr;\n}\n\nstatic const char *\ncheck_proto(uint16_t pnum, uint8_t invflags)\n{\n\tconst char *proto;\n\n\tif (invflags & XT_INV_PROTO)\n\t\txtables_error(PARAMETER_PROBLEM,\n\t\t\t   \"test only works with TCP, UDP, UDPLITE, SCTP and DCCP\");\n\n\tif ((proto = proto_to_name(pnum)) != NULL)\n\t\treturn proto;\n\telse if (!pnum)\n\t\txtables_error(PARAMETER_PROBLEM,\n\t\t\t   \"test needs `-p tcp', `-p udp', `-p udplite', \"\n\t\t\t   \"`-p sctp' or `-p dccp'\");\n\telse\n\t\txtables_error(PARAMETER_PROBLEM,\n\t\t\t   \"test only works with TCP, UDP, UDPLITE, SCTP and DCCP\");\n}\n\nstatic void __test_parse(struct xt_option_call *cb, uint16_t pnum,\n\t\t\t      uint8_t invflags)\n{\n\tconst char *proto;\n\tstruct xt_test *multiinfo = cb->data;\n\n\txtables_option_parse(cb);\n\tswitch (cb->entry->id) {\n\tcase O_SOURCE_PORTS:\n\t\t//proto = check_proto(pnum, invflags);\n\t\tmultiinfo->s_addr = (__be32)parse_srource_ip(cb->arg);\n\t\tbreak;\n\t}\n\tif (cb->invert)\n\t\txtables_error(PARAMETER_PROBLEM,\n\t\t\t   \"test.0 does not support invert\");\n}\n\nstatic void test_parse(struct xt_option_call *cb)\n{\n\tconst struct ipt_entry *entry = cb->xt_entry;\n\treturn __test_parse(cb,\n\t       entry->ip.proto, entry->ip.invflags);\n}\n\nstatic void test_check(struct xt_fcheck_call *cb)\n{\n\tif (cb->xflags == 0)\n\t\txtables_error(PARAMETER_PROBLEM, \"test expection an option\");\n}\n\nstatic void\n__test_print(const struct xt_entry_match *match, int numeric,\n                  uint16_t proto)\n{\n\tconst struct xt_test *multiinfo\n\t\t= (const struct xt_test *)match->data;\n\tstruct in_addr addr;\n\taddr.s_addr = (in_addr_t)multiinfo->s_addr;\n\n\tprintf(\" test \");\n\n\tprintf(\"%s\",inet_ntoa(addr));\n}\n\nstatic void test_print(const void *ip_void,\n                            const struct xt_entry_match *match, int numeric)\n{\n\tconst struct ipt_ip *ip = ip_void;\n\t__test_print(match, numeric, ip->proto);\n}\n\nstatic void __test_save(const struct xt_entry_match *match,\n                             uint16_t proto)\n{\n\tconst struct xt_test *multiinfo\n\t\t= (const struct xt_test *)match->data;\n\tstruct in_addr addr;\n\taddr.s_addr = (in_addr_t)multiinfo->s_addr;\n\n\tprintf(\" test \");\n\n\tprintf(\"%s\",inet_ntoa(addr));\n}\n\nstatic void test_save(const void *ip_void,\n                           const struct xt_entry_match *match)\n{\n\tconst struct ipt_ip *ip = ip_void;\n\t__test_save(match, ip->proto);\n}\n\nstatic struct xtables_match test_mt_reg = {\n\t.family        = NFPROTO_IPV4,\n\t.name          = \"test\",\n\t.revision      = 1,\n\t.version       = XTABLES_VERSION,\n\t.size          = XT_ALIGN(sizeof(struct xt_test)),\n\t.userspacesize = XT_ALIGN(sizeof(struct xt_test)),\n\t.help          = test_help,\n\t.x6_parse      = test_parse,\n\t.x6_fcheck     = test_check,\n\t.print         = test_print,\n\t.save          = test_save,\n\t.x6_options    = test_opts,\n};\n\nvoid\n_init(void)\n{\n\txtables_register_match(&test_mt_reg);\n}\n```\n头文件：xt_test.h\n```c\n/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */\n#ifndef _XT_TEST_H\n#define _XT_TEST_H\n\n#include <linux/types.h>\n\n/* Must fit inside union xt_matchinfo: 16 bytes */\nstruct xt_test {\n\t__be32\ts_addr;\t\t\t\t/* Type of comparison */\n};\n\n#endif /*_XT_MULTIPORT_H*/\n```\n### 编译\n首先把对应的文件放到对应的位置：\n```\nxt_test.c   -> /<linux-kernel-src>/net/ipv4/netfilter/\nxt_test.h   -> /<linux-kernel-src>/include/uapi/linux/netfilter_ipv4\nlibxt_test.c   -> /<iptables-x.x.x>/extensions/\n```\n用户态源码编译：\n```shell\n./autogen.sh\n./configure --prefix=/usr/local/iptables\nmake\nmake install\n```\n内核源码编译：\n```\ncd <your_kernel_src_path>/net/netfilter\n#修改Makefile，新增：obj-$(CONFIG_NETFILTER_XT_MATCH_TEST) += xt_test.o\nmake CONFIG_NETFILTER_XT_MATCH_TEST=m -C <your_kernel_src_path>  M=`pwd` modules\n```\n如果出现`No rule to make target 'tools/objtool/objtool'`的错误：\n1. `yum install kernel-headers kernel-devel -y`\n2. 找到`/usr/src/kernels/`下安装的tools/objtool/objtool/objtool，将可执行文件拷贝到你的内核源码对应目录。\n3. 重新执行make\n\n### 测试\n1. 先把编译得到的`xt_test.ko`放到`/usr/lib/modules/3.10.0.xxxx/kernel/net/netfilter/`目录下。\n2. 添加iptables规则：\n   ```\n   /usr/local/iptables/sbin/iptables -A INPUT -p tcp -m test --source-ip <ip> -j DROP\n   ```\n3. 使用你配置了的`<ip>`地址的机器来访问目标机器(tcp)\n4. `dmesg`命令来查看打印输出的消息。\n\n如果出现`Couldn't load match 'test11':No such file or directory`证明你用户态代码，没有找到你编译的模块。\n如果出现`iptables:No chain/target/match by the name`证明你内核相应的模块没有嵌入。\n如果`dmesg`没有显示出你想要的信息，可能是输出日志级别不够，尝试：`dmesg -n 7`；或者是存在缓存，尝试删除原有iptables规则，重新配置，之前的日志消息就打印了。\n\n\n## 链接跟踪(conntrack)\n功能就是给链接做标识。这一章节主要都是参考(也就是抄[狗头])Netfilter[链接跟踪简介](http://blog.chinaunix.net/uid-26517122-id-4281274.html)(想看更详细内容最好看原文，我这里只是简单截取了主要核心部分，就不重复copy了)，他其他的netfilter相关的解析也写的挺好，建议去看看。\n#### conntrack介绍\n 我们期望一种场景，即外网无法访问内网，但是内网能够访问外网。但配置了拒绝所有外网来的数据包以后，内网访问外网返回的包也无法进入内网，导致内网访问外网失败。因此我们可以利用conntrack(链接跟踪)来解决这一问题。\n通用的数据访问方式分两种：\n1. TCP这种面向连接的协议，源和目的的连接终止时，状态防火墙通过检查TCP头的控制标记来跟踪整个过程，并动态地将该连接从状态表中删除。\n2. DP和ICMP不是面向连接的协议，无法通过报文来判断连接是否终止。状态防火墙会把将UDP流量看成是有连接的，通过在状态表中设置一个定时器，来定期的老化删除一些无用连接。\n\n期望连接：\n有一些协议，连接时会分为控制连接和数据连接，我们把数据连接称为是控制连接的期望连接。\n我们以tftp协议为例来说明一下期望连接：\n![](Netfilter介绍及其实现原理/期望链接.jpg)\n如果，客户端先发起连接，使用熟知的69端口。因为69端口是分给了tftp server的，tftp server接收到连接请求后，会自己申请一个server主机上未用的端口1235（因为tftp server的69端口还需要接收其他client发来的连接请求，所有不能使用69来传输数据），给tftp client发送回应。以后client和server就使用端口1235来进行通信了。\n现在来看，上面连接是两条不同的连接。我们把第二条连接是其一条连接的期望连接。\n比如防火墙上只放开了目的端口号69的访问，当内网访问外网的tftp server时，回应报文就会被拦截，导致tftp 功能失效。状态防火墙提出期望连接，当回应报文根据目的端口号发现该回应是已存在连接的期望连接，防火墙放过该回应报文，这样tftp功能OK。\n做个实验：\n在一台主机上配置如下规则：\n```\niptables  -P  INPUT DROP   //丢弃所有到本机的报文\niptables -A INPUT -p udp --dport 69 -j ACCEPT //放行目的端口69的报文\n```\n这时把该主机当tftp client，从tftp server下载东西是无法下载的。\n```\niptables -A INPUT -m conntrack --ctstatus EXPECTED -j ACCEPT//放行期望连接\n```\n这时tftp功能OK。\n\n因此，为了满足上述需求，链接跟踪实现了以下功能：\n1. 建立一张连接状态表，来存放连接记录\n2. 连接状态表中，有定时的垃圾回收机制\n3. 根据报文进行连接状态的建立及对已有连接状态的更新\n4. 期望连接的建立和关联\n5. 在连接跟踪上需要提供易于扩展的接口，来实现用户自定义的一些功能。\n下面本文将从两个方向来描述链接跟踪，一是从模块扩展上，模块如何注册到conntrack中，提供报文的处理方法；第二是数据流上，报文时如何一步步的在netfilter框架中流动，被conntrack处理的。\n\n### conntrack标识\n连接跟踪是根据报文的L3，L4层头信息来标识一条连接的，而这些标识需要一个数据结构来进行定义和存储。改数据结构包含了一条连接的全部信息，并且链接跟踪的查找，建立，关联和更新都是依据该数据结构，我们称该数据结构为元组。\n**元组数据结构：**\n```c\nstruct nf_conntrack_tuple\n{\n     struct nf_conntrack_man src;  //源端信息\n\n   //目的端信息。\n    /* These are the parts of the tuple which are fixed. */\n    struct {\n        union nf_inet_addr u3;  //目的IP地址\n　　  //目的端口的信息，不同协议使用不同的报文字段\n        union {\n             /* Add other protocols here. */\n            __be16 all;\n            struct {\n                __be16 port;//TCP报文就使用目的端口\n            } tcp;\n            struct {\n                 __be16 port;//UDP报文就使用目的端口\n            } udp;\n            struct {\n                u_int8_t type, code;//ICMPP报文使用type，cod两个字段\n            } icmp;\n            ... //其他协议此处省略\n        } u;\n        //传输层协议类型，既L4协议类型\n        u_int8_t protonum;\n        //标识连接的方向，一条连接分两个方向，一来一回\n        /* The direction (for tuplehash) */\n        u_int8_t dir;\n    } dst;\n};\n\n\nstruct nf_conntrack_man\n{\n     union nf_inet_addr u3; //IP地址\n    //L4协议源端信息\n    union nf_conntrack_man_proto u;\n    //L3协议类型\n    u_int16_t l3num;\n};\n\n\n//L4层源端的信息。\nunion nf_conntrack_man_proto\n{\n    /* Add other protocols here. */\n    __be16 all;\n    struct {\n        __be16 port;\n    } tcp;\n    struct {\n        __be16 port;\n    } udp;\n    struct {\n        __be16 id;\n    } icmp;\n    .... //其他协议此处省略\n};\n```\n从上面数据结构定义看，标识一条连接的元组为：\nTCP  源IP，源端口，L3协议类型，目的IP，目的端口号，L4协议类型\nUDP  源IP，源端口，L3协议类型，目的IP，目的端口号，L4协议类型\nICMP 源IP，L3协议类型，目的IP，id，type，code,，L4协议类型\n\n**conntrack数据结构：**\n一个连接包含正反两个方向的两条报文流.\n```c\nstruct nf_conn {\n    //对连接的引用计数\n    struct nf_conntrack ct_general;\n    spinlock_t lock;\n\n    //正向和反向的连接元组信息。\n    struct nf_conntrack_tuple_hash tuplehash[IP_CT_DIR_MAX];\n\n    //该连接的连接状态\n    unsigned long status;\n\n    //如果该连接是期望连接，指向跟其关联的主连接\n    struct nf_conn *master;\n\n    //连接垃圾回收定时器\n    struct timer_list timeout;\n\n    /*存储特定协议的连接跟踪信息*/\n    union nf_conntrack_proto proto;\n\n    /*指向扩展结构，该结构中包含一些基于连接的功能扩展处理函数 */\n    struct nf_ct_ext *ext;\n   //网络命名空间\n    struct net *ct_net;\n};\n\nstruct nf_conntrack_tuple_hash {\n    struct hlist_nulls_node hnnode;\n    struct nf_conntrack_tuple tuple;\n};\n```\n每个struct nf_conn实例代表一个连接。每个skb都有一个指针，指向和它相关联的连接。\n```c\nstruct sk_buff {\n\tstruct nf_conntrack *nfct;//指向struct nf_conn实例\n\n\tkmemcheck_bitfield_begin(flags1);\n\t__u8 local_df:1,\n\tcloned:1,\n\tip_summed:2,\n\tnohdr:1,\n\tnfctinfo:3; //记录报文的连接状态。\n\tkmemcheck_bitfield_end(flags1);\n};\n```\n\n**conntrack的存储:**\n*/include/net/netns/conntrack.h*\n每个网络命名空间有如下一个数据结构的实例，来管理和存放生成的连接的一些信息。\n```c\nstruct netns_ct \n{\n    atomic_t count;\n    unsigned int expect_count;\n    unsigned int htable_size; \n    struct kmem_cache *nf_conntrack_cachep;\n    struct hlist_nulls_head *hash;//存放已经经过确认的连接hash表\n    struct hlist_head *expect_hash;//期望连接hash表\n    struct hlist_nulls_head unconfirmed; //存放没经过确认的连接hash表\n    struct hlist_nulls_head dying;\n    struct ip_conntrack_stat *stat;\n\n    int hash_vmalloc;\n    int expect_vmalloc;\n    char *slabname;\n};\n```\n整体conntrack相关的数据结构如下：\n![](Netfilter介绍及其实现原理/conntrack的存储.jpg)\n\n### conntrack的建立过程\n我们先来看一下iptables定义的连接状态：\n**INVALID** :无效连接，防火墙一般会丢弃该连接\n**NEW**：新建立的，既只是通信双方中只一方发送了报文，还没有得到回应的\n**ESTABLISHED**：已经得到回应的连接。既通信双方都发送过报文的连接\n**RELATED**:关联的连接，既有期望连接关联的连接\n**UNTRACKED**：不进行连接跟踪的连接\n**SNAT**:配置了SNAT的连接\n**DNAT**:配置了DNAT的连接\n\n#### 一般连接建立过程：\n这里我们拿一个udp通信的例子来走一遍连接建立的过程。先不具体到代码的实现。\n\n1、首先，PC和SERVER使用udp报文进行通信。\n![](Netfilter介绍及其实现原理/conntrack一般连接建立1.jpg)\n**PC--------->SERVER**\n\n报文的元组信息如下：\n```\nSip：1.1.1.6\nSport:1116\nDip:1.1.1.5\nDport:1115\nl4protonum:udp\nL3num:INET\n```\n报文到达防火墙，防火墙的处理如下：\n**防火墙入口处:**\n1. conntrack模块截获报文。\n2. 根据报文的元组信息在防火墙内的连接表中查找是否已经存在建立的连接，因为第一次通信，没有已建立的连接。\n\n建立一个新的连接，连接的正反向元组信息如下图，并把该连接的正向连接A挂到unconfirmed链表上\n![](Netfilter介绍及其实现原理/conntrack一般连接建立2.jpg)\n如上，新建连接后，把该连接和报文进行关联，连接状态是NEW。\n\n**防火墙出口处：**\n拦截报文后，根据报文携带的连接信息，找到连接，把该连接的正向连接A从unconfirmed链表上摘下来，把该连接的正反向连接A和B加入到连接hash表中。并把该连接确认状态置为confirmed状态，即置位status的IPS_CONFIRMED_BIT位。\n![](Netfilter介绍及其实现原理/conntrack一般连接建立3.jpg)\n\n**SERVER----->PC**\nSERVER回应PC的报文元组信息如下：\n```\nSip：1.1.1.5\nSport:1115\nDip:1.1.1.6\nDport:1116\nl4protonum:udp\nL3num:INET\n```\n\n报文到达防火墙，防火墙的处理如下：\n**防火墙入口处:**\n1. conntrack模块截获报文。\n2. 根据报文的元组信息在防火墙内的连接表中查找是否已经存在建立的连接，可以找到已建立的连接B。\n3. 发现连接B里的dir是reply，表明该连接已经有回应报文了，给连接中的status置位IPS_SEEN_REPLY_BIT，表明该连接已经收到了回应报文。这时把报文的连接状态变为ESTABLISHED\n\n**防火墙出口处：**\n1. 拦截报文后，根据报文携带的连接信息，找到连接，发现该连接确认状态是confirmed的，直接不进行连接处理。\n\n至此，连接建立完成。\n\n后续该连接的正反方向的报文都可以在连接表中查到相应的连接，就可以根据连接进行相应的处理了。\n\n#### 期望连接的建立过程：\n这里就不介绍了，详情可看[原文](http://blog.chinaunix.net/uid-26517122-id-4281305.html)\n\n**奉上原文后续章节：**\n[Netfilter中conntrack 功能扩展机制](http://blog.chinaunix.net/uid-26517122-id-4292718.html)\n[Netfilter中conntrack helper扩展实现](http://blog.chinaunix.net/uid-26517122-id-4292730.html)\n[Netfilter中L3和L4层提供的conntrack处理方法](http://blog.chinaunix.net/uid-26517122-id-4292946.html)\n[Netfilter中conntrack的HOOK点](http://blog.chinaunix.net/uid-26517122-id-4293010.html)\n[Nefilter中IP conntrack核心函数详解](http://blog.chinaunix.net/uid-26517122-id-4293135.html)\n\n\n## 参考\n[Netfilter](https://zh.wikipedia.org/wiki/Netfilter)\n[netfilter/iptables 简介](https://www.ibm.com/developerworks/cn/linux/network/s-netip/index.html)\n[Netfilter 框架及其周边组件](https://www.xiayinchang.top/post/d617cc74.html)\n[netfilter框架研究](https://opengers.github.io/openstack/openstack-base-netfilter-framework-overview/#connection-tracking)\n[使用iptables控制网络流量](https://cloud.tencent.com/developer/article/1199506)\n[深入理解Iptables和Netfilter架构](https://xiaoz.co/2020/01/10/a-deep-dive-into-iptables-and-netfilter-architecture/)\n[深入理解Iptables和Netfilter架构](http://arthurchiao.art/blog/deep-dive-into-iptables-and-netfilter-arch-zh/)\n[iptables和netfilter的通信流程](https://blog.csdn.net/haolipengzhanshen/article/details/85007427)\n[netfilter内核源码分析](https://blog.csdn.net/venoy4806/article/details/5136626)\n[Netfilter内核源码分析](https://blog.csdn.net/venoy4806/article/details/5136626)\n[Netfilter全面讲解](http://chinaunix.net/uid-29547110-id-5038602.html)\n[conntrack详解](http://blog.chinaunix.net/uid-26517122-id-4292718.html)","slug":"Netfilter介绍及其实现原理","published":1,"updated":"2021-01-18T09:05:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insg000ah9uoja2li8cu","content":"<p>工作需要，了解了一下Net filter的工作原理。(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em>源码的版本：linux-3.10.0-1127.18.2.el7 (centos)</em></p>\n<a id=\"more\"></a>\n\n\n<p><a href=\"https://www.ibm.com/developerworks/cn/linux/network/s-netip/index.html\" target=\"_blank\" rel=\"noopener\">简介</a></p>\n<p><em>包含netfilter的基本介绍，iptables规则介绍及使用，netfilter实现原理，自定义match实现，链接跟踪实现、ipset和iptables联动和ipset实现</em></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Netfilter</strong>，在Linux内核中的一个软件框架，用于管理网络数据包。不仅具有网络地址转换（NAT）的功能，也具备数据包内容修改、以及数据包过滤等防火墙功能。利用运作于用户空间的应用软件，如<code>iptables</code>、<code>ebtables</code>和<code>arptables</code>等，来控制Netfilter，系统管理者可以管理通过Linux操作系统的各种网络数据包。<br><strong>iptables：</strong><br>Netfilter中最为常用的一种网络数据包过滤方式——IP包过滤，我们也将重点介绍这种过滤方式。用户在使用<code>iptables</code>时需要超级用户权限，以及内核模块需要<code>Xtables</code>模块做支撑。iptables只能处理ipv4，对应的ipv6则使ip6tables来处理。<br><strong>ebtables</strong><br>ebtables 是以太网桥防火墙，以太网桥工作在数据链路层，ebtables 主要用来过滤数据链路层数据包。使用 ebtables 可以实现 filtering 、NAT 和 brouting。过滤根据 MAC 头包括 VLAN ID 等信息确定是否丢弃该帧。MAC NAT 可以修改 MAC 源和目的地址。Brouting 意为 bridge or route，根据规则确定应该将数据帧路由给上层（iptables）还是通过网桥转给其它的接口。<br>ebtables 和我们熟悉的 iptables 很像，也有规则（rules）、链（chains）和表（tables）的概念。ebtables 使用规则确定应当对数据帧执行什么动作。规则按照不同的链分组，不同的表中包含不同的链。在 ebtables 中有三张表：filter、nat 和 broute，分别对应其三大功能模块。<br>需要注意的是如果一个以太网接口 eth1，它并没有桥接到网桥上，此时，从 eth1 进来的数据包不会走到 ebtables 中。在 bridge check 点，会检查数据包进入的接口是否属于某个桥，如果是则走 ebtables，否则直接走 iptables。也就是说，ebtables 只对桥接网络生效。<br><strong>arptables</strong><br>arptables 是运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理地址解析协议(arp)数据包的过滤和转发。<br>arptables基于iptables开发，使用时也与iptables有些类似，都有“表（tables）”、“链（chain）”和“规则（rules）”三个层面。<br>但是arptables功能较单一，仅有filter一个表。并且，也只有INPUT（从内核2.4版）、OUTPUT（从内核2.4版）和FORWARD（从内核2.6版）三个内建链。arptables的主要用途之一是防范ARP欺骗。</p>\n<h3 id=\"基础结构\"><a href=\"#基础结构\" class=\"headerlink\" title=\"基础结构\"></a>基础结构</h3><p><strong>Netfilter</strong> 包含了一组内核钩子 API ，周边内核组件可以使用这些钩子在网络栈中注册回调函数。每一个在网络栈中流通的包到达相应的钩子时，就会触发相应的回调函数，从而能够完成包过滤、网络地址（端口）转换和网络包协议头修改等各种操作。<br>Netfilter 提供了五种钩子：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/Netfilter%20hooks.png\" alt=\"Netfilter hook\"></p>\n<ol>\n<li><code>NF_IP_PER_ROUNTING</code> — 当数据包到达计算机立即触发。</li>\n<li><code>NF_IP_LOCAL_IN</code> — 当数据包的目的地就是当前计算机时触发。</li>\n<li><code>NF_IP_FORWARD</code> — 当数据包目的地址是其它的网络接口时触发。</li>\n<li><code>NF_IP_POST_ROUTING</code> — 当数据包即将从计算机发出时触发。</li>\n<li><code>NF_IP_LOCAL_OUT</code> — 当数据包由本地生成并发向外部时触发。</li>\n</ol>\n<p>基于 Netfilter 钩子 API 实现的内核模块主要有 ebtables、arptables、ip(6)tables、nf_tables、NAT、connection tracking 等。如下架构图：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/Netfilter%E6%9E%B6%E6%9E%84.png\" alt=\"Netfilter\"></p>\n<p>而数据包在整个Netfilter中的数据流如下图：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/1920px-Netfilter-packet-flow.png\" alt=\"网络数据包流\"></p>\n<h3 id=\"建立规则和链\"><a href=\"#建立规则和链\" class=\"headerlink\" title=\"建立规则和链\"></a>建立规则和链</h3><p>通过向防火墙提供有关对来自某个源、到某个目的地或具有特定协议类型的信息包要做些什么的指令，规则控制信息包的过滤。 通过使用 netfilter/iptables 系统提供的特殊命令 iptables ，建立这些规则，并将其添加到内核空间的特定信息包过滤表内的链中。关于添加／除去／编辑规则的命令的一般语法如下：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables [-t table] command [match] [target]</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-A –append</td>\n<td>将一个或多个规则添加到所选链的末尾。</td>\n</tr>\n<tr>\n<td>-C –check</td>\n<td>检查与所选链中的规范匹配的规则。</td>\n</tr>\n<tr>\n<td>-D –delete</td>\n<td>从所选链中删除一个或多个规则。</td>\n</tr>\n<tr>\n<td>-F –flush</td>\n<td>逐个删除所有规则。</td>\n</tr>\n<tr>\n<td>-I –insert</td>\n<td>将一个或多个规则作为给定的规则编号插入所选链中。</td>\n</tr>\n<tr>\n<td>-L –list</td>\n<td>显示所选链中的规则。</td>\n</tr>\n<tr>\n<td>-n –numeric</td>\n<td>以数字格式显示IP地址或主机名和邮政编号。</td>\n</tr>\n<tr>\n<td>-N –new-chain <name></name></td>\n<td>创建一个新的用户定义链。</td>\n</tr>\n<tr>\n<td>-v –verbose</td>\n<td>与list选项一起使用时提供更多信息。</td>\n</tr>\n<tr>\n<td>-X –delete-chain <name></name></td>\n<td>删除用户定义的链。</td>\n</tr>\n</tbody></table>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除规则</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">iptables –flush</span><br><span class=\"line\">//设置链的默认策略</span><br><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">//指定IP源和网卡丢弃</span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp -s 192.168.100.1 -j DROP</span><br><span class=\"line\">//指定IP源和网卡tcp拒绝</span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp -s 192.168.100.1 -j REJECT --reject-with tcp-reset</span><br><span class=\"line\">//仅允许来自于192.168.100.0/24域的用户的ssh连接请求</span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp -s 192.168.100.0/24 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">//端口转发</span><br><span class=\"line\">iptables -t nat -A PREROUTING -p tcp -d 192.168.102.37 --dport 422 -j DNAT --to 192.168.102.37:22</span><br><span class=\"line\">//允许多端口访问，也支持端口段：22-443</span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp -m multiport --dports 22,80,443 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">//使用iptables nth将HTTPS流量负载平衡至两个不同的ip地址。</span><br><span class=\"line\">iptables -t nat -A PREROUTING -p tcp --dport 8000 -m state --state NEW -m statistic --mode nth --every 2 --packet 0 -j DNAT --to-destination 192.168.17.33:8001</span><br><span class=\"line\">iptables -t nat -A PREROUTING -p tcp --dport 8000 -m state --state NEW -m statistic --mode nth --every 2 --packet 1 -j DNAT --to-destination 192.168.17.33:8002</span><br><span class=\"line\">//防火墙服务器上的其中一个网卡连接到外部，另一个网卡连接到内部服务器，使用以下规则允许内部网络与外部网络的通信。此例中，eth1连接到外部网络(互联网)，eth0连接到内部网络(例如:192.168.1.x)。</span><br><span class=\"line\">iptables -A FORWARD -i eth0 -o eth1 -j ACCEPT</span><br><span class=\"line\">//按流量匹配ping次数。（--limit 10/minute表示一分钟产生10个令牌即6秒一个，--limit-burst 5表示令牌桶最多可以放5个令牌，此项默认值就是5。即实现了平均值(--limit)和峰值(--limit-burst)约束）</span><br><span class=\"line\">iptables -I INPUT 1 -p icmp -m limit --limit 10/minute --limit-burst 5 -j ACCEPT</span><br><span class=\"line\">//记录丢弃的数据表</span><br><span class=\"line\">iptables -N LOGGING</span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp -s 10.92.2.188 -j LOGGING</span><br><span class=\"line\">iptables -A LOGGING -m limit --limit 2/min -j LOG --log-prefix \"IPTables Packet Dropped: \" --log-level 4</span><br><span class=\"line\">iptables -A LOGGING -j DROP</span><br><span class=\"line\">cat /var/log/messages | grep IPTables #(centos) 根据syslog的配置来确定位置。</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"规则构成\"><a href=\"#规则构成\" class=\"headerlink\" title=\"规则构成\"></a>规则构成</h2><p>在我们执行一个iptables命令的时候，往往达到的效果，就是在某个表的某个链中添加某一条规则。而参与这条规则构成的包括表(table)、链（chain）、匹配(match)和目标（target）。下面将详细介绍这几个部分。</p>\n<h3 id=\"表-table\"><a href=\"#表-table\" class=\"headerlink\" title=\"表(table)\"></a>表(table)</h3><p>iptables里包含了4张表，分别是filter、nat、mangle和raw表。而表的作用在于存放规则，比如我们平时执行<code>iptables -nL</code>会得到类似的结果：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt source               destination         </span><br><span class=\"line\">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:80</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">target     prot opt source               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt source               destination</span><br></pre></td></tr></tbody></table></figure>\n\n<p>(policy XXX)表示着默认策略。表中包含的链，表示着表里的规则可生效的链范围。表和链有着如下关系：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/iptables-%E8%A1%A8%E5%92%8C%E9%93%BE.png\" alt=\"iptables的表和链\"></p>\n<h3 id=\"链-chain\"><a href=\"#链-chain\" class=\"headerlink\" title=\"链(chain)\"></a>链(chain)</h3><p>如果表是存放规则的地方，而链就是决定规则执行的时机，iptables中的5条链PREROUTING、INPUT、OUTPUT、FORWARD和POSTROUTING。而执行的位置也在简介中的netfilter hook原理中给出了。链把相应的表按照一定的顺序串起来，找出表里对应的规则进行执行。<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/%5Biptables-%E9%93%BE%E5%92%8C%E8%A1%A8.png\" alt=\"iptables-链和表\"></p>\n<h3 id=\"匹配-match\"><a href=\"#匹配-match\" class=\"headerlink\" title=\"匹配(match)\"></a>匹配(match)</h3><p><code>-m</code>或<code>--match</code>命令所做的工作，当然这部分我们称为扩展匹配，<code>-s -i</code>所执行的也是匹配工作，称为通用匹配。<br><strong>通用匹配</strong><br>类似<code>-s</code>这类的通用匹配，通常在用户态代码，和内核代码都包含了，不需要额外加载module。在iptables规则下发里，也是属于附加的基本参数。<br><strong>扩展匹配</strong><br>首先，我们在使用扩展匹配的时候，可以使用帮助文档：<code>iptables -m the_match_you_want --help</code>。扩展模块要工作的时候，都需要进行模块匹配，用户态匹配对应的libipt_xxx或libxt_xxx。内核态匹配对应的xt_xxx。比如我们使用的<code>-m state</code>在iptables命令执行时，会找<code>libxt_state.so</code>的动态库，规则下发到内核的时候，内核会找对应的<code>xt_state.ko</code>模块。具体源码实现后续会说明。<br>如果想自定义扩展匹配，那么需要写内核模块代码(参考内核模块源码的xt_multiport.c)和用户态模块代码(参考libxt_multiport.c)以及定义的头文件(参考xt_multiport.h)</p>\n<h3 id=\"目标-target\"><a href=\"#目标-target\" class=\"headerlink\" title=\"目标(target)\"></a>目标(target)</h3><p><code>-j</code>所做的工作，在包匹配成功后，就会执行<code>-j</code>后面的动作，来对包进行处理。</p>\n<h4 id=\"通用目标\"><a href=\"#通用目标\" class=\"headerlink\" title=\"通用目标\"></a>通用目标</h4><p><code>DROP</code>,<code>ACCEPT</code>,<code>QUEUE</code>和<code>RETURN</code>这几个属于通用匹配，他们同样以模块的形式进行加载和工作，对应的模块是<code>standard</code></p>\n<h4 id=\"扩展目标\"><a href=\"#扩展目标\" class=\"headerlink\" title=\"扩展目标\"></a>扩展目标</h4><p>扩展目标和扩展匹配也是相似的工作原理，都是进行模块加载。如果要写自定义模块，需要内核模块代码(参考xt_LOG.c)和用户态模块代码(参考libipt_LOG.c)和头文件(参考xt_LOG.h)</p>\n<h2 id=\"Netfilter源码实现\"><a href=\"#Netfilter源码实现\" class=\"headerlink\" title=\"Netfilter源码实现\"></a>Netfilter源码实现</h2><p>Netfilter的整体工作方式类似下图：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/iptables%E5%86%85%E6%A0%B8%E9%80%9A%E4%BF%A1.jpg\"></p>\n<h3 id=\"基本数据结构\"><a href=\"#基本数据结构\" class=\"headerlink\" title=\"基本数据结构\"></a>基本数据结构</h3><p>由于本人也没有精读源码，所以也只能介绍个大概，一切以源码为准。<br><strong>xt_table与xt_table_info</strong><br>xt_table是Netfilter的核心数据结构，它包含了每个表的所有规则信息，以及匹配处理方法。数据包进入Netfilter后通过查表，匹配相应的规则来决定对数据包的处理结果。下面是xt_table的完整定义（在X_tables.h中）：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_table</span> {</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">list</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* What hooks you will enter on */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> valid_hooks;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Man behind the curtain... */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_table_info</span> *<span class=\"title\">private</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Set this to THIS_MODULE if you are a module, otherwise NULL */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">module</span> *<span class=\"title\">me</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">u_int8_t</span> af;      <span class=\"comment\">/* address/protocol family */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> priority;     <span class=\"comment\">/* hook order */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* A unique name... */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> name[XT_TABLE_MAXNAMELEN];</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>每个成员意思见上文定义中的注释，个别成员说明如下：<br>valid_hooks：所支持的hook点类型，决定后续注册hook操作的位置。比如filter表的valid_hoos被指定为：(1 &lt;&lt; NF_INET_LOCAL_IN) | (1 &lt;&lt; NF_INET_FORWARD) | (1 &lt;&lt; NF_INET_LOCAL_OUT))，即在NF_INET_LOCAL_IN、NF_INET_FORWARD、NF_INET_LOCAL_OUT三处注册hook操作；<br>private：xt_table的数据区，包含了所有规则和规则处理方法等信息。xt_table_info详细信息见下文。</p>\n<p>xt_table的所有数据都存在private的成员变量中，private是结构体struct xt_table_info，其定义如下：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_table_info</span> {</span></span><br><span class=\"line\">    <span class=\"comment\">/* Size per table */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Number of entries: FIXME. --RR */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> number;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Initial number of entries. Needed for module usage count */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> initial_entries;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Entry points and underflows */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hook_entry[NF_INET_NUMHOOKS];</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> underflow[NF_INET_NUMHOOKS];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Number of user chains. Since tables cannot have loops, at most</span></span><br><span class=\"line\"><span class=\"comment\">     * @stacksize jumps (number of user chains) can possibly be made.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> stacksize;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> __percpu *stackptr;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> ***jumpstack;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* ipt_entry tables: one per CPU */</span></span><br><span class=\"line\">    <span class=\"comment\">/* Note : this field MUST be the last one, see XT_TABLE_INFO_SZ */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *entries[<span class=\"number\">1</span>];</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>重要成员说明：<br>hook_entry: 不同hook点的规则的偏移量；<br>entries： 规则存储的入口，为可变区域，必须放在结构末尾。entries本质上是ipt_entry结构。关于ipt_entry定义和成员介绍见下文。</p>\n<p><strong>ipt_entry</strong><br>ipt_entry结构是对规则的描述，其定义如下：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* This structure defines each of the firewall rules.  Consists of 3</span></span><br><span class=\"line\"><span class=\"comment\">   parts which are 1) general IP header stuff 2) match specific</span></span><br><span class=\"line\"><span class=\"comment\">   stuff 3) the target to perform if the rule matches */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_entry</span> {</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_ip</span> <span class=\"title\">ip</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Mark with fields that we care about. */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> nfcache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Size of ipt_entry + matches */</span></span><br><span class=\"line\">    <span class=\"keyword\">u_int16_t</span> target_offset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Size of ipt_entry + matches + target */</span></span><br><span class=\"line\">    <span class=\"keyword\">u_int16_t</span> next_offset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Back pointer */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> comefrom;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Packet and byte counters. */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_counters</span> <span class=\"title\">counters</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* The matches (if any), then the target. */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> elems[<span class=\"number\">0</span>];</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>成员elems中，保存了一条规则的所有匹配（matchs），以及匹配后的处理操作（target）。在Iptables.c中，generate_entry（）方法新建一个ipt_entry，可以看到如何将matchs和target添加到ipt_entry中的：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_entry</span> *</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">generate_entry</span>(<span class=\"title\">const</span> <span class=\"title\">struct</span> <span class=\"title\">ipt_entry</span> *<span class=\"title\">fw</span>,</span></span><br><span class=\"line\"><span class=\"class\">           <span class=\"title\">struct</span> <span class=\"title\">xtables_rule_match</span> *<span class=\"title\">matches</span>,</span></span><br><span class=\"line\"><span class=\"class\">           <span class=\"title\">struct</span> <span class=\"title\">ipt_entry_target</span> *<span class=\"title\">target</span>)</span></span><br><span class=\"line\"><span class=\"class\">{</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xtables_rule_match</span> *<span class=\"title\">matchp</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_entry</span> *<span class=\"title\">e</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    size = <span class=\"keyword\">sizeof</span>(struct ipt_entry);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (matchp = matches; matchp; matchp = matchp-&gt;next)</span><br><span class=\"line\">       size += matchp-&gt;match-&gt;m-&gt;u.match_size;</span><br><span class=\"line\"></span><br><span class=\"line\">    e = xtables_malloc(size + target-&gt;u.target_size);</span><br><span class=\"line\">    *e = *fw;</span><br><span class=\"line\">    e-&gt;target_offset = size;</span><br><span class=\"line\">    e-&gt;next_offset = size + target-&gt;u.target_size;</span><br><span class=\"line\"></span><br><span class=\"line\">    size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (matchp = matches; matchp; matchp = matchp-&gt;next) {</span><br><span class=\"line\">       <span class=\"built_in\">memcpy</span>(e-&gt;elems + size, matchp-&gt;match-&gt;m, matchp-&gt;match-&gt;m-&gt;u.match_size);</span><br><span class=\"line\">       size += matchp-&gt;match-&gt;m-&gt;u.match_size;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(e-&gt;elems + size, target, target-&gt;u.target_size);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>见上文的程序片段，ipt_entry的空间占用为：ipt_entry结构自身的size，加之所有match的size总和，加之target的size。填写elems时，首先将所有的match依次拷贝到elems指向的存储位置，紧接着将target拷贝到其后。下图是ipt_entry存储示意图：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/ipt_entry%E5%AD%98%E5%82%A8%E5%88%86%E5%B8%83%E7%A4%BA%E6%84%8F%E5%9B%BE.png\"></p>\n<p><strong>nf_hook_ops</strong><br>nf_hook_ops用于注册一个hook操作，它主要包含了hook操作执行函数、hook类型，以及优先级。我们可以认为，一个nf_hook_ops表征了一个表的一条链，因为它与一个表的一个hook类型唯一对应。其完整定义如下：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_hook_ops</span> {</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">list</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* User fills in from here down. */</span></span><br><span class=\"line\">    nf_hookfn *hook;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">module</span> *<span class=\"title\">owner</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">u_int8_t</span> pf;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hooknum;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Hooks are ordered in ascending priority. */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> priority;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>重要成员说明：<br>hook：hook操作函数；<br>owner：所属的表；<br>hooknum：hook类型；<br>priority：优先级，决定同一hook点，链（不同表在同一个hook点的链）的执行次序。</p>\n<p><strong>ipt_replace</strong><br>结构主要用于iptables的规则下发，在setsockopt进行规则下发时以此结构体作为传输数据。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* The argument to IPT_SO_SET_REPLACE. */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_replace</span> {</span></span><br><span class=\"line\">\t<span class=\"comment\">/* Which table. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[XT_TABLE_MAXNAMELEN];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Which hook entry points are valid: bitmask.  You can't</span></span><br><span class=\"line\"><span class=\"comment\">           change this. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> valid_hooks;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Number of entries */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_entries;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Total size of new entries */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Hook entry points. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hook_entry[NF_INET_NUMHOOKS];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Underflow points. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> underflow[NF_INET_NUMHOOKS];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Information about old entries: */</span></span><br><span class=\"line\">\t<span class=\"comment\">/* Number of counters (must be equal to current number of entries). */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_counters;</span><br><span class=\"line\">\t<span class=\"comment\">/* The old entries' counters. */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_counters</span> *<span class=\"title\">counters</span>;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"comment\">/* The entries (hang off end: not really an array). */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_entry</span> <span class=\"title\">entries</span>[0];</span></span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>重要成员说明：<br>entries：对应的扩展matches和target的数据集合，其组成方式就是上面对应ip_entry的介绍。</p>\n<h3 id=\"Netfilter内部数据包处理\"><a href=\"#Netfilter内部数据包处理\" class=\"headerlink\" title=\"Netfilter内部数据包处理\"></a>Netfilter内部数据包处理</h3><p>在简介中已经提到了netfilter的hook机制和hook点，现在我们来了解下具体流程。<br>首先，内核在收到ip包后，会进行一系列的操作，而hook的位置如下：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/ip%E6%8A%A5%E6%96%87hook%E7%82%B9.drawio.png\"><br>当我们对应的hook点有相应的注册函数时，就会进行相应的注册的hook函数调用：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * \tDeliver IP Packets to the higher protocol layers.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ip_local_deliver</span><span class=\"params\">(struct sk_buff *skb)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t *\tReassemble IP fragments.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ip_is_fragment(ip_hdr(skb))) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ip_defrag(skb, IP_DEFRAG_LOCAL_DELIVER))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> NF_HOOK(NFPROTO_IPV4, NF_INET_LOCAL_IN, <span class=\"literal\">NULL</span>, skb,</span><br><span class=\"line\">\t\t       skb-&gt;dev, <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t       ip_local_deliver_finish);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><em>ip_input.c</em><br>而实际的hook处理流程如下：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/Netfilter%E5%86%85%E9%83%A8%E6%95%B0%E6%8D%AE%E5%8C%85%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.drawio.png\"><br>这里主要的实现函数<code>nf_hook_slow</code></p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nf_hook_slow</span><span class=\"params\">(struct sk_buff *skb, struct nf_hook_state *state)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_hook_ops</span> *<span class=\"title\">elem</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> verdict;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* We may already have this, but read-locks nest anyway */</span></span><br><span class=\"line\">\trcu_read_lock();</span><br><span class=\"line\"></span><br><span class=\"line\">\telem = list_entry_rcu(&amp;nf_hooks[state-&gt;pf][state-&gt;hook],</span><br><span class=\"line\">\t\t\t      struct nf_hook_ops, <span class=\"built_in\">list</span>);</span><br><span class=\"line\">next_hook:</span><br><span class=\"line\">\tverdict = nf_iterate(&amp;nf_hooks[state-&gt;pf][state-&gt;hook], skb, state,</span><br><span class=\"line\">\t\t\t     &amp;elem);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (verdict == NF_ACCEPT || verdict == NF_STOP) {</span><br><span class=\"line\">\t\tret = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((verdict &amp; NF_VERDICT_MASK) == NF_DROP) {</span><br><span class=\"line\">\t\tkfree_skb(skb);</span><br><span class=\"line\">\t\tret = NF_DROP_GETERR(verdict);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tret = -EPERM;</span><br><span class=\"line\">\t} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((verdict &amp; NF_VERDICT_MASK) == NF_QUEUE) {</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> err = nf_queue(skb, elem, state,</span><br><span class=\"line\">\t\t\t\t   verdict &gt;&gt; NF_VERDICT_QBITS);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (err &lt; <span class=\"number\">0</span>) {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err == -ECANCELED)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> next_hook;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err == -ESRCH &amp;&amp;</span><br><span class=\"line\">\t\t\t   (verdict &amp; NF_VERDICT_FLAG_QUEUE_BYPASS))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> next_hook;</span><br><span class=\"line\">\t\t\tkfree_skb(skb);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\trcu_read_unlock();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这里的<code>nf_hooks[state-&gt;pf][state-&gt;hook]</code>中，<code>state-&gt;pf</code>是对应的协议，比如<code>NFPROTO_IPV4</code>, <code>state-&gt;hook</code>表示hook的点，比如<code>NF_INET_LOCAL_IN</code>。而nf_hooks是一个全局变量，包含了所有的注册hook。<br>在进入到<code>ipt_do_table</code>函数后，会进行包的匹配和处理，流程如下：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/netfilter%E5%8C%85%E8%BF%87%E6%BB%A4.drawio.png\"><br><code>ipt_do_table</code>会先匹配基本match，再匹配扩展match，匹配成功后，进行基础target或扩展target的处理。如果匹配不成功，则会一直匹配直到所有matches匹配完。这也导致了iptables规则在命中一条规则后，后续的规则都不会再进行匹配了(除非你target指向其他链)。<br>内部数据包处理大概如上所说，但是我们仍然抱有疑惑，hook函数哪里来？扩展match怎么生效等。这就要归功于netfilter的注册机制。</p>\n<h3 id=\"Netfilter模块注册\"><a href=\"#Netfilter模块注册\" class=\"headerlink\" title=\"Netfilter模块注册\"></a>Netfilter模块注册</h3><p>模块注册的时机是在模块加载的时候，而模块加载分系统启动时加载，即系统启动时加载netfilter以及编译到内核的模块。<br>而没有编译到内核，而是以独立模块存在的netfilter模块，则会在规则下发的时候，会根据你传入的match或target名称到对应的路径下寻找，并载入模块。<br>netfilter在设计的时候，就设计了强大的模块加载机制，因此也表现出强大的扩展性。<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/Netfilter%E6%89%A9%E5%B1%95%E6%9C%BA%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png\"><br>本质上，模块加载结构都是相似的。我们就以<code>iptable_filter.c</code>为例，讲解一下hook的注册过程。<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/netfilter%E6%A8%A1%E5%9D%97%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B.drawio.png\"><br>对应的部分<code>iptable_filter.c</code>代码：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_table</span> <span class=\"title\">packet_filter</span> = {</span></span><br><span class=\"line\">\t.name\t\t= <span class=\"string\">\"filter\"</span>,</span><br><span class=\"line\">\t.valid_hooks\t= FILTER_VALID_HOOKS,</span><br><span class=\"line\">\t.me\t\t= THIS_MODULE,</span><br><span class=\"line\">\t.af\t\t= NFPROTO_IPV4,</span><br><span class=\"line\">\t.priority\t= NF_IP_PRI_FILTER,</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">iptable_filter_hook(<span class=\"keyword\">const</span> struct nf_hook_ops *ops, struct sk_buff *skb,</span><br><span class=\"line\">\t\t    <span class=\"keyword\">const</span> struct net_device *in, <span class=\"keyword\">const</span> struct net_device *out,</span><br><span class=\"line\">\t\t    <span class=\"keyword\">const</span> struct nf_hook_state *state)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">net</span> *<span class=\"title\">net</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ops-&gt;hooknum == NF_INET_LOCAL_OUT &amp;&amp;</span><br><span class=\"line\">\t    (skb-&gt;len &lt; <span class=\"keyword\">sizeof</span>(struct iphdr) ||</span><br><span class=\"line\">\t     ip_hdrlen(skb) &lt; <span class=\"keyword\">sizeof</span>(struct iphdr)))</span><br><span class=\"line\">\t\t<span class=\"comment\">/* root is playing with raw sockets. */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> NF_ACCEPT;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnet = dev_net(state-&gt;in ? state-&gt;in : state-&gt;out);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ipt_do_table(skb, ops-&gt;hooknum, state, net-&gt;ipv4.iptable_filter);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">iptable_filter_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = register_pernet_subsys(&amp;iptable_filter_net_ops);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Register hooks */</span></span><br><span class=\"line\">\tfilter_ops = xt_hook_link(&amp;packet_filter, iptable_filter_hook);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (IS_ERR(filter_ops)) {</span><br><span class=\"line\">\t\tret = PTR_ERR(filter_ops);</span><br><span class=\"line\">\t\tunregister_pernet_subsys(&amp;iptable_filter_net_ops);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __<span class=\"function\"><span class=\"built_in\">exit</span> <span class=\"title\">iptable_filter_fini</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\txt_hook_unlink(&amp;packet_filter, filter_ops);</span><br><span class=\"line\">\tunregister_pernet_subsys(&amp;iptable_filter_net_ops);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(iptable_filter_init);</span><br><span class=\"line\">module_exit(iptable_filter_fini);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>netfilter注册的逻辑依赖内核模块注册。内核模块加载的时候，会自动调用module_init，在iptable_filter中，调用<code>iptable_filter_init</code>，执行<code>xt_hook_link</code>函数，将<code>packet_filter</code>全局量挂载到<code>nf_hooks</code>全局量。实际包过滤的时候，就会根据<code>nf_hooks</code>来调用注册的hook。<br>以上就是hook的注册过程，实际在看源码中，match和target等注册过程也是类似的，通过module_init将模块文件的变量注册到全局量中。</p>\n<h3 id=\"iptables规则下发\"><a href=\"#iptables规则下发\" class=\"headerlink\" title=\"iptables规则下发\"></a>iptables规则下发</h3><p>内核空间与用户空间的数据交互通过getsockopt和setsockopt来完成，这个两个函数用来控制相关socket文件描述符的的选项值。先来看这两个函数的原型：<br>set/getsockopt(2)函数的基本使用格式为：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int setsockopt(int sockfd, int proto, int cmd, void *data, int datalen)</span><br><span class=\"line\">int getsockopt(int sockfd, int proto, int cmd, void *data, int datalen)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在调用<code>setsockopt</code>函数时，实际执行的流程如下：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/%E8%A7%84%E5%88%99%E6%8F%90%E4%BA%A4%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png\"><br>上图中，从setsockopt()到ip_setsockopt()是常规的setsockopt调用流程；在新的流程中，Netfilter加入的自己的处理函数nf_setsockopt()。<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/setsockopt%E6%B5%81%E7%A8%8B%E5%9B%BE.drawio.png\"><br>上图中，核心函数<code>do_replace</code>，进行的数据拷贝传输，源码如下：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">do_replace(struct net *net, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> __user *user, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> len)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_replace</span> <span class=\"title\">tmp</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_table_info</span> *<span class=\"title\">newinfo</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *loc_cpu_entry;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_entry</span> *<span class=\"title\">iter</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (copy_from_user(&amp;tmp, user, <span class=\"keyword\">sizeof</span>(tmp)) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -EFAULT;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* overflow check */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tmp.num_counters &gt;= INT_MAX / <span class=\"keyword\">sizeof</span>(struct xt_counters))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tmp.num_counters == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttmp.name[<span class=\"keyword\">sizeof</span>(tmp.name)<span class=\"number\">-1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnewinfo = xt_alloc_table_info(tmp.size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!newinfo)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\"></span><br><span class=\"line\">\tloc_cpu_entry = newinfo-&gt;entries;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (copy_from_user(loc_cpu_entry, user + <span class=\"keyword\">sizeof</span>(tmp),</span><br><span class=\"line\">\t\t\t   tmp.size) != <span class=\"number\">0</span>) {</span><br><span class=\"line\">\t\tret = -EFAULT;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> free_newinfo;</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = translate_table(net, newinfo, loc_cpu_entry, &amp;tmp);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> free_newinfo;</span><br><span class=\"line\"></span><br><span class=\"line\">\tduprintf(<span class=\"string\">\"Translated table\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = __do_replace(net, tmp.name, tmp.valid_hooks, newinfo,</span><br><span class=\"line\">\t\t\t   tmp.num_counters, tmp.counters);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret)</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> free_newinfo_untrans;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> free_newinfo_untrans:</span><br><span class=\"line\">\txt_entry_foreach(iter, loc_cpu_entry, newinfo-&gt;size)</span><br><span class=\"line\">\t\tcleanup_entry(iter, net);</span><br><span class=\"line\"> free_newinfo:</span><br><span class=\"line\">\txt_free_table_info(newinfo);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>从源码可以看到，iptables和内核间的通信，就是通过调用<code>copy_from_user</code>函数进行数据拷贝来完成的。而拷贝的核心数据结构，就是上面介绍过的<code>ipt_replace</code>结构。<br>至此，Netfilter源码实现的主要流程就介绍完了，更多的细节可自行阅读源码。</p>\n<h2 id=\"自定义match\"><a href=\"#自定义match\" class=\"headerlink\" title=\"自定义match\"></a>自定义match</h2><p>主要是为了练习，功能就是命中后打印输出一下。<br>要实现一个iptables的自定义功能，那么，我应该产生三个文件libipt_xx.c、ipt_xx.c和ipt_xx.h(ipt更换为xt一样有效)，并放到对应目录中：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipt_xx.c   -&gt; /&lt;linux-kernel-src&gt;/net/ipv4/netfilter/</span><br><span class=\"line\">ipt_xx.h   -&gt; /&lt;linux-kernel-src&gt;/include/uapi/linux/netfilter_ipv4</span><br><span class=\"line\">libipt_xx.c   -&gt; /usr/local/src/iptables-x.x.x/extensions/</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然后再分别编译内核部分ipt_xx.c和ipt_xx.h源码及用户部分libipt_xx.c源码。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p><strong>内核源码下载</strong><br>通用的linux内核源码的<a href=\"https://www.kernel.org/\" target=\"_blank\" rel=\"noopener\">下载</a><br>centos/redhat的内核在上面找不到对应的，他们是自己维护的版本，下载方法如下：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 先复制及设定 centos-common 源码</span><br><span class=\"line\">[user@host ~]$ git clone  https://git.centos.org/centos-git-common.git</span><br><span class=\"line\">[user@host ~]$ git clone https://git.centos.org/rpms/kernel.git ; cd kernel</span><br><span class=\"line\"># 让我们存取 cenots7 内核</span><br><span class=\"line\">[user@host kernel]$ git checkout c7 </span><br><span class=\"line\"># get_sources会根据你的电脑内核版本，匹配对应的源码。</span><br><span class=\"line\">[user@host kernel]$ ~/centos-git-common/get_sources.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果你对特定分支感兴趣，也可以下载特定分支：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b c7 --single-branch https://git.centos.org/rpms/kernel.git</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这里的内核源码也包含了Netfilter的内核源码。</p>\n<p><strong>iptables源码：</strong><br><em>本文使用的是iptables v1.14.21版本，对应的源码也是这个版本</em> <a href=\"https://www.netfilter.org/projects/iptables/downloads.html\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n<h3 id=\"自定义match源码\"><a href=\"#自定义match源码\" class=\"headerlink\" title=\"自定义match源码\"></a>自定义match源码</h3><p>内核部分：xt_test.c</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr_fmt(fmt) KBUILD_MODNAME <span class=\"meta-string\">\": \"</span> fmt</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/module.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/udp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/skbuff.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/kernel.h&gt;  </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter/xt_test.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter/x_tables.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter_ipv4/ip_tables.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter_ipv6/ip6_tables.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">\"GPL\"</span>);</span><br><span class=\"line\">MODULE_AUTHOR(<span class=\"string\">\"Netfilter Core Team &lt;coreteam@netfilter.org&gt;\"</span>);</span><br><span class=\"line\">MODULE_DESCRIPTION(<span class=\"string\">\"Xtables: multiple port matching for TCP, UDP, UDP-Lite, SCTP and DCCP\"</span>);</span><br><span class=\"line\">MODULE_ALIAS(<span class=\"string\">\"ipt_test\"</span>);</span><br><span class=\"line\">MODULE_ALIAS(<span class=\"string\">\"ip6t_test\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">test_mt(<span class=\"keyword\">const</span> struct sk_buff *skb, struct xt_action_param *par)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_test</span> *<span class=\"title\">testinfo</span> = <span class=\"title\">par</span>-&gt;<span class=\"title\">matchinfo</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iphdr</span> *<span class=\"title\">ip</span>;</span></span><br><span class=\"line\">\tip = ip_hdr(skb);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (testinfo-&gt;s_addr == ip-&gt;saddr){</span><br><span class=\"line\">\t\tprintk(<span class=\"string\">\"match ip [%s]\"</span>,ip-&gt;saddr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">check(<span class=\"keyword\">u_int16_t</span> proto)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> proto == IPPROTO_TCP;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> *</span><br><span class=\"line\">inet_ntoa(struct in_addr ina)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"keyword\">sizeof</span> <span class=\"string\">\"aaa.bbb.ccc.ddd\"</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *ucp = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)&amp;ina;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(buf, <span class=\"string\">\"%d.%d.%d.%d\"</span>,</span><br><span class=\"line\">\t\tucp[<span class=\"number\">0</span>] &amp; <span class=\"number\">0xff</span>,</span><br><span class=\"line\">\t\tucp[<span class=\"number\">1</span>] &amp; <span class=\"number\">0xff</span>,</span><br><span class=\"line\">\t\tucp[<span class=\"number\">2</span>] &amp; <span class=\"number\">0xff</span>,</span><br><span class=\"line\">\t\tucp[<span class=\"number\">3</span>] &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> buf;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">test_mt_check</span><span class=\"params\">(<span class=\"keyword\">const</span> struct xt_mtchk_param *par)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_ip</span> *<span class=\"title\">ip</span> = <span class=\"title\">par</span>-&gt;<span class=\"title\">entryinfo</span>;</span></span><br><span class=\"line\">\tprintk(<span class=\"string\">\"input ip:%s\"</span>, inet_ntoa(ip-&gt;src));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_match</span> <span class=\"title\">test_mt_reg</span> __<span class=\"title\">read_mostly</span> = {</span></span><br><span class=\"line\">\t.name\t\t= <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">\t.family\t\t= NFPROTO_IPV4,</span><br><span class=\"line\">\t.revision\t= <span class=\"number\">1</span>,</span><br><span class=\"line\">\t.checkentry\t= test_mt_check,</span><br><span class=\"line\">\t.match\t\t= test_mt,</span><br><span class=\"line\">\t.matchsize\t= <span class=\"keyword\">sizeof</span>(struct xt_test),</span><br><span class=\"line\">\t.me\t\t= THIS_MODULE,</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">test_mt_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\tprintk(<span class=\"string\">\"test module init sucess\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> xt_register_match(&amp;test_mt_reg);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __<span class=\"function\"><span class=\"built_in\">exit</span> <span class=\"title\">test_mt_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\txt_unregister_match(&amp;test_mt_reg);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(test_mt_init);</span><br><span class=\"line\">module_exit(test_mt_exit);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用户部分：libxt_test.c</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;xtables.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits.h&gt; /* INT_MAX in ip_tables.h/ip6_tables.h */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter_ipv4/ip_tables.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter_ipv6/ip6_tables.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter/xt_test.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> {</span><br><span class=\"line\">\tO_SOURCE_PORTS = <span class=\"number\">0</span>,</span><br><span class=\"line\">\tO_DEST_PORTS,</span><br><span class=\"line\">\tO_SD_PORTS,</span><br><span class=\"line\">\tF_SOURCE_PORTS = <span class=\"number\">1</span> &lt;&lt; O_SOURCE_PORTS,</span><br><span class=\"line\">\tF_DEST_PORTS   = <span class=\"number\">1</span> &lt;&lt; O_DEST_PORTS,</span><br><span class=\"line\">\tF_SD_PORTS     = <span class=\"number\">1</span> &lt;&lt; O_SD_PORTS,</span><br><span class=\"line\">\tF_ANY          = F_SOURCE_PORTS | F_DEST_PORTS | F_SD_PORTS,</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Function which prints out usage message. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test_help</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(</span><br><span class=\"line\"><span class=\"string\">\"test match options:\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\" --source-ip [ip]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\" NOTE: just for test.\\n\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_option_entry</span> <span class=\"title\">test_opts</span>[] = {</span></span><br><span class=\"line\">\t{.name = <span class=\"string\">\"source-ip\"</span>, .id = O_SOURCE_PORTS, .type = XTTYPE_STRING,</span><br><span class=\"line\">\t .excl = F_ANY, .flags = XTOPT_INVERT},</span><br><span class=\"line\">\tXTOPT_TABLEEND,</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *</span><br><span class=\"line\">proto_to_name(<span class=\"keyword\">uint8_t</span> proto)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (proto) {</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> IPPROTO_TCP:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"tcp\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">parse_srource_ip(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *portstring)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *buffer;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">addr</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tbuffer = strdup(portstring);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!buffer) xtables_error(OTHER_PROBLEM, <span class=\"string\">\"strdup failed\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!inet_aton(buffer, &amp;addr)) xtables_error(OTHER_PROBLEM, <span class=\"string\">\"ip not vaild\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(buffer);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)addr.s_addr;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *</span><br><span class=\"line\">check_proto(<span class=\"keyword\">uint16_t</span> pnum, <span class=\"keyword\">uint8_t</span> invflags)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *proto;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (invflags &amp; XT_INV_PROTO)</span><br><span class=\"line\">\t\txtables_error(PARAMETER_PROBLEM,</span><br><span class=\"line\">\t\t\t   <span class=\"string\">\"test only works with TCP, UDP, UDPLITE, SCTP and DCCP\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((proto = proto_to_name(pnum)) != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> proto;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!pnum)</span><br><span class=\"line\">\t\txtables_error(PARAMETER_PROBLEM,</span><br><span class=\"line\">\t\t\t   <span class=\"string\">\"test needs `-p tcp', `-p udp', `-p udplite', \"</span></span><br><span class=\"line\">\t\t\t   <span class=\"string\">\"`-p sctp' or `-p dccp'\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\txtables_error(PARAMETER_PROBLEM,</span><br><span class=\"line\">\t\t\t   <span class=\"string\">\"test only works with TCP, UDP, UDPLITE, SCTP and DCCP\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __test_parse(struct xt_option_call *cb, <span class=\"keyword\">uint16_t</span> pnum,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">uint8_t</span> invflags)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *proto;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_test</span> *<span class=\"title\">multiinfo</span> = <span class=\"title\">cb</span>-&gt;<span class=\"title\">data</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\txtables_option_parse(cb);</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (cb-&gt;entry-&gt;id) {</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> O_SOURCE_PORTS:</span><br><span class=\"line\">\t\t<span class=\"comment\">//proto = check_proto(pnum, invflags);</span></span><br><span class=\"line\">\t\tmultiinfo-&gt;s_addr = (__be32)parse_srource_ip(cb-&gt;arg);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cb-&gt;invert)</span><br><span class=\"line\">\t\txtables_error(PARAMETER_PROBLEM,</span><br><span class=\"line\">\t\t\t   <span class=\"string\">\"test.0 does not support invert\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test_parse</span><span class=\"params\">(struct xt_option_call *cb)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_entry</span> *<span class=\"title\">entry</span> = <span class=\"title\">cb</span>-&gt;<span class=\"title\">xt_entry</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __test_parse(cb,</span><br><span class=\"line\">\t       entry-&gt;ip.proto, entry-&gt;ip.invflags);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test_check</span><span class=\"params\">(struct xt_fcheck_call *cb)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cb-&gt;xflags == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\txtables_error(PARAMETER_PROBLEM, <span class=\"string\">\"test expection an option\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">__test_print(<span class=\"keyword\">const</span> struct xt_entry_match *match, <span class=\"keyword\">int</span> numeric,</span><br><span class=\"line\">                  <span class=\"keyword\">uint16_t</span> proto)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_test</span> *<span class=\"title\">multiinfo</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t= (<span class=\"title\">const</span> <span class=\"title\">struct</span> <span class=\"title\">xt_test</span> *)<span class=\"title\">match</span>-&gt;<span class=\"title\">data</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">addr</span>;</span></span><br><span class=\"line\">\taddr.s_addr = (<span class=\"keyword\">in_addr_t</span>)multiinfo-&gt;s_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" test \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,inet_ntoa(addr));</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test_print</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *ip_void,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">const</span> struct xt_entry_match *match, <span class=\"keyword\">int</span> numeric)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_ip</span> *<span class=\"title\">ip</span> = <span class=\"title\">ip_void</span>;</span></span><br><span class=\"line\">\t__test_print(match, numeric, ip-&gt;proto);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __test_save(<span class=\"keyword\">const</span> struct xt_entry_match *match,</span><br><span class=\"line\">                             <span class=\"keyword\">uint16_t</span> proto)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_test</span> *<span class=\"title\">multiinfo</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t= (<span class=\"title\">const</span> <span class=\"title\">struct</span> <span class=\"title\">xt_test</span> *)<span class=\"title\">match</span>-&gt;<span class=\"title\">data</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">addr</span>;</span></span><br><span class=\"line\">\taddr.s_addr = (<span class=\"keyword\">in_addr_t</span>)multiinfo-&gt;s_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" test \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,inet_ntoa(addr));</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test_save</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *ip_void,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">const</span> struct xt_entry_match *match)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_ip</span> *<span class=\"title\">ip</span> = <span class=\"title\">ip_void</span>;</span></span><br><span class=\"line\">\t__test_save(match, ip-&gt;proto);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xtables_match</span> <span class=\"title\">test_mt_reg</span> = {</span></span><br><span class=\"line\">\t.family        = NFPROTO_IPV4,</span><br><span class=\"line\">\t.name          = <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">\t.revision      = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t.version       = XTABLES_VERSION,</span><br><span class=\"line\">\t.size          = XT_ALIGN(<span class=\"keyword\">sizeof</span>(struct xt_test)),</span><br><span class=\"line\">\t.userspacesize = XT_ALIGN(<span class=\"keyword\">sizeof</span>(struct xt_test)),</span><br><span class=\"line\">\t.help          = test_help,</span><br><span class=\"line\">\t.x6_parse      = test_parse,</span><br><span class=\"line\">\t.x6_fcheck     = test_check,</span><br><span class=\"line\">\t.print         = test_print,</span><br><span class=\"line\">\t.save          = test_save,</span><br><span class=\"line\">\t.x6_options    = test_opts,</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">_init(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">{</span><br><span class=\"line\">\txtables_register_match(&amp;test_mt_reg);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>头文件：xt_test.h</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _XT_TEST_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _XT_TEST_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Must fit inside union xt_matchinfo: 16 bytes */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_test</span> {</span></span><br><span class=\"line\">\t__be32\ts_addr;\t\t\t\t<span class=\"comment\">/* Type of comparison */</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/*_XT_MULTIPORT_H*/</span></span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>首先把对应的文件放到对应的位置：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xt_test.c   -&gt; /&lt;linux-kernel-src&gt;/net/ipv4/netfilter/</span><br><span class=\"line\">xt_test.h   -&gt; /&lt;linux-kernel-src&gt;/include/uapi/linux/netfilter_ipv4</span><br><span class=\"line\">libxt_test.c   -&gt; /&lt;iptables-x.x.x&gt;/extensions/</span><br></pre></td></tr></tbody></table></figure>\n\n<p>用户态源码编译：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./autogen.sh</span><br><span class=\"line\">./configure --prefix=/usr/local/iptables</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></tbody></table></figure>\n\n<p>内核源码编译：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;your_kernel_src_path&gt;/net/netfilter</span><br><span class=\"line\">#修改Makefile，新增：obj-$(CONFIG_NETFILTER_XT_MATCH_TEST) += xt_test.o</span><br><span class=\"line\">make CONFIG_NETFILTER_XT_MATCH_TEST=m -C &lt;your_kernel_src_path&gt;  M=`pwd` modules</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果出现<code>No rule to make target 'tools/objtool/objtool'</code>的错误：</p>\n<ol>\n<li><code>yum install kernel-headers kernel-devel -y</code></li>\n<li>找到<code>/usr/src/kernels/</code>下安装的tools/objtool/objtool/objtool，将可执行文件拷贝到你的内核源码对应目录。</li>\n<li>重新执行make</li>\n</ol>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ol>\n<li><p>先把编译得到的<code>xt_test.ko</code>放到<code>/usr/lib/modules/3.10.0.xxxx/kernel/net/netfilter/</code>目录下。</p>\n</li>\n<li><p>添加iptables规则：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/iptables/sbin/iptables -A INPUT -p tcp -m test --source-ip &lt;ip&gt; -j DROP</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>使用你配置了的<code>&lt;ip&gt;</code>地址的机器来访问目标机器(tcp)</p>\n</li>\n<li><p><code>dmesg</code>命令来查看打印输出的消息。</p>\n</li>\n</ol>\n<p>如果出现<code>Couldn't load match 'test11':No such file or directory</code>证明你用户态代码，没有找到你编译的模块。<br>如果出现<code>iptables:No chain/target/match by the name</code>证明你内核相应的模块没有嵌入。<br>如果<code>dmesg</code>没有显示出你想要的信息，可能是输出日志级别不够，尝试：<code>dmesg -n 7</code>；或者是存在缓存，尝试删除原有iptables规则，重新配置，之前的日志消息就打印了。</p>\n<h2 id=\"链接跟踪-conntrack\"><a href=\"#链接跟踪-conntrack\" class=\"headerlink\" title=\"链接跟踪(conntrack)\"></a>链接跟踪(conntrack)</h2><p>功能就是给链接做标识。这一章节主要都是参考(也就是抄[狗头])Netfilter<a href=\"http://blog.chinaunix.net/uid-26517122-id-4281274.html\" target=\"_blank\" rel=\"noopener\">链接跟踪简介</a>(想看更详细内容最好看原文，我这里只是简单截取了主要核心部分，就不重复copy了)，他其他的netfilter相关的解析也写的挺好，建议去看看。</p>\n<h4 id=\"conntrack介绍\"><a href=\"#conntrack介绍\" class=\"headerlink\" title=\"conntrack介绍\"></a>conntrack介绍</h4><p> 我们期望一种场景，即外网无法访问内网，但是内网能够访问外网。但配置了拒绝所有外网来的数据包以后，内网访问外网返回的包也无法进入内网，导致内网访问外网失败。因此我们可以利用conntrack(链接跟踪)来解决这一问题。<br>通用的数据访问方式分两种：</p>\n<ol>\n<li>TCP这种面向连接的协议，源和目的的连接终止时，状态防火墙通过检查TCP头的控制标记来跟踪整个过程，并动态地将该连接从状态表中删除。</li>\n<li>DP和ICMP不是面向连接的协议，无法通过报文来判断连接是否终止。状态防火墙会把将UDP流量看成是有连接的，通过在状态表中设置一个定时器，来定期的老化删除一些无用连接。</li>\n</ol>\n<p>期望连接：<br>有一些协议，连接时会分为控制连接和数据连接，我们把数据连接称为是控制连接的期望连接。<br>我们以tftp协议为例来说明一下期望连接：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/%E6%9C%9F%E6%9C%9B%E9%93%BE%E6%8E%A5.jpg\"><br>如果，客户端先发起连接，使用熟知的69端口。因为69端口是分给了tftp server的，tftp server接收到连接请求后，会自己申请一个server主机上未用的端口1235（因为tftp server的69端口还需要接收其他client发来的连接请求，所有不能使用69来传输数据），给tftp client发送回应。以后client和server就使用端口1235来进行通信了。<br>现在来看，上面连接是两条不同的连接。我们把第二条连接是其一条连接的期望连接。<br>比如防火墙上只放开了目的端口号69的访问，当内网访问外网的tftp server时，回应报文就会被拦截，导致tftp 功能失效。状态防火墙提出期望连接，当回应报文根据目的端口号发现该回应是已存在连接的期望连接，防火墙放过该回应报文，这样tftp功能OK。<br>做个实验：<br>在一台主机上配置如下规则：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables  -P  INPUT DROP   //丢弃所有到本机的报文</span><br><span class=\"line\">iptables -A INPUT -p udp --dport 69 -j ACCEPT //放行目的端口69的报文</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这时把该主机当tftp client，从tftp server下载东西是无法下载的。</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A INPUT -m conntrack --ctstatus EXPECTED -j ACCEPT//放行期望连接</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这时tftp功能OK。</p>\n<p>因此，为了满足上述需求，链接跟踪实现了以下功能：</p>\n<ol>\n<li>建立一张连接状态表，来存放连接记录</li>\n<li>连接状态表中，有定时的垃圾回收机制</li>\n<li>根据报文进行连接状态的建立及对已有连接状态的更新</li>\n<li>期望连接的建立和关联</li>\n<li>在连接跟踪上需要提供易于扩展的接口，来实现用户自定义的一些功能。<br>下面本文将从两个方向来描述链接跟踪，一是从模块扩展上，模块如何注册到conntrack中，提供报文的处理方法；第二是数据流上，报文时如何一步步的在netfilter框架中流动，被conntrack处理的。</li>\n</ol>\n<h3 id=\"conntrack标识\"><a href=\"#conntrack标识\" class=\"headerlink\" title=\"conntrack标识\"></a>conntrack标识</h3><p>连接跟踪是根据报文的L3，L4层头信息来标识一条连接的，而这些标识需要一个数据结构来进行定义和存储。改数据结构包含了一条连接的全部信息，并且链接跟踪的查找，建立，关联和更新都是依据该数据结构，我们称该数据结构为元组。<br><strong>元组数据结构：</strong></p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_tuple</span></span></span><br><span class=\"line\"><span class=\"class\">{</span></span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_man</span> <span class=\"title\">src</span>;</span>  <span class=\"comment\">//源端信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//目的端信息。</span></span><br><span class=\"line\">    <span class=\"comment\">/* These are the parts of the tuple which are fixed. */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">        <span class=\"keyword\">union</span> nf_inet_addr u3;  <span class=\"comment\">//目的IP地址</span></span><br><span class=\"line\">　　  <span class=\"comment\">//目的端口的信息，不同协议使用不同的报文字段</span></span><br><span class=\"line\">        <span class=\"keyword\">union</span> {</span><br><span class=\"line\">             <span class=\"comment\">/* Add other protocols here. */</span></span><br><span class=\"line\">            __be16 all;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">                __be16 port;<span class=\"comment\">//TCP报文就使用目的端口</span></span><br><span class=\"line\">            } tcp;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">                 __be16 port;<span class=\"comment\">//UDP报文就使用目的端口</span></span><br><span class=\"line\">            } udp;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">                <span class=\"keyword\">u_int8_t</span> type, code;<span class=\"comment\">//ICMPP报文使用type，cod两个字段</span></span><br><span class=\"line\">            } icmp;</span><br><span class=\"line\">            ... <span class=\"comment\">//其他协议此处省略</span></span><br><span class=\"line\">        } u;</span><br><span class=\"line\">        <span class=\"comment\">//传输层协议类型，既L4协议类型</span></span><br><span class=\"line\">        <span class=\"keyword\">u_int8_t</span> protonum;</span><br><span class=\"line\">        <span class=\"comment\">//标识连接的方向，一条连接分两个方向，一来一回</span></span><br><span class=\"line\">        <span class=\"comment\">/* The direction (for tuplehash) */</span></span><br><span class=\"line\">        <span class=\"keyword\">u_int8_t</span> dir;</span><br><span class=\"line\">    } dst;</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_man</span></span></span><br><span class=\"line\"><span class=\"class\">{</span></span><br><span class=\"line\">     <span class=\"keyword\">union</span> nf_inet_addr u3; <span class=\"comment\">//IP地址</span></span><br><span class=\"line\">    <span class=\"comment\">//L4协议源端信息</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> nf_conntrack_man_proto u;</span><br><span class=\"line\">    <span class=\"comment\">//L3协议类型</span></span><br><span class=\"line\">    <span class=\"keyword\">u_int16_t</span> l3num;</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//L4层源端的信息。</span></span><br><span class=\"line\"><span class=\"keyword\">union</span> nf_conntrack_man_proto</span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"comment\">/* Add other protocols here. */</span></span><br><span class=\"line\">    __be16 all;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">        __be16 port;</span><br><span class=\"line\">    } tcp;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">        __be16 port;</span><br><span class=\"line\">    } udp;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">        __be16 id;</span><br><span class=\"line\">    } icmp;</span><br><span class=\"line\">    .... <span class=\"comment\">//其他协议此处省略</span></span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>从上面数据结构定义看，标识一条连接的元组为：<br>TCP  源IP，源端口，L3协议类型，目的IP，目的端口号，L4协议类型<br>UDP  源IP，源端口，L3协议类型，目的IP，目的端口号，L4协议类型<br>ICMP 源IP，L3协议类型，目的IP，id，type，code,，L4协议类型</p>\n<p><strong>conntrack数据结构：</strong><br>一个连接包含正反两个方向的两条报文流.</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conn</span> {</span></span><br><span class=\"line\">    <span class=\"comment\">//对连接的引用计数</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack</span> <span class=\"title\">ct_general</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">spinlock_t</span> lock;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//正向和反向的连接元组信息。</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_tuple_hash</span> <span class=\"title\">tuplehash</span>[<span class=\"title\">IP_CT_DIR_MAX</span>];</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//该连接的连接状态</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> status;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果该连接是期望连接，指向跟其关联的主连接</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conn</span> *<span class=\"title\">master</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//连接垃圾回收定时器</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timer_list</span> <span class=\"title\">timeout</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*存储特定协议的连接跟踪信息*/</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> nf_conntrack_proto proto;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*指向扩展结构，该结构中包含一些基于连接的功能扩展处理函数 */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_ct_ext</span> *<span class=\"title\">ext</span>;</span></span><br><span class=\"line\">   <span class=\"comment\">//网络命名空间</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">net</span> *<span class=\"title\">ct_net</span>;</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_tuple_hash</span> {</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_nulls_node</span> <span class=\"title\">hnnode</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_tuple</span> <span class=\"title\">tuple</span>;</span></span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>每个struct nf_conn实例代表一个连接。每个skb都有一个指针，指向和它相关联的连接。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sk_buff</span> {</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack</span> *<span class=\"title\">nfct</span>;</span><span class=\"comment\">//指向struct nf_conn实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tkmemcheck_bitfield_begin(flags1);</span><br><span class=\"line\">\t__u8 local_df:<span class=\"number\">1</span>,</span><br><span class=\"line\">\tcloned:<span class=\"number\">1</span>,</span><br><span class=\"line\">\tip_summed:<span class=\"number\">2</span>,</span><br><span class=\"line\">\tnohdr:<span class=\"number\">1</span>,</span><br><span class=\"line\">\tnfctinfo:<span class=\"number\">3</span>; <span class=\"comment\">//记录报文的连接状态。</span></span><br><span class=\"line\">\tkmemcheck_bitfield_end(flags1);</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>conntrack的存储:</strong><br><em>/include/net/netns/conntrack.h</em><br>每个网络命名空间有如下一个数据结构的实例，来管理和存放生成的连接的一些信息。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">netns_ct</span> </span></span><br><span class=\"line\"><span class=\"class\">{</span></span><br><span class=\"line\">    <span class=\"keyword\">atomic_t</span> count;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> expect_count;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> htable_size; </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kmem_cache</span> *<span class=\"title\">nf_conntrack_cachep</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_nulls_head</span> *<span class=\"title\">hash</span>;</span><span class=\"comment\">//存放已经经过确认的连接hash表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_head</span> *<span class=\"title\">expect_hash</span>;</span><span class=\"comment\">//期望连接hash表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_nulls_head</span> <span class=\"title\">unconfirmed</span>;</span> <span class=\"comment\">//存放没经过确认的连接hash表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_nulls_head</span> <span class=\"title\">dying</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ip_conntrack_stat</span> *<span class=\"title\">stat</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash_vmalloc;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> expect_vmalloc;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *slabname;</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>整体conntrack相关的数据结构如下：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/conntrack%E7%9A%84%E5%AD%98%E5%82%A8.jpg\"></p>\n<h3 id=\"conntrack的建立过程\"><a href=\"#conntrack的建立过程\" class=\"headerlink\" title=\"conntrack的建立过程\"></a>conntrack的建立过程</h3><p>我们先来看一下iptables定义的连接状态：<br><strong>INVALID</strong> :无效连接，防火墙一般会丢弃该连接<br><strong>NEW</strong>：新建立的，既只是通信双方中只一方发送了报文，还没有得到回应的<br><strong>ESTABLISHED</strong>：已经得到回应的连接。既通信双方都发送过报文的连接<br><strong>RELATED</strong>:关联的连接，既有期望连接关联的连接<br><strong>UNTRACKED</strong>：不进行连接跟踪的连接<br><strong>SNAT</strong>:配置了SNAT的连接<br><strong>DNAT</strong>:配置了DNAT的连接</p>\n<h4 id=\"一般连接建立过程：\"><a href=\"#一般连接建立过程：\" class=\"headerlink\" title=\"一般连接建立过程：\"></a>一般连接建立过程：</h4><p>这里我们拿一个udp通信的例子来走一遍连接建立的过程。先不具体到代码的实现。</p>\n<p>1、首先，PC和SERVER使用udp报文进行通信。<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/conntrack%E4%B8%80%E8%88%AC%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B1.jpg\"><br><strong>PC———&gt;SERVER</strong></p>\n<p>报文的元组信息如下：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sip：1.1.1.6</span><br><span class=\"line\">Sport:1116</span><br><span class=\"line\">Dip:1.1.1.5</span><br><span class=\"line\">Dport:1115</span><br><span class=\"line\">l4protonum:udp</span><br><span class=\"line\">L3num:INET</span><br></pre></td></tr></tbody></table></figure>\n\n<p>报文到达防火墙，防火墙的处理如下：<br><strong>防火墙入口处:</strong></p>\n<ol>\n<li>conntrack模块截获报文。</li>\n<li>根据报文的元组信息在防火墙内的连接表中查找是否已经存在建立的连接，因为第一次通信，没有已建立的连接。</li>\n</ol>\n<p>建立一个新的连接，连接的正反向元组信息如下图，并把该连接的正向连接A挂到unconfirmed链表上<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/conntrack%E4%B8%80%E8%88%AC%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B2.jpg\"><br>如上，新建连接后，把该连接和报文进行关联，连接状态是NEW。</p>\n<p><strong>防火墙出口处：</strong><br>拦截报文后，根据报文携带的连接信息，找到连接，把该连接的正向连接A从unconfirmed链表上摘下来，把该连接的正反向连接A和B加入到连接hash表中。并把该连接确认状态置为confirmed状态，即置位status的IPS_CONFIRMED_BIT位。<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/conntrack%E4%B8%80%E8%88%AC%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B3.jpg\"></p>\n<p><strong>SERVER—–&gt;PC</strong><br>SERVER回应PC的报文元组信息如下：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sip：1.1.1.5</span><br><span class=\"line\">Sport:1115</span><br><span class=\"line\">Dip:1.1.1.6</span><br><span class=\"line\">Dport:1116</span><br><span class=\"line\">l4protonum:udp</span><br><span class=\"line\">L3num:INET</span><br></pre></td></tr></tbody></table></figure>\n\n<p>报文到达防火墙，防火墙的处理如下：<br><strong>防火墙入口处:</strong></p>\n<ol>\n<li>conntrack模块截获报文。</li>\n<li>根据报文的元组信息在防火墙内的连接表中查找是否已经存在建立的连接，可以找到已建立的连接B。</li>\n<li>发现连接B里的dir是reply，表明该连接已经有回应报文了，给连接中的status置位IPS_SEEN_REPLY_BIT，表明该连接已经收到了回应报文。这时把报文的连接状态变为ESTABLISHED</li>\n</ol>\n<p><strong>防火墙出口处：</strong></p>\n<ol>\n<li>拦截报文后，根据报文携带的连接信息，找到连接，发现该连接确认状态是confirmed的，直接不进行连接处理。</li>\n</ol>\n<p>至此，连接建立完成。</p>\n<p>后续该连接的正反方向的报文都可以在连接表中查到相应的连接，就可以根据连接进行相应的处理了。</p>\n<h4 id=\"期望连接的建立过程：\"><a href=\"#期望连接的建立过程：\" class=\"headerlink\" title=\"期望连接的建立过程：\"></a>期望连接的建立过程：</h4><p>这里就不介绍了，详情可看<a href=\"http://blog.chinaunix.net/uid-26517122-id-4281305.html\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<p><strong>奉上原文后续章节：</strong><br><a href=\"http://blog.chinaunix.net/uid-26517122-id-4292718.html\" target=\"_blank\" rel=\"noopener\">Netfilter中conntrack 功能扩展机制</a><br><a href=\"http://blog.chinaunix.net/uid-26517122-id-4292730.html\" target=\"_blank\" rel=\"noopener\">Netfilter中conntrack helper扩展实现</a><br><a href=\"http://blog.chinaunix.net/uid-26517122-id-4292946.html\" target=\"_blank\" rel=\"noopener\">Netfilter中L3和L4层提供的conntrack处理方法</a><br><a href=\"http://blog.chinaunix.net/uid-26517122-id-4293010.html\" target=\"_blank\" rel=\"noopener\">Netfilter中conntrack的HOOK点</a><br><a href=\"http://blog.chinaunix.net/uid-26517122-id-4293135.html\" target=\"_blank\" rel=\"noopener\">Nefilter中IP conntrack核心函数详解</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://zh.wikipedia.org/wiki/Netfilter\" target=\"_blank\" rel=\"noopener\">Netfilter</a><br><a href=\"https://www.ibm.com/developerworks/cn/linux/network/s-netip/index.html\" target=\"_blank\" rel=\"noopener\">netfilter/iptables 简介</a><br><a href=\"https://www.xiayinchang.top/post/d617cc74.html\" target=\"_blank\" rel=\"noopener\">Netfilter 框架及其周边组件</a><br><a href=\"https://opengers.github.io/openstack/openstack-base-netfilter-framework-overview/#connection-tracking\" target=\"_blank\" rel=\"noopener\">netfilter框架研究</a><br><a href=\"https://cloud.tencent.com/developer/article/1199506\" target=\"_blank\" rel=\"noopener\">使用iptables控制网络流量</a><br><a href=\"https://xiaoz.co/2020/01/10/a-deep-dive-into-iptables-and-netfilter-architecture/\" target=\"_blank\" rel=\"noopener\">深入理解Iptables和Netfilter架构</a><br><a href=\"http://arthurchiao.art/blog/deep-dive-into-iptables-and-netfilter-arch-zh/\" target=\"_blank\" rel=\"noopener\">深入理解Iptables和Netfilter架构</a><br><a href=\"https://blog.csdn.net/haolipengzhanshen/article/details/85007427\" target=\"_blank\" rel=\"noopener\">iptables和netfilter的通信流程</a><br><a href=\"https://blog.csdn.net/venoy4806/article/details/5136626\" target=\"_blank\" rel=\"noopener\">netfilter内核源码分析</a><br><a href=\"https://blog.csdn.net/venoy4806/article/details/5136626\" target=\"_blank\" rel=\"noopener\">Netfilter内核源码分析</a><br><a href=\"http://chinaunix.net/uid-29547110-id-5038602.html\" target=\"_blank\" rel=\"noopener\">Netfilter全面讲解</a><br><a href=\"http://blog.chinaunix.net/uid-26517122-id-4292718.html\" target=\"_blank\" rel=\"noopener\">conntrack详解</a></p>\n","site":{"data":{}},"excerpt":"<p>工作需要，了解了一下Net filter的工作原理。(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em>源码的版本：linux-3.10.0-1127.18.2.el7 (centos)</em></p>","more":"<p><a href=\"https://www.ibm.com/developerworks/cn/linux/network/s-netip/index.html\" target=\"_blank\" rel=\"noopener\">简介</a></p>\n<p><em>包含netfilter的基本介绍，iptables规则介绍及使用，netfilter实现原理，自定义match实现，链接跟踪实现、ipset和iptables联动和ipset实现</em></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Netfilter</strong>，在Linux内核中的一个软件框架，用于管理网络数据包。不仅具有网络地址转换（NAT）的功能，也具备数据包内容修改、以及数据包过滤等防火墙功能。利用运作于用户空间的应用软件，如<code>iptables</code>、<code>ebtables</code>和<code>arptables</code>等，来控制Netfilter，系统管理者可以管理通过Linux操作系统的各种网络数据包。<br><strong>iptables：</strong><br>Netfilter中最为常用的一种网络数据包过滤方式——IP包过滤，我们也将重点介绍这种过滤方式。用户在使用<code>iptables</code>时需要超级用户权限，以及内核模块需要<code>Xtables</code>模块做支撑。iptables只能处理ipv4，对应的ipv6则使ip6tables来处理。<br><strong>ebtables</strong><br>ebtables 是以太网桥防火墙，以太网桥工作在数据链路层，ebtables 主要用来过滤数据链路层数据包。使用 ebtables 可以实现 filtering 、NAT 和 brouting。过滤根据 MAC 头包括 VLAN ID 等信息确定是否丢弃该帧。MAC NAT 可以修改 MAC 源和目的地址。Brouting 意为 bridge or route，根据规则确定应该将数据帧路由给上层（iptables）还是通过网桥转给其它的接口。<br>ebtables 和我们熟悉的 iptables 很像，也有规则（rules）、链（chains）和表（tables）的概念。ebtables 使用规则确定应当对数据帧执行什么动作。规则按照不同的链分组，不同的表中包含不同的链。在 ebtables 中有三张表：filter、nat 和 broute，分别对应其三大功能模块。<br>需要注意的是如果一个以太网接口 eth1，它并没有桥接到网桥上，此时，从 eth1 进来的数据包不会走到 ebtables 中。在 bridge check 点，会检查数据包进入的接口是否属于某个桥，如果是则走 ebtables，否则直接走 iptables。也就是说，ebtables 只对桥接网络生效。<br><strong>arptables</strong><br>arptables 是运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理地址解析协议(arp)数据包的过滤和转发。<br>arptables基于iptables开发，使用时也与iptables有些类似，都有“表（tables）”、“链（chain）”和“规则（rules）”三个层面。<br>但是arptables功能较单一，仅有filter一个表。并且，也只有INPUT（从内核2.4版）、OUTPUT（从内核2.4版）和FORWARD（从内核2.6版）三个内建链。arptables的主要用途之一是防范ARP欺骗。</p>\n<h3 id=\"基础结构\"><a href=\"#基础结构\" class=\"headerlink\" title=\"基础结构\"></a>基础结构</h3><p><strong>Netfilter</strong> 包含了一组内核钩子 API ，周边内核组件可以使用这些钩子在网络栈中注册回调函数。每一个在网络栈中流通的包到达相应的钩子时，就会触发相应的回调函数，从而能够完成包过滤、网络地址（端口）转换和网络包协议头修改等各种操作。<br>Netfilter 提供了五种钩子：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/Netfilter%20hooks.png\" alt=\"Netfilter hook\"></p>\n<ol>\n<li><code>NF_IP_PER_ROUNTING</code> — 当数据包到达计算机立即触发。</li>\n<li><code>NF_IP_LOCAL_IN</code> — 当数据包的目的地就是当前计算机时触发。</li>\n<li><code>NF_IP_FORWARD</code> — 当数据包目的地址是其它的网络接口时触发。</li>\n<li><code>NF_IP_POST_ROUTING</code> — 当数据包即将从计算机发出时触发。</li>\n<li><code>NF_IP_LOCAL_OUT</code> — 当数据包由本地生成并发向外部时触发。</li>\n</ol>\n<p>基于 Netfilter 钩子 API 实现的内核模块主要有 ebtables、arptables、ip(6)tables、nf_tables、NAT、connection tracking 等。如下架构图：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/Netfilter%E6%9E%B6%E6%9E%84.png\" alt=\"Netfilter\"></p>\n<p>而数据包在整个Netfilter中的数据流如下图：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/1920px-Netfilter-packet-flow.png\" alt=\"网络数据包流\"></p>\n<h3 id=\"建立规则和链\"><a href=\"#建立规则和链\" class=\"headerlink\" title=\"建立规则和链\"></a>建立规则和链</h3><p>通过向防火墙提供有关对来自某个源、到某个目的地或具有特定协议类型的信息包要做些什么的指令，规则控制信息包的过滤。 通过使用 netfilter/iptables 系统提供的特殊命令 iptables ，建立这些规则，并将其添加到内核空间的特定信息包过滤表内的链中。关于添加／除去／编辑规则的命令的一般语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables [-t table] command [match] [target]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-A –append</td>\n<td>将一个或多个规则添加到所选链的末尾。</td>\n</tr>\n<tr>\n<td>-C –check</td>\n<td>检查与所选链中的规范匹配的规则。</td>\n</tr>\n<tr>\n<td>-D –delete</td>\n<td>从所选链中删除一个或多个规则。</td>\n</tr>\n<tr>\n<td>-F –flush</td>\n<td>逐个删除所有规则。</td>\n</tr>\n<tr>\n<td>-I –insert</td>\n<td>将一个或多个规则作为给定的规则编号插入所选链中。</td>\n</tr>\n<tr>\n<td>-L –list</td>\n<td>显示所选链中的规则。</td>\n</tr>\n<tr>\n<td>-n –numeric</td>\n<td>以数字格式显示IP地址或主机名和邮政编号。</td>\n</tr>\n<tr>\n<td>-N –new-chain <name></name></td>\n<td>创建一个新的用户定义链。</td>\n</tr>\n<tr>\n<td>-v –verbose</td>\n<td>与list选项一起使用时提供更多信息。</td>\n</tr>\n<tr>\n<td>-X –delete-chain <name></name></td>\n<td>删除用户定义的链。</td>\n</tr>\n</tbody></table>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除规则</span><br><span class=\"line\">iptables -F</span><br><span class=\"line\">iptables –flush</span><br><span class=\"line\">//设置链的默认策略</span><br><span class=\"line\">iptables -P INPUT DROP</span><br><span class=\"line\">//指定IP源和网卡丢弃</span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp -s 192.168.100.1 -j DROP</span><br><span class=\"line\">//指定IP源和网卡tcp拒绝</span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp -s 192.168.100.1 -j REJECT --reject-with tcp-reset</span><br><span class=\"line\">//仅允许来自于192.168.100.0/24域的用户的ssh连接请求</span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp -s 192.168.100.0/24 --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">//端口转发</span><br><span class=\"line\">iptables -t nat -A PREROUTING -p tcp -d 192.168.102.37 --dport 422 -j DNAT --to 192.168.102.37:22</span><br><span class=\"line\">//允许多端口访问，也支持端口段：22-443</span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp -m multiport --dports 22,80,443 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class=\"line\">//使用iptables nth将HTTPS流量负载平衡至两个不同的ip地址。</span><br><span class=\"line\">iptables -t nat -A PREROUTING -p tcp --dport 8000 -m state --state NEW -m statistic --mode nth --every 2 --packet 0 -j DNAT --to-destination 192.168.17.33:8001</span><br><span class=\"line\">iptables -t nat -A PREROUTING -p tcp --dport 8000 -m state --state NEW -m statistic --mode nth --every 2 --packet 1 -j DNAT --to-destination 192.168.17.33:8002</span><br><span class=\"line\">//防火墙服务器上的其中一个网卡连接到外部，另一个网卡连接到内部服务器，使用以下规则允许内部网络与外部网络的通信。此例中，eth1连接到外部网络(互联网)，eth0连接到内部网络(例如:192.168.1.x)。</span><br><span class=\"line\">iptables -A FORWARD -i eth0 -o eth1 -j ACCEPT</span><br><span class=\"line\">//按流量匹配ping次数。（--limit 10/minute表示一分钟产生10个令牌即6秒一个，--limit-burst 5表示令牌桶最多可以放5个令牌，此项默认值就是5。即实现了平均值(--limit)和峰值(--limit-burst)约束）</span><br><span class=\"line\">iptables -I INPUT 1 -p icmp -m limit --limit 10/minute --limit-burst 5 -j ACCEPT</span><br><span class=\"line\">//记录丢弃的数据表</span><br><span class=\"line\">iptables -N LOGGING</span><br><span class=\"line\">iptables -A INPUT -i eth0 -p tcp -s 10.92.2.188 -j LOGGING</span><br><span class=\"line\">iptables -A LOGGING -m limit --limit 2/min -j LOG --log-prefix &quot;IPTables Packet Dropped: &quot; --log-level 4</span><br><span class=\"line\">iptables -A LOGGING -j DROP</span><br><span class=\"line\">cat /var/log/messages | grep IPTables #(centos) 根据syslog的配置来确定位置。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"规则构成\"><a href=\"#规则构成\" class=\"headerlink\" title=\"规则构成\"></a>规则构成</h2><p>在我们执行一个iptables命令的时候，往往达到的效果，就是在某个表的某个链中添加某一条规则。而参与这条规则构成的包括表(table)、链（chain）、匹配(match)和目标（target）。下面将详细介绍这几个部分。</p>\n<h3 id=\"表-table\"><a href=\"#表-table\" class=\"headerlink\" title=\"表(table)\"></a>表(table)</h3><p>iptables里包含了4张表，分别是filter、nat、mangle和raw表。而表的作用在于存放规则，比如我们平时执行<code>iptables -nL</code>会得到类似的结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Chain INPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt source               destination         </span><br><span class=\"line\">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:80</span><br><span class=\"line\"></span><br><span class=\"line\">Chain FORWARD (policy ACCEPT)</span><br><span class=\"line\">target     prot opt source               destination         </span><br><span class=\"line\"></span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT)</span><br><span class=\"line\">target     prot opt source               destination</span><br></pre></td></tr></table></figure>\n\n<p>(policy XXX)表示着默认策略。表中包含的链，表示着表里的规则可生效的链范围。表和链有着如下关系：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/iptables-%E8%A1%A8%E5%92%8C%E9%93%BE.png\" alt=\"iptables的表和链\"></p>\n<h3 id=\"链-chain\"><a href=\"#链-chain\" class=\"headerlink\" title=\"链(chain)\"></a>链(chain)</h3><p>如果表是存放规则的地方，而链就是决定规则执行的时机，iptables中的5条链PREROUTING、INPUT、OUTPUT、FORWARD和POSTROUTING。而执行的位置也在简介中的netfilter hook原理中给出了。链把相应的表按照一定的顺序串起来，找出表里对应的规则进行执行。<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/%5Biptables-%E9%93%BE%E5%92%8C%E8%A1%A8.png\" alt=\"iptables-链和表\"></p>\n<h3 id=\"匹配-match\"><a href=\"#匹配-match\" class=\"headerlink\" title=\"匹配(match)\"></a>匹配(match)</h3><p><code>-m</code>或<code>--match</code>命令所做的工作，当然这部分我们称为扩展匹配，<code>-s -i</code>所执行的也是匹配工作，称为通用匹配。<br><strong>通用匹配</strong><br>类似<code>-s</code>这类的通用匹配，通常在用户态代码，和内核代码都包含了，不需要额外加载module。在iptables规则下发里，也是属于附加的基本参数。<br><strong>扩展匹配</strong><br>首先，我们在使用扩展匹配的时候，可以使用帮助文档：<code>iptables -m the_match_you_want --help</code>。扩展模块要工作的时候，都需要进行模块匹配，用户态匹配对应的libipt_xxx或libxt_xxx。内核态匹配对应的xt_xxx。比如我们使用的<code>-m state</code>在iptables命令执行时，会找<code>libxt_state.so</code>的动态库，规则下发到内核的时候，内核会找对应的<code>xt_state.ko</code>模块。具体源码实现后续会说明。<br>如果想自定义扩展匹配，那么需要写内核模块代码(参考内核模块源码的xt_multiport.c)和用户态模块代码(参考libxt_multiport.c)以及定义的头文件(参考xt_multiport.h)</p>\n<h3 id=\"目标-target\"><a href=\"#目标-target\" class=\"headerlink\" title=\"目标(target)\"></a>目标(target)</h3><p><code>-j</code>所做的工作，在包匹配成功后，就会执行<code>-j</code>后面的动作，来对包进行处理。</p>\n<h4 id=\"通用目标\"><a href=\"#通用目标\" class=\"headerlink\" title=\"通用目标\"></a>通用目标</h4><p><code>DROP</code>,<code>ACCEPT</code>,<code>QUEUE</code>和<code>RETURN</code>这几个属于通用匹配，他们同样以模块的形式进行加载和工作，对应的模块是<code>standard</code></p>\n<h4 id=\"扩展目标\"><a href=\"#扩展目标\" class=\"headerlink\" title=\"扩展目标\"></a>扩展目标</h4><p>扩展目标和扩展匹配也是相似的工作原理，都是进行模块加载。如果要写自定义模块，需要内核模块代码(参考xt_LOG.c)和用户态模块代码(参考libipt_LOG.c)和头文件(参考xt_LOG.h)</p>\n<h2 id=\"Netfilter源码实现\"><a href=\"#Netfilter源码实现\" class=\"headerlink\" title=\"Netfilter源码实现\"></a>Netfilter源码实现</h2><p>Netfilter的整体工作方式类似下图：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/iptables%E5%86%85%E6%A0%B8%E9%80%9A%E4%BF%A1.jpg\"></p>\n<h3 id=\"基本数据结构\"><a href=\"#基本数据结构\" class=\"headerlink\" title=\"基本数据结构\"></a>基本数据结构</h3><p>由于本人也没有精读源码，所以也只能介绍个大概，一切以源码为准。<br><strong>xt_table与xt_table_info</strong><br>xt_table是Netfilter的核心数据结构，它包含了每个表的所有规则信息，以及匹配处理方法。数据包进入Netfilter后通过查表，匹配相应的规则来决定对数据包的处理结果。下面是xt_table的完整定义（在X_tables.h中）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_table</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">list</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* What hooks you will enter on */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> valid_hooks;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Man behind the curtain... */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_table_info</span> *<span class=\"title\">private</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Set this to THIS_MODULE if you are a module, otherwise NULL */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">module</span> *<span class=\"title\">me</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">u_int8_t</span> af;      <span class=\"comment\">/* address/protocol family */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> priority;     <span class=\"comment\">/* hook order */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* A unique name... */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> name[XT_TABLE_MAXNAMELEN];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>每个成员意思见上文定义中的注释，个别成员说明如下：<br>valid_hooks：所支持的hook点类型，决定后续注册hook操作的位置。比如filter表的valid_hoos被指定为：(1 &lt;&lt; NF_INET_LOCAL_IN) | (1 &lt;&lt; NF_INET_FORWARD) | (1 &lt;&lt; NF_INET_LOCAL_OUT))，即在NF_INET_LOCAL_IN、NF_INET_FORWARD、NF_INET_LOCAL_OUT三处注册hook操作；<br>private：xt_table的数据区，包含了所有规则和规则处理方法等信息。xt_table_info详细信息见下文。</p>\n<p>xt_table的所有数据都存在private的成员变量中，private是结构体struct xt_table_info，其定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_table_info</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* Size per table */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Number of entries: FIXME. --RR */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> number;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Initial number of entries. Needed for module usage count */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> initial_entries;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Entry points and underflows */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hook_entry[NF_INET_NUMHOOKS];</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> underflow[NF_INET_NUMHOOKS];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Number of user chains. Since tables cannot have loops, at most</span></span><br><span class=\"line\"><span class=\"comment\">     * @stacksize jumps (number of user chains) can possibly be made.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> stacksize;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> __percpu *stackptr;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> ***jumpstack;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* ipt_entry tables: one per CPU */</span></span><br><span class=\"line\">    <span class=\"comment\">/* Note : this field MUST be the last one, see XT_TABLE_INFO_SZ */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *entries[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>重要成员说明：<br>hook_entry: 不同hook点的规则的偏移量；<br>entries： 规则存储的入口，为可变区域，必须放在结构末尾。entries本质上是ipt_entry结构。关于ipt_entry定义和成员介绍见下文。</p>\n<p><strong>ipt_entry</strong><br>ipt_entry结构是对规则的描述，其定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* This structure defines each of the firewall rules.  Consists of 3</span></span><br><span class=\"line\"><span class=\"comment\">   parts which are 1) general IP header stuff 2) match specific</span></span><br><span class=\"line\"><span class=\"comment\">   stuff 3) the target to perform if the rule matches */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_entry</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_ip</span> <span class=\"title\">ip</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Mark with fields that we care about. */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> nfcache;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Size of ipt_entry + matches */</span></span><br><span class=\"line\">    <span class=\"keyword\">u_int16_t</span> target_offset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Size of ipt_entry + matches + target */</span></span><br><span class=\"line\">    <span class=\"keyword\">u_int16_t</span> next_offset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Back pointer */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> comefrom;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Packet and byte counters. */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_counters</span> <span class=\"title\">counters</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* The matches (if any), then the target. */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> elems[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>成员elems中，保存了一条规则的所有匹配（matchs），以及匹配后的处理操作（target）。在Iptables.c中，generate_entry（）方法新建一个ipt_entry，可以看到如何将matchs和target添加到ipt_entry中的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_entry</span> *</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">generate_entry</span>(<span class=\"title\">const</span> <span class=\"title\">struct</span> <span class=\"title\">ipt_entry</span> *<span class=\"title\">fw</span>,</span></span><br><span class=\"line\"><span class=\"class\">           <span class=\"title\">struct</span> <span class=\"title\">xtables_rule_match</span> *<span class=\"title\">matches</span>,</span></span><br><span class=\"line\"><span class=\"class\">           <span class=\"title\">struct</span> <span class=\"title\">ipt_entry_target</span> *<span class=\"title\">target</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xtables_rule_match</span> *<span class=\"title\">matchp</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_entry</span> *<span class=\"title\">e</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    size = <span class=\"keyword\">sizeof</span>(struct ipt_entry);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (matchp = matches; matchp; matchp = matchp-&gt;next)</span><br><span class=\"line\">       size += matchp-&gt;match-&gt;m-&gt;u.match_size;</span><br><span class=\"line\"></span><br><span class=\"line\">    e = xtables_malloc(size + target-&gt;u.target_size);</span><br><span class=\"line\">    *e = *fw;</span><br><span class=\"line\">    e-&gt;target_offset = size;</span><br><span class=\"line\">    e-&gt;next_offset = size + target-&gt;u.target_size;</span><br><span class=\"line\"></span><br><span class=\"line\">    size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (matchp = matches; matchp; matchp = matchp-&gt;next) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">memcpy</span>(e-&gt;elems + size, matchp-&gt;match-&gt;m, matchp-&gt;match-&gt;m-&gt;u.match_size);</span><br><span class=\"line\">       size += matchp-&gt;match-&gt;m-&gt;u.match_size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(e-&gt;elems + size, target, target-&gt;u.target_size);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>见上文的程序片段，ipt_entry的空间占用为：ipt_entry结构自身的size，加之所有match的size总和，加之target的size。填写elems时，首先将所有的match依次拷贝到elems指向的存储位置，紧接着将target拷贝到其后。下图是ipt_entry存储示意图：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/ipt_entry%E5%AD%98%E5%82%A8%E5%88%86%E5%B8%83%E7%A4%BA%E6%84%8F%E5%9B%BE.png\"></p>\n<p><strong>nf_hook_ops</strong><br>nf_hook_ops用于注册一个hook操作，它主要包含了hook操作执行函数、hook类型，以及优先级。我们可以认为，一个nf_hook_ops表征了一个表的一条链，因为它与一个表的一个hook类型唯一对应。其完整定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_hook_ops</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">list</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* User fills in from here down. */</span></span><br><span class=\"line\">    nf_hookfn *hook;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">module</span> *<span class=\"title\">owner</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">u_int8_t</span> pf;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hooknum;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Hooks are ordered in ascending priority. */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> priority;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>重要成员说明：<br>hook：hook操作函数；<br>owner：所属的表；<br>hooknum：hook类型；<br>priority：优先级，决定同一hook点，链（不同表在同一个hook点的链）的执行次序。</p>\n<p><strong>ipt_replace</strong><br>结构主要用于iptables的规则下发，在setsockopt进行规则下发时以此结构体作为传输数据。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* The argument to IPT_SO_SET_REPLACE. */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_replace</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">/* Which table. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[XT_TABLE_MAXNAMELEN];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Which hook entry points are valid: bitmask.  You can't</span></span><br><span class=\"line\"><span class=\"comment\">           change this. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> valid_hooks;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Number of entries */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_entries;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Total size of new entries */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Hook entry points. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hook_entry[NF_INET_NUMHOOKS];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Underflow points. */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> underflow[NF_INET_NUMHOOKS];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Information about old entries: */</span></span><br><span class=\"line\">\t<span class=\"comment\">/* Number of counters (must be equal to current number of entries). */</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num_counters;</span><br><span class=\"line\">\t<span class=\"comment\">/* The old entries' counters. */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_counters</span> *<span class=\"title\">counters</span>;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"comment\">/* The entries (hang off end: not really an array). */</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_entry</span> <span class=\"title\">entries</span>[0];</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>重要成员说明：<br>entries：对应的扩展matches和target的数据集合，其组成方式就是上面对应ip_entry的介绍。</p>\n<h3 id=\"Netfilter内部数据包处理\"><a href=\"#Netfilter内部数据包处理\" class=\"headerlink\" title=\"Netfilter内部数据包处理\"></a>Netfilter内部数据包处理</h3><p>在简介中已经提到了netfilter的hook机制和hook点，现在我们来了解下具体流程。<br>首先，内核在收到ip包后，会进行一系列的操作，而hook的位置如下：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/ip%E6%8A%A5%E6%96%87hook%E7%82%B9.drawio.png\"><br>当我们对应的hook点有相应的注册函数时，就会进行相应的注册的hook函数调用：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * \tDeliver IP Packets to the higher protocol layers.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ip_local_deliver</span><span class=\"params\">(struct sk_buff *skb)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t *\tReassemble IP fragments.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ip_is_fragment(ip_hdr(skb))) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ip_defrag(skb, IP_DEFRAG_LOCAL_DELIVER))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> NF_HOOK(NFPROTO_IPV4, NF_INET_LOCAL_IN, <span class=\"literal\">NULL</span>, skb,</span><br><span class=\"line\">\t\t       skb-&gt;dev, <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t       ip_local_deliver_finish);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>ip_input.c</em><br>而实际的hook处理流程如下：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/Netfilter%E5%86%85%E9%83%A8%E6%95%B0%E6%8D%AE%E5%8C%85%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.drawio.png\"><br>这里主要的实现函数<code>nf_hook_slow</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nf_hook_slow</span><span class=\"params\">(struct sk_buff *skb, struct nf_hook_state *state)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_hook_ops</span> *<span class=\"title\">elem</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> verdict;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* We may already have this, but read-locks nest anyway */</span></span><br><span class=\"line\">\trcu_read_lock();</span><br><span class=\"line\"></span><br><span class=\"line\">\telem = list_entry_rcu(&amp;nf_hooks[state-&gt;pf][state-&gt;hook],</span><br><span class=\"line\">\t\t\t      struct nf_hook_ops, <span class=\"built_in\">list</span>);</span><br><span class=\"line\">next_hook:</span><br><span class=\"line\">\tverdict = nf_iterate(&amp;nf_hooks[state-&gt;pf][state-&gt;hook], skb, state,</span><br><span class=\"line\">\t\t\t     &amp;elem);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (verdict == NF_ACCEPT || verdict == NF_STOP) &#123;</span><br><span class=\"line\">\t\tret = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((verdict &amp; NF_VERDICT_MASK) == NF_DROP) &#123;</span><br><span class=\"line\">\t\tkfree_skb(skb);</span><br><span class=\"line\">\t\tret = NF_DROP_GETERR(verdict);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tret = -EPERM;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((verdict &amp; NF_VERDICT_MASK) == NF_QUEUE) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> err = nf_queue(skb, elem, state,</span><br><span class=\"line\">\t\t\t\t   verdict &gt;&gt; NF_VERDICT_QBITS);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (err &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err == -ECANCELED)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> next_hook;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err == -ESRCH &amp;&amp;</span><br><span class=\"line\">\t\t\t   (verdict &amp; NF_VERDICT_FLAG_QUEUE_BYPASS))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> next_hook;</span><br><span class=\"line\">\t\t\tkfree_skb(skb);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trcu_read_unlock();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>nf_hooks[state-&gt;pf][state-&gt;hook]</code>中，<code>state-&gt;pf</code>是对应的协议，比如<code>NFPROTO_IPV4</code>, <code>state-&gt;hook</code>表示hook的点，比如<code>NF_INET_LOCAL_IN</code>。而nf_hooks是一个全局变量，包含了所有的注册hook。<br>在进入到<code>ipt_do_table</code>函数后，会进行包的匹配和处理，流程如下：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/netfilter%E5%8C%85%E8%BF%87%E6%BB%A4.drawio.png\"><br><code>ipt_do_table</code>会先匹配基本match，再匹配扩展match，匹配成功后，进行基础target或扩展target的处理。如果匹配不成功，则会一直匹配直到所有matches匹配完。这也导致了iptables规则在命中一条规则后，后续的规则都不会再进行匹配了(除非你target指向其他链)。<br>内部数据包处理大概如上所说，但是我们仍然抱有疑惑，hook函数哪里来？扩展match怎么生效等。这就要归功于netfilter的注册机制。</p>\n<h3 id=\"Netfilter模块注册\"><a href=\"#Netfilter模块注册\" class=\"headerlink\" title=\"Netfilter模块注册\"></a>Netfilter模块注册</h3><p>模块注册的时机是在模块加载的时候，而模块加载分系统启动时加载，即系统启动时加载netfilter以及编译到内核的模块。<br>而没有编译到内核，而是以独立模块存在的netfilter模块，则会在规则下发的时候，会根据你传入的match或target名称到对应的路径下寻找，并载入模块。<br>netfilter在设计的时候，就设计了强大的模块加载机制，因此也表现出强大的扩展性。<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/Netfilter%E6%89%A9%E5%B1%95%E6%9C%BA%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.png\"><br>本质上，模块加载结构都是相似的。我们就以<code>iptable_filter.c</code>为例，讲解一下hook的注册过程。<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/netfilter%E6%A8%A1%E5%9D%97%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B.drawio.png\"><br>对应的部分<code>iptable_filter.c</code>代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_table</span> <span class=\"title\">packet_filter</span> = &#123;</span></span><br><span class=\"line\">\t.name\t\t= <span class=\"string\">\"filter\"</span>,</span><br><span class=\"line\">\t.valid_hooks\t= FILTER_VALID_HOOKS,</span><br><span class=\"line\">\t.me\t\t= THIS_MODULE,</span><br><span class=\"line\">\t.af\t\t= NFPROTO_IPV4,</span><br><span class=\"line\">\t.priority\t= NF_IP_PRI_FILTER,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">iptable_filter_hook(<span class=\"keyword\">const</span> struct nf_hook_ops *ops, struct sk_buff *skb,</span><br><span class=\"line\">\t\t    <span class=\"keyword\">const</span> struct net_device *in, <span class=\"keyword\">const</span> struct net_device *out,</span><br><span class=\"line\">\t\t    <span class=\"keyword\">const</span> struct nf_hook_state *state)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">net</span> *<span class=\"title\">net</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ops-&gt;hooknum == NF_INET_LOCAL_OUT &amp;&amp;</span><br><span class=\"line\">\t    (skb-&gt;len &lt; <span class=\"keyword\">sizeof</span>(struct iphdr) ||</span><br><span class=\"line\">\t     ip_hdrlen(skb) &lt; <span class=\"keyword\">sizeof</span>(struct iphdr)))</span><br><span class=\"line\">\t\t<span class=\"comment\">/* root is playing with raw sockets. */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> NF_ACCEPT;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnet = dev_net(state-&gt;in ? state-&gt;in : state-&gt;out);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ipt_do_table(skb, ops-&gt;hooknum, state, net-&gt;ipv4.iptable_filter);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">iptable_filter_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = register_pernet_subsys(&amp;iptable_filter_net_ops);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Register hooks */</span></span><br><span class=\"line\">\tfilter_ops = xt_hook_link(&amp;packet_filter, iptable_filter_hook);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (IS_ERR(filter_ops)) &#123;</span><br><span class=\"line\">\t\tret = PTR_ERR(filter_ops);</span><br><span class=\"line\">\t\tunregister_pernet_subsys(&amp;iptable_filter_net_ops);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __<span class=\"function\"><span class=\"built_in\">exit</span> <span class=\"title\">iptable_filter_fini</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\txt_hook_unlink(&amp;packet_filter, filter_ops);</span><br><span class=\"line\">\tunregister_pernet_subsys(&amp;iptable_filter_net_ops);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(iptable_filter_init);</span><br><span class=\"line\">module_exit(iptable_filter_fini);</span><br></pre></td></tr></table></figure>\n\n<p>netfilter注册的逻辑依赖内核模块注册。内核模块加载的时候，会自动调用module_init，在iptable_filter中，调用<code>iptable_filter_init</code>，执行<code>xt_hook_link</code>函数，将<code>packet_filter</code>全局量挂载到<code>nf_hooks</code>全局量。实际包过滤的时候，就会根据<code>nf_hooks</code>来调用注册的hook。<br>以上就是hook的注册过程，实际在看源码中，match和target等注册过程也是类似的，通过module_init将模块文件的变量注册到全局量中。</p>\n<h3 id=\"iptables规则下发\"><a href=\"#iptables规则下发\" class=\"headerlink\" title=\"iptables规则下发\"></a>iptables规则下发</h3><p>内核空间与用户空间的数据交互通过getsockopt和setsockopt来完成，这个两个函数用来控制相关socket文件描述符的的选项值。先来看这两个函数的原型：<br>set/getsockopt(2)函数的基本使用格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int setsockopt(int sockfd, int proto, int cmd, void *data, int datalen)</span><br><span class=\"line\">int getsockopt(int sockfd, int proto, int cmd, void *data, int datalen)</span><br></pre></td></tr></table></figure>\n\n<p>在调用<code>setsockopt</code>函数时，实际执行的流程如下：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/%E8%A7%84%E5%88%99%E6%8F%90%E4%BA%A4%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png\"><br>上图中，从setsockopt()到ip_setsockopt()是常规的setsockopt调用流程；在新的流程中，Netfilter加入的自己的处理函数nf_setsockopt()。<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/setsockopt%E6%B5%81%E7%A8%8B%E5%9B%BE.drawio.png\"><br>上图中，核心函数<code>do_replace</code>，进行的数据拷贝传输，源码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">do_replace(struct net *net, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> __user *user, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_replace</span> <span class=\"title\">tmp</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_table_info</span> *<span class=\"title\">newinfo</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *loc_cpu_entry;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_entry</span> *<span class=\"title\">iter</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (copy_from_user(&amp;tmp, user, <span class=\"keyword\">sizeof</span>(tmp)) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -EFAULT;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* overflow check */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tmp.num_counters &gt;= INT_MAX / <span class=\"keyword\">sizeof</span>(struct xt_counters))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tmp.num_counters == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttmp.name[<span class=\"keyword\">sizeof</span>(tmp.name)<span class=\"number\">-1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnewinfo = xt_alloc_table_info(tmp.size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!newinfo)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\"></span><br><span class=\"line\">\tloc_cpu_entry = newinfo-&gt;entries;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (copy_from_user(loc_cpu_entry, user + <span class=\"keyword\">sizeof</span>(tmp),</span><br><span class=\"line\">\t\t\t   tmp.size) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tret = -EFAULT;</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> free_newinfo;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = translate_table(net, newinfo, loc_cpu_entry, &amp;tmp);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> free_newinfo;</span><br><span class=\"line\"></span><br><span class=\"line\">\tduprintf(<span class=\"string\">\"Translated table\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = __do_replace(net, tmp.name, tmp.valid_hooks, newinfo,</span><br><span class=\"line\">\t\t\t   tmp.num_counters, tmp.counters);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret)</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> free_newinfo_untrans;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> free_newinfo_untrans:</span><br><span class=\"line\">\txt_entry_foreach(iter, loc_cpu_entry, newinfo-&gt;size)</span><br><span class=\"line\">\t\tcleanup_entry(iter, net);</span><br><span class=\"line\"> free_newinfo:</span><br><span class=\"line\">\txt_free_table_info(newinfo);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码可以看到，iptables和内核间的通信，就是通过调用<code>copy_from_user</code>函数进行数据拷贝来完成的。而拷贝的核心数据结构，就是上面介绍过的<code>ipt_replace</code>结构。<br>至此，Netfilter源码实现的主要流程就介绍完了，更多的细节可自行阅读源码。</p>\n<h2 id=\"自定义match\"><a href=\"#自定义match\" class=\"headerlink\" title=\"自定义match\"></a>自定义match</h2><p>主要是为了练习，功能就是命中后打印输出一下。<br>要实现一个iptables的自定义功能，那么，我应该产生三个文件libipt_xx.c、ipt_xx.c和ipt_xx.h(ipt更换为xt一样有效)，并放到对应目录中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipt_xx.c   -&gt; /&lt;linux-kernel-src&gt;/net/ipv4/netfilter/</span><br><span class=\"line\">ipt_xx.h   -&gt; /&lt;linux-kernel-src&gt;/include/uapi/linux/netfilter_ipv4</span><br><span class=\"line\">libipt_xx.c   -&gt; /usr/local/src/iptables-x.x.x/extensions/</span><br></pre></td></tr></table></figure>\n\n<p>然后再分别编译内核部分ipt_xx.c和ipt_xx.h源码及用户部分libipt_xx.c源码。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p><strong>内核源码下载</strong><br>通用的linux内核源码的<a href=\"https://www.kernel.org/\" target=\"_blank\" rel=\"noopener\">下载</a><br>centos/redhat的内核在上面找不到对应的，他们是自己维护的版本，下载方法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 先复制及设定 centos-common 源码</span><br><span class=\"line\">[user@host ~]$ git clone  https://git.centos.org/centos-git-common.git</span><br><span class=\"line\">[user@host ~]$ git clone https://git.centos.org/rpms/kernel.git ; cd kernel</span><br><span class=\"line\"># 让我们存取 cenots7 内核</span><br><span class=\"line\">[user@host kernel]$ git checkout c7 </span><br><span class=\"line\"># get_sources会根据你的电脑内核版本，匹配对应的源码。</span><br><span class=\"line\">[user@host kernel]$ ~/centos-git-common/get_sources.sh</span><br></pre></td></tr></table></figure>\n\n<p>如果你对特定分支感兴趣，也可以下载特定分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b c7 --single-branch https://git.centos.org/rpms/kernel.git</span><br></pre></td></tr></table></figure>\n\n<p>这里的内核源码也包含了Netfilter的内核源码。</p>\n<p><strong>iptables源码：</strong><br><em>本文使用的是iptables v1.14.21版本，对应的源码也是这个版本</em> <a href=\"https://www.netfilter.org/projects/iptables/downloads.html\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n<h3 id=\"自定义match源码\"><a href=\"#自定义match源码\" class=\"headerlink\" title=\"自定义match源码\"></a>自定义match源码</h3><p>内核部分：xt_test.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pr_fmt(fmt) KBUILD_MODNAME <span class=\"meta-string\">\": \"</span> fmt</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/module.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/udp.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/skbuff.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/kernel.h&gt;  </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter/xt_test.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter/x_tables.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter_ipv4/ip_tables.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter_ipv6/ip6_tables.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">\"GPL\"</span>);</span><br><span class=\"line\">MODULE_AUTHOR(<span class=\"string\">\"Netfilter Core Team &lt;coreteam@netfilter.org&gt;\"</span>);</span><br><span class=\"line\">MODULE_DESCRIPTION(<span class=\"string\">\"Xtables: multiple port matching for TCP, UDP, UDP-Lite, SCTP and DCCP\"</span>);</span><br><span class=\"line\">MODULE_ALIAS(<span class=\"string\">\"ipt_test\"</span>);</span><br><span class=\"line\">MODULE_ALIAS(<span class=\"string\">\"ip6t_test\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">test_mt(<span class=\"keyword\">const</span> struct sk_buff *skb, struct xt_action_param *par)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_test</span> *<span class=\"title\">testinfo</span> = <span class=\"title\">par</span>-&gt;<span class=\"title\">matchinfo</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iphdr</span> *<span class=\"title\">ip</span>;</span></span><br><span class=\"line\">\tip = ip_hdr(skb);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (testinfo-&gt;s_addr == ip-&gt;saddr)&#123;</span><br><span class=\"line\">\t\tprintk(<span class=\"string\">\"match ip [%s]\"</span>,ip-&gt;saddr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">check(<span class=\"keyword\">u_int16_t</span> proto)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> proto == IPPROTO_TCP;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> *</span><br><span class=\"line\">inet_ntoa(struct in_addr ina)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"keyword\">sizeof</span> <span class=\"string\">\"aaa.bbb.ccc.ddd\"</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *ucp = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)&amp;ina;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">sprintf</span>(buf, <span class=\"string\">\"%d.%d.%d.%d\"</span>,</span><br><span class=\"line\">\t\tucp[<span class=\"number\">0</span>] &amp; <span class=\"number\">0xff</span>,</span><br><span class=\"line\">\t\tucp[<span class=\"number\">1</span>] &amp; <span class=\"number\">0xff</span>,</span><br><span class=\"line\">\t\tucp[<span class=\"number\">2</span>] &amp; <span class=\"number\">0xff</span>,</span><br><span class=\"line\">\t\tucp[<span class=\"number\">3</span>] &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> buf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">test_mt_check</span><span class=\"params\">(<span class=\"keyword\">const</span> struct xt_mtchk_param *par)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_ip</span> *<span class=\"title\">ip</span> = <span class=\"title\">par</span>-&gt;<span class=\"title\">entryinfo</span>;</span></span><br><span class=\"line\">\tprintk(<span class=\"string\">\"input ip:%s\"</span>, inet_ntoa(ip-&gt;src));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_match</span> <span class=\"title\">test_mt_reg</span> __<span class=\"title\">read_mostly</span> = &#123;</span></span><br><span class=\"line\">\t.name\t\t= <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">\t.family\t\t= NFPROTO_IPV4,</span><br><span class=\"line\">\t.revision\t= <span class=\"number\">1</span>,</span><br><span class=\"line\">\t.checkentry\t= test_mt_check,</span><br><span class=\"line\">\t.match\t\t= test_mt,</span><br><span class=\"line\">\t.matchsize\t= <span class=\"keyword\">sizeof</span>(struct xt_test),</span><br><span class=\"line\">\t.me\t\t= THIS_MODULE,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> __<span class=\"function\">init <span class=\"title\">test_mt_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tprintk(<span class=\"string\">\"test module init sucess\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> xt_register_match(&amp;test_mt_reg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __<span class=\"function\"><span class=\"built_in\">exit</span> <span class=\"title\">test_mt_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\txt_unregister_match(&amp;test_mt_reg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module_init(test_mt_init);</span><br><span class=\"line\">module_exit(test_mt_exit);</span><br></pre></td></tr></table></figure>\n\n<p>用户部分：libxt_test.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;xtables.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits.h&gt; /* INT_MAX in ip_tables.h/ip6_tables.h */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter_ipv4/ip_tables.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter_ipv6/ip6_tables.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter/xt_test.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> &#123;</span><br><span class=\"line\">\tO_SOURCE_PORTS = <span class=\"number\">0</span>,</span><br><span class=\"line\">\tO_DEST_PORTS,</span><br><span class=\"line\">\tO_SD_PORTS,</span><br><span class=\"line\">\tF_SOURCE_PORTS = <span class=\"number\">1</span> &lt;&lt; O_SOURCE_PORTS,</span><br><span class=\"line\">\tF_DEST_PORTS   = <span class=\"number\">1</span> &lt;&lt; O_DEST_PORTS,</span><br><span class=\"line\">\tF_SD_PORTS     = <span class=\"number\">1</span> &lt;&lt; O_SD_PORTS,</span><br><span class=\"line\">\tF_ANY          = F_SOURCE_PORTS | F_DEST_PORTS | F_SD_PORTS,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Function which prints out usage message. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test_help</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(</span><br><span class=\"line\"><span class=\"string\">\"test match options:\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\" --source-ip [ip]\\n\"</span></span><br><span class=\"line\"><span class=\"string\">\" NOTE: just for test.\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_option_entry</span> <span class=\"title\">test_opts</span>[] = &#123;</span></span><br><span class=\"line\">\t&#123;.name = <span class=\"string\">\"source-ip\"</span>, .id = O_SOURCE_PORTS, .type = XTTYPE_STRING,</span><br><span class=\"line\">\t .excl = F_ANY, .flags = XTOPT_INVERT&#125;,</span><br><span class=\"line\">\tXTOPT_TABLEEND,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *</span><br><span class=\"line\">proto_to_name(<span class=\"keyword\">uint8_t</span> proto)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (proto) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> IPPROTO_TCP:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"tcp\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span></span><br><span class=\"line\">parse_srource_ip(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *portstring)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *buffer;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">addr</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tbuffer = strdup(portstring);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!buffer) xtables_error(OTHER_PROBLEM, <span class=\"string\">\"strdup failed\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!inet_aton(buffer, &amp;addr)) xtables_error(OTHER_PROBLEM, <span class=\"string\">\"ip not vaild\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(buffer);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)addr.s_addr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *</span><br><span class=\"line\">check_proto(<span class=\"keyword\">uint16_t</span> pnum, <span class=\"keyword\">uint8_t</span> invflags)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *proto;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (invflags &amp; XT_INV_PROTO)</span><br><span class=\"line\">\t\txtables_error(PARAMETER_PROBLEM,</span><br><span class=\"line\">\t\t\t   <span class=\"string\">\"test only works with TCP, UDP, UDPLITE, SCTP and DCCP\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((proto = proto_to_name(pnum)) != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> proto;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!pnum)</span><br><span class=\"line\">\t\txtables_error(PARAMETER_PROBLEM,</span><br><span class=\"line\">\t\t\t   <span class=\"string\">\"test needs `-p tcp', `-p udp', `-p udplite', \"</span></span><br><span class=\"line\">\t\t\t   <span class=\"string\">\"`-p sctp' or `-p dccp'\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\txtables_error(PARAMETER_PROBLEM,</span><br><span class=\"line\">\t\t\t   <span class=\"string\">\"test only works with TCP, UDP, UDPLITE, SCTP and DCCP\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __test_parse(struct xt_option_call *cb, <span class=\"keyword\">uint16_t</span> pnum,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">uint8_t</span> invflags)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *proto;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_test</span> *<span class=\"title\">multiinfo</span> = <span class=\"title\">cb</span>-&gt;<span class=\"title\">data</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\txtables_option_parse(cb);</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (cb-&gt;entry-&gt;id) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> O_SOURCE_PORTS:</span><br><span class=\"line\">\t\t<span class=\"comment\">//proto = check_proto(pnum, invflags);</span></span><br><span class=\"line\">\t\tmultiinfo-&gt;s_addr = (__be32)parse_srource_ip(cb-&gt;arg);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cb-&gt;invert)</span><br><span class=\"line\">\t\txtables_error(PARAMETER_PROBLEM,</span><br><span class=\"line\">\t\t\t   <span class=\"string\">\"test.0 does not support invert\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test_parse</span><span class=\"params\">(struct xt_option_call *cb)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_entry</span> *<span class=\"title\">entry</span> = <span class=\"title\">cb</span>-&gt;<span class=\"title\">xt_entry</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __test_parse(cb,</span><br><span class=\"line\">\t       entry-&gt;ip.proto, entry-&gt;ip.invflags);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test_check</span><span class=\"params\">(struct xt_fcheck_call *cb)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cb-&gt;xflags == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\txtables_error(PARAMETER_PROBLEM, <span class=\"string\">\"test expection an option\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">__test_print(<span class=\"keyword\">const</span> struct xt_entry_match *match, <span class=\"keyword\">int</span> numeric,</span><br><span class=\"line\">                  <span class=\"keyword\">uint16_t</span> proto)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_test</span> *<span class=\"title\">multiinfo</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t= (<span class=\"title\">const</span> <span class=\"title\">struct</span> <span class=\"title\">xt_test</span> *)<span class=\"title\">match</span>-&gt;<span class=\"title\">data</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">addr</span>;</span></span><br><span class=\"line\">\taddr.s_addr = (<span class=\"keyword\">in_addr_t</span>)multiinfo-&gt;s_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" test \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,inet_ntoa(addr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test_print</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *ip_void,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">const</span> struct xt_entry_match *match, <span class=\"keyword\">int</span> numeric)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_ip</span> *<span class=\"title\">ip</span> = <span class=\"title\">ip_void</span>;</span></span><br><span class=\"line\">\t__test_print(match, numeric, ip-&gt;proto);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> __test_save(<span class=\"keyword\">const</span> struct xt_entry_match *match,</span><br><span class=\"line\">                             <span class=\"keyword\">uint16_t</span> proto)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_test</span> *<span class=\"title\">multiinfo</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t= (<span class=\"title\">const</span> <span class=\"title\">struct</span> <span class=\"title\">xt_test</span> *)<span class=\"title\">match</span>-&gt;<span class=\"title\">data</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">addr</span>;</span></span><br><span class=\"line\">\taddr.s_addr = (<span class=\"keyword\">in_addr_t</span>)multiinfo-&gt;s_addr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\" test \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,inet_ntoa(addr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test_save</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *ip_void,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">const</span> struct xt_entry_match *match)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipt_ip</span> *<span class=\"title\">ip</span> = <span class=\"title\">ip_void</span>;</span></span><br><span class=\"line\">\t__test_save(match, ip-&gt;proto);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xtables_match</span> <span class=\"title\">test_mt_reg</span> = &#123;</span></span><br><span class=\"line\">\t.family        = NFPROTO_IPV4,</span><br><span class=\"line\">\t.name          = <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">\t.revision      = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t.version       = XTABLES_VERSION,</span><br><span class=\"line\">\t.size          = XT_ALIGN(<span class=\"keyword\">sizeof</span>(struct xt_test)),</span><br><span class=\"line\">\t.userspacesize = XT_ALIGN(<span class=\"keyword\">sizeof</span>(struct xt_test)),</span><br><span class=\"line\">\t.help          = test_help,</span><br><span class=\"line\">\t.x6_parse      = test_parse,</span><br><span class=\"line\">\t.x6_fcheck     = test_check,</span><br><span class=\"line\">\t.print         = test_print,</span><br><span class=\"line\">\t.save          = test_save,</span><br><span class=\"line\">\t.x6_options    = test_opts,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">_init(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\txtables_register_match(&amp;test_mt_reg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>头文件：xt_test.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _XT_TEST_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _XT_TEST_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Must fit inside union xt_matchinfo: 16 bytes */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xt_test</span> &#123;</span></span><br><span class=\"line\">\t__be32\ts_addr;\t\t\t\t<span class=\"comment\">/* Type of comparison */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/*_XT_MULTIPORT_H*/</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>首先把对应的文件放到对应的位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xt_test.c   -&gt; /&lt;linux-kernel-src&gt;/net/ipv4/netfilter/</span><br><span class=\"line\">xt_test.h   -&gt; /&lt;linux-kernel-src&gt;/include/uapi/linux/netfilter_ipv4</span><br><span class=\"line\">libxt_test.c   -&gt; /&lt;iptables-x.x.x&gt;/extensions/</span><br></pre></td></tr></table></figure>\n\n<p>用户态源码编译：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./autogen.sh</span><br><span class=\"line\">./configure --prefix=/usr/local/iptables</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<p>内核源码编译：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;your_kernel_src_path&gt;/net/netfilter</span><br><span class=\"line\">#修改Makefile，新增：obj-$(CONFIG_NETFILTER_XT_MATCH_TEST) += xt_test.o</span><br><span class=\"line\">make CONFIG_NETFILTER_XT_MATCH_TEST=m -C &lt;your_kernel_src_path&gt;  M=`pwd` modules</span><br></pre></td></tr></table></figure>\n\n<p>如果出现<code>No rule to make target &#39;tools/objtool/objtool&#39;</code>的错误：</p>\n<ol>\n<li><code>yum install kernel-headers kernel-devel -y</code></li>\n<li>找到<code>/usr/src/kernels/</code>下安装的tools/objtool/objtool/objtool，将可执行文件拷贝到你的内核源码对应目录。</li>\n<li>重新执行make</li>\n</ol>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ol>\n<li><p>先把编译得到的<code>xt_test.ko</code>放到<code>/usr/lib/modules/3.10.0.xxxx/kernel/net/netfilter/</code>目录下。</p>\n</li>\n<li><p>添加iptables规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/iptables/sbin/iptables -A INPUT -p tcp -m test --source-ip &lt;ip&gt; -j DROP</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用你配置了的<code>&lt;ip&gt;</code>地址的机器来访问目标机器(tcp)</p>\n</li>\n<li><p><code>dmesg</code>命令来查看打印输出的消息。</p>\n</li>\n</ol>\n<p>如果出现<code>Couldn&#39;t load match &#39;test11&#39;:No such file or directory</code>证明你用户态代码，没有找到你编译的模块。<br>如果出现<code>iptables:No chain/target/match by the name</code>证明你内核相应的模块没有嵌入。<br>如果<code>dmesg</code>没有显示出你想要的信息，可能是输出日志级别不够，尝试：<code>dmesg -n 7</code>；或者是存在缓存，尝试删除原有iptables规则，重新配置，之前的日志消息就打印了。</p>\n<h2 id=\"链接跟踪-conntrack\"><a href=\"#链接跟踪-conntrack\" class=\"headerlink\" title=\"链接跟踪(conntrack)\"></a>链接跟踪(conntrack)</h2><p>功能就是给链接做标识。这一章节主要都是参考(也就是抄[狗头])Netfilter<a href=\"http://blog.chinaunix.net/uid-26517122-id-4281274.html\" target=\"_blank\" rel=\"noopener\">链接跟踪简介</a>(想看更详细内容最好看原文，我这里只是简单截取了主要核心部分，就不重复copy了)，他其他的netfilter相关的解析也写的挺好，建议去看看。</p>\n<h4 id=\"conntrack介绍\"><a href=\"#conntrack介绍\" class=\"headerlink\" title=\"conntrack介绍\"></a>conntrack介绍</h4><p> 我们期望一种场景，即外网无法访问内网，但是内网能够访问外网。但配置了拒绝所有外网来的数据包以后，内网访问外网返回的包也无法进入内网，导致内网访问外网失败。因此我们可以利用conntrack(链接跟踪)来解决这一问题。<br>通用的数据访问方式分两种：</p>\n<ol>\n<li>TCP这种面向连接的协议，源和目的的连接终止时，状态防火墙通过检查TCP头的控制标记来跟踪整个过程，并动态地将该连接从状态表中删除。</li>\n<li>DP和ICMP不是面向连接的协议，无法通过报文来判断连接是否终止。状态防火墙会把将UDP流量看成是有连接的，通过在状态表中设置一个定时器，来定期的老化删除一些无用连接。</li>\n</ol>\n<p>期望连接：<br>有一些协议，连接时会分为控制连接和数据连接，我们把数据连接称为是控制连接的期望连接。<br>我们以tftp协议为例来说明一下期望连接：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/%E6%9C%9F%E6%9C%9B%E9%93%BE%E6%8E%A5.jpg\"><br>如果，客户端先发起连接，使用熟知的69端口。因为69端口是分给了tftp server的，tftp server接收到连接请求后，会自己申请一个server主机上未用的端口1235（因为tftp server的69端口还需要接收其他client发来的连接请求，所有不能使用69来传输数据），给tftp client发送回应。以后client和server就使用端口1235来进行通信了。<br>现在来看，上面连接是两条不同的连接。我们把第二条连接是其一条连接的期望连接。<br>比如防火墙上只放开了目的端口号69的访问，当内网访问外网的tftp server时，回应报文就会被拦截，导致tftp 功能失效。状态防火墙提出期望连接，当回应报文根据目的端口号发现该回应是已存在连接的期望连接，防火墙放过该回应报文，这样tftp功能OK。<br>做个实验：<br>在一台主机上配置如下规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables  -P  INPUT DROP   //丢弃所有到本机的报文</span><br><span class=\"line\">iptables -A INPUT -p udp --dport 69 -j ACCEPT //放行目的端口69的报文</span><br></pre></td></tr></table></figure>\n\n<p>这时把该主机当tftp client，从tftp server下载东西是无法下载的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A INPUT -m conntrack --ctstatus EXPECTED -j ACCEPT//放行期望连接</span><br></pre></td></tr></table></figure>\n\n<p>这时tftp功能OK。</p>\n<p>因此，为了满足上述需求，链接跟踪实现了以下功能：</p>\n<ol>\n<li>建立一张连接状态表，来存放连接记录</li>\n<li>连接状态表中，有定时的垃圾回收机制</li>\n<li>根据报文进行连接状态的建立及对已有连接状态的更新</li>\n<li>期望连接的建立和关联</li>\n<li>在连接跟踪上需要提供易于扩展的接口，来实现用户自定义的一些功能。<br>下面本文将从两个方向来描述链接跟踪，一是从模块扩展上，模块如何注册到conntrack中，提供报文的处理方法；第二是数据流上，报文时如何一步步的在netfilter框架中流动，被conntrack处理的。</li>\n</ol>\n<h3 id=\"conntrack标识\"><a href=\"#conntrack标识\" class=\"headerlink\" title=\"conntrack标识\"></a>conntrack标识</h3><p>连接跟踪是根据报文的L3，L4层头信息来标识一条连接的，而这些标识需要一个数据结构来进行定义和存储。改数据结构包含了一条连接的全部信息，并且链接跟踪的查找，建立，关联和更新都是依据该数据结构，我们称该数据结构为元组。<br><strong>元组数据结构：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_tuple</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_man</span> <span class=\"title\">src</span>;</span>  <span class=\"comment\">//源端信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//目的端信息。</span></span><br><span class=\"line\">    <span class=\"comment\">/* These are the parts of the tuple which are fixed. */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">union</span> nf_inet_addr u3;  <span class=\"comment\">//目的IP地址</span></span><br><span class=\"line\">　　  <span class=\"comment\">//目的端口的信息，不同协议使用不同的报文字段</span></span><br><span class=\"line\">        <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">             <span class=\"comment\">/* Add other protocols here. */</span></span><br><span class=\"line\">            __be16 all;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">                __be16 port;<span class=\"comment\">//TCP报文就使用目的端口</span></span><br><span class=\"line\">            &#125; tcp;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">                 __be16 port;<span class=\"comment\">//UDP报文就使用目的端口</span></span><br><span class=\"line\">            &#125; udp;</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">                <span class=\"keyword\">u_int8_t</span> type, code;<span class=\"comment\">//ICMPP报文使用type，cod两个字段</span></span><br><span class=\"line\">            &#125; icmp;</span><br><span class=\"line\">            ... <span class=\"comment\">//其他协议此处省略</span></span><br><span class=\"line\">        &#125; u;</span><br><span class=\"line\">        <span class=\"comment\">//传输层协议类型，既L4协议类型</span></span><br><span class=\"line\">        <span class=\"keyword\">u_int8_t</span> protonum;</span><br><span class=\"line\">        <span class=\"comment\">//标识连接的方向，一条连接分两个方向，一来一回</span></span><br><span class=\"line\">        <span class=\"comment\">/* The direction (for tuplehash) */</span></span><br><span class=\"line\">        <span class=\"keyword\">u_int8_t</span> dir;</span><br><span class=\"line\">    &#125; dst;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_man</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">     <span class=\"keyword\">union</span> nf_inet_addr u3; <span class=\"comment\">//IP地址</span></span><br><span class=\"line\">    <span class=\"comment\">//L4协议源端信息</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> nf_conntrack_man_proto u;</span><br><span class=\"line\">    <span class=\"comment\">//L3协议类型</span></span><br><span class=\"line\">    <span class=\"keyword\">u_int16_t</span> l3num;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//L4层源端的信息。</span></span><br><span class=\"line\"><span class=\"keyword\">union</span> nf_conntrack_man_proto</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Add other protocols here. */</span></span><br><span class=\"line\">    __be16 all;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">        __be16 port;</span><br><span class=\"line\">    &#125; tcp;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">        __be16 port;</span><br><span class=\"line\">    &#125; udp;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">        __be16 id;</span><br><span class=\"line\">    &#125; icmp;</span><br><span class=\"line\">    .... <span class=\"comment\">//其他协议此处省略</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>从上面数据结构定义看，标识一条连接的元组为：<br>TCP  源IP，源端口，L3协议类型，目的IP，目的端口号，L4协议类型<br>UDP  源IP，源端口，L3协议类型，目的IP，目的端口号，L4协议类型<br>ICMP 源IP，L3协议类型，目的IP，id，type，code,，L4协议类型</p>\n<p><strong>conntrack数据结构：</strong><br>一个连接包含正反两个方向的两条报文流.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conn</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//对连接的引用计数</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack</span> <span class=\"title\">ct_general</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">spinlock_t</span> lock;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//正向和反向的连接元组信息。</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_tuple_hash</span> <span class=\"title\">tuplehash</span>[<span class=\"title\">IP_CT_DIR_MAX</span>];</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//该连接的连接状态</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> status;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果该连接是期望连接，指向跟其关联的主连接</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conn</span> *<span class=\"title\">master</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//连接垃圾回收定时器</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timer_list</span> <span class=\"title\">timeout</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*存储特定协议的连接跟踪信息*/</span></span><br><span class=\"line\">    <span class=\"keyword\">union</span> nf_conntrack_proto proto;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*指向扩展结构，该结构中包含一些基于连接的功能扩展处理函数 */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_ct_ext</span> *<span class=\"title\">ext</span>;</span></span><br><span class=\"line\">   <span class=\"comment\">//网络命名空间</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">net</span> *<span class=\"title\">ct_net</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_tuple_hash</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_nulls_node</span> <span class=\"title\">hnnode</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack_tuple</span> <span class=\"title\">tuple</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>每个struct nf_conn实例代表一个连接。每个skb都有一个指针，指向和它相关联的连接。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sk_buff</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_conntrack</span> *<span class=\"title\">nfct</span>;</span><span class=\"comment\">//指向struct nf_conn实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tkmemcheck_bitfield_begin(flags1);</span><br><span class=\"line\">\t__u8 local_df:<span class=\"number\">1</span>,</span><br><span class=\"line\">\tcloned:<span class=\"number\">1</span>,</span><br><span class=\"line\">\tip_summed:<span class=\"number\">2</span>,</span><br><span class=\"line\">\tnohdr:<span class=\"number\">1</span>,</span><br><span class=\"line\">\tnfctinfo:<span class=\"number\">3</span>; <span class=\"comment\">//记录报文的连接状态。</span></span><br><span class=\"line\">\tkmemcheck_bitfield_end(flags1);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>conntrack的存储:</strong><br><em>/include/net/netns/conntrack.h</em><br>每个网络命名空间有如下一个数据结构的实例，来管理和存放生成的连接的一些信息。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">netns_ct</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">atomic_t</span> count;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> expect_count;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> htable_size; </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kmem_cache</span> *<span class=\"title\">nf_conntrack_cachep</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_nulls_head</span> *<span class=\"title\">hash</span>;</span><span class=\"comment\">//存放已经经过确认的连接hash表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_head</span> *<span class=\"title\">expect_hash</span>;</span><span class=\"comment\">//期望连接hash表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_nulls_head</span> <span class=\"title\">unconfirmed</span>;</span> <span class=\"comment\">//存放没经过确认的连接hash表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hlist_nulls_head</span> <span class=\"title\">dying</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ip_conntrack_stat</span> *<span class=\"title\">stat</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> hash_vmalloc;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> expect_vmalloc;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *slabname;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>整体conntrack相关的数据结构如下：<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/conntrack%E7%9A%84%E5%AD%98%E5%82%A8.jpg\"></p>\n<h3 id=\"conntrack的建立过程\"><a href=\"#conntrack的建立过程\" class=\"headerlink\" title=\"conntrack的建立过程\"></a>conntrack的建立过程</h3><p>我们先来看一下iptables定义的连接状态：<br><strong>INVALID</strong> :无效连接，防火墙一般会丢弃该连接<br><strong>NEW</strong>：新建立的，既只是通信双方中只一方发送了报文，还没有得到回应的<br><strong>ESTABLISHED</strong>：已经得到回应的连接。既通信双方都发送过报文的连接<br><strong>RELATED</strong>:关联的连接，既有期望连接关联的连接<br><strong>UNTRACKED</strong>：不进行连接跟踪的连接<br><strong>SNAT</strong>:配置了SNAT的连接<br><strong>DNAT</strong>:配置了DNAT的连接</p>\n<h4 id=\"一般连接建立过程：\"><a href=\"#一般连接建立过程：\" class=\"headerlink\" title=\"一般连接建立过程：\"></a>一般连接建立过程：</h4><p>这里我们拿一个udp通信的例子来走一遍连接建立的过程。先不具体到代码的实现。</p>\n<p>1、首先，PC和SERVER使用udp报文进行通信。<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/conntrack%E4%B8%80%E8%88%AC%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B1.jpg\"><br><strong>PC———&gt;SERVER</strong></p>\n<p>报文的元组信息如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sip：1.1.1.6</span><br><span class=\"line\">Sport:1116</span><br><span class=\"line\">Dip:1.1.1.5</span><br><span class=\"line\">Dport:1115</span><br><span class=\"line\">l4protonum:udp</span><br><span class=\"line\">L3num:INET</span><br></pre></td></tr></table></figure>\n\n<p>报文到达防火墙，防火墙的处理如下：<br><strong>防火墙入口处:</strong></p>\n<ol>\n<li>conntrack模块截获报文。</li>\n<li>根据报文的元组信息在防火墙内的连接表中查找是否已经存在建立的连接，因为第一次通信，没有已建立的连接。</li>\n</ol>\n<p>建立一个新的连接，连接的正反向元组信息如下图，并把该连接的正向连接A挂到unconfirmed链表上<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/conntrack%E4%B8%80%E8%88%AC%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B2.jpg\"><br>如上，新建连接后，把该连接和报文进行关联，连接状态是NEW。</p>\n<p><strong>防火墙出口处：</strong><br>拦截报文后，根据报文携带的连接信息，找到连接，把该连接的正向连接A从unconfirmed链表上摘下来，把该连接的正反向连接A和B加入到连接hash表中。并把该连接确认状态置为confirmed状态，即置位status的IPS_CONFIRMED_BIT位。<br><img src=\"/2020/09/14/Netfilter介绍及其实现原理/conntrack%E4%B8%80%E8%88%AC%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B3.jpg\"></p>\n<p><strong>SERVER—–&gt;PC</strong><br>SERVER回应PC的报文元组信息如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sip：1.1.1.5</span><br><span class=\"line\">Sport:1115</span><br><span class=\"line\">Dip:1.1.1.6</span><br><span class=\"line\">Dport:1116</span><br><span class=\"line\">l4protonum:udp</span><br><span class=\"line\">L3num:INET</span><br></pre></td></tr></table></figure>\n\n<p>报文到达防火墙，防火墙的处理如下：<br><strong>防火墙入口处:</strong></p>\n<ol>\n<li>conntrack模块截获报文。</li>\n<li>根据报文的元组信息在防火墙内的连接表中查找是否已经存在建立的连接，可以找到已建立的连接B。</li>\n<li>发现连接B里的dir是reply，表明该连接已经有回应报文了，给连接中的status置位IPS_SEEN_REPLY_BIT，表明该连接已经收到了回应报文。这时把报文的连接状态变为ESTABLISHED</li>\n</ol>\n<p><strong>防火墙出口处：</strong></p>\n<ol>\n<li>拦截报文后，根据报文携带的连接信息，找到连接，发现该连接确认状态是confirmed的，直接不进行连接处理。</li>\n</ol>\n<p>至此，连接建立完成。</p>\n<p>后续该连接的正反方向的报文都可以在连接表中查到相应的连接，就可以根据连接进行相应的处理了。</p>\n<h4 id=\"期望连接的建立过程：\"><a href=\"#期望连接的建立过程：\" class=\"headerlink\" title=\"期望连接的建立过程：\"></a>期望连接的建立过程：</h4><p>这里就不介绍了，详情可看<a href=\"http://blog.chinaunix.net/uid-26517122-id-4281305.html\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<p><strong>奉上原文后续章节：</strong><br><a href=\"http://blog.chinaunix.net/uid-26517122-id-4292718.html\" target=\"_blank\" rel=\"noopener\">Netfilter中conntrack 功能扩展机制</a><br><a href=\"http://blog.chinaunix.net/uid-26517122-id-4292730.html\" target=\"_blank\" rel=\"noopener\">Netfilter中conntrack helper扩展实现</a><br><a href=\"http://blog.chinaunix.net/uid-26517122-id-4292946.html\" target=\"_blank\" rel=\"noopener\">Netfilter中L3和L4层提供的conntrack处理方法</a><br><a href=\"http://blog.chinaunix.net/uid-26517122-id-4293010.html\" target=\"_blank\" rel=\"noopener\">Netfilter中conntrack的HOOK点</a><br><a href=\"http://blog.chinaunix.net/uid-26517122-id-4293135.html\" target=\"_blank\" rel=\"noopener\">Nefilter中IP conntrack核心函数详解</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://zh.wikipedia.org/wiki/Netfilter\" target=\"_blank\" rel=\"noopener\">Netfilter</a><br><a href=\"https://www.ibm.com/developerworks/cn/linux/network/s-netip/index.html\" target=\"_blank\" rel=\"noopener\">netfilter/iptables 简介</a><br><a href=\"https://www.xiayinchang.top/post/d617cc74.html\" target=\"_blank\" rel=\"noopener\">Netfilter 框架及其周边组件</a><br><a href=\"https://opengers.github.io/openstack/openstack-base-netfilter-framework-overview/#connection-tracking\" target=\"_blank\" rel=\"noopener\">netfilter框架研究</a><br><a href=\"https://cloud.tencent.com/developer/article/1199506\" target=\"_blank\" rel=\"noopener\">使用iptables控制网络流量</a><br><a href=\"https://xiaoz.co/2020/01/10/a-deep-dive-into-iptables-and-netfilter-architecture/\" target=\"_blank\" rel=\"noopener\">深入理解Iptables和Netfilter架构</a><br><a href=\"http://arthurchiao.art/blog/deep-dive-into-iptables-and-netfilter-arch-zh/\" target=\"_blank\" rel=\"noopener\">深入理解Iptables和Netfilter架构</a><br><a href=\"https://blog.csdn.net/haolipengzhanshen/article/details/85007427\" target=\"_blank\" rel=\"noopener\">iptables和netfilter的通信流程</a><br><a href=\"https://blog.csdn.net/venoy4806/article/details/5136626\" target=\"_blank\" rel=\"noopener\">netfilter内核源码分析</a><br><a href=\"https://blog.csdn.net/venoy4806/article/details/5136626\" target=\"_blank\" rel=\"noopener\">Netfilter内核源码分析</a><br><a href=\"http://chinaunix.net/uid-29547110-id-5038602.html\" target=\"_blank\" rel=\"noopener\">Netfilter全面讲解</a><br><a href=\"http://blog.chinaunix.net/uid-26517122-id-4292718.html\" target=\"_blank\" rel=\"noopener\">conntrack详解</a></p>"},{"title":"TLV数据传输协议及简单实现(C)","date":"2019-08-27T03:19:02.000Z","_content":"\n有关TLV协议的相关内容，以及基于C语言的简单实现。都是个人理解，有许多不足，仅供参考(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n## 概要介绍\n首先，关于TLV协议本质，网上有许多讲解，可以先搜索[TLV相关讲解](http://www.wtango.com/tlv%E7%BC%96%E7%A0%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1/)，我自己的实现思路参考[这篇帖子](https://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html)。\n这里通俗概括：\nT：Type，表示字段标签和编码格式。\nL：Length，表示数据长度。\nV：Value，表示实际传输内容。\n![TLV](TLV数据传输协议及简单实现-C/TLV.png)\n[图片来源](http://www.wtango.com/tlv%E7%BC%96%E7%A0%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1/)：http://www.wtango.com/\n\n## TLV的优势\n而使用TLV的作用是什么呢？概括为将格式数据序列化处理（可能表述不太专业），并且能够有一个约定的通信方式进行通信。意思是，方便你在网络中传输结构体。例如：\n你想传输结构体：\n````\nstruct Message{    \n    unsigned int id; \n    long num;\n    char name[128];\n};\n````\n\n你会开辟一片buf来存放这个结构体，然后传输过去，如果其中有指针，还需要数据整理。\n这个思路意味着你传输数据针对的是你结构体中的每一个数据。而如果你要增加一个字段，则需要关注你传输代码的正确与否。例如你增加一个`char new[1024]`那么，你开辟的buf，返回的数据对应，都需要检查。正如你买菜的时候需要关注每一样菜放的位置对不对。并且，不同设备和语言之间传输数据时，这种传输方式就显得非常难受，甚至不可用。\n使用TLV的好处，在于将你的传输数据进行打包：\n\n````\nT：0x01\nL：136\nV：\nstruct Message{    \n    unsigned int id; \n    long num;\n    char name[128];\n};\n````\n这样你在以TLV格式编写传输代码的时候，就不会关注实际传输内容是什么。仅仅将内容当成一个装满蔬菜的篮子，而非每个蔬菜。这样，你如何更改菜篮子里的蔬菜，对于整个传输过程来说，都不受影响。并且只要支持标准的TLV传输协议的，不论什么底层平台和语言，都能够相互传输。说白了，就是一个网络传输的通用性封装。┐(´-｀)┌ \n\n## 简单示例代码\n代码参考两篇文章：[TLV简介](https://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html) \n[C语言socket编程](https://blog.csdn.net/lovekun1989/article/details/41042273) 其中关于实际数据的大小端转换没有做，在同平台计算机没有影响。并且我这儿只是非常简单的示例，没有按照标准的TLV进行TAG解析以及Length处理。有兴趣的可以按照这个[更加标准的示例](https://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html)来看。\n\nTLV.c:\n````\n//\n// Created by JiHan on 2019/8/26.\n//\n\n#include <stdlib.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include \"TLV.h\"\n\n\nint send_tlv(int sk, unsigned char *buf, int buf_len, int status){\n    TLV_ENTITY *send_tlv=NULL;\n    int tag = sk;\n\n    if (buf == NULL){\n        printf(\"buffer is null!\\n\");\n        return -1;\n    }\n\n\n    send_tlv = (TLV_ENTITY *)malloc(buf_len+TLV_TAG_LEN);\n    memset(send_tlv,0,buf_len+TLV_TAG_LEN);\n\n    //把数据整合到TLV结构中\n    send_tlv->length = htonl(buf_len);\n    send_tlv->tag = htonl(tag);\n    send_tlv->value = (unsigned char*)send_tlv +TLV_TAG_LEN;\n    memcpy(send_tlv->value,buf,buf_len);\n\n    //发送TLV结构\n    send(sk, (char *)send_tlv, sizeof(struct Message)+TLV_TAG_LEN,status);\n\n    if (send_tlv != NULL){\n        free(send_tlv);\n    }\n\n    return 0;\n}\n\nint recv_tlv(int sk, unsigned char *buf, int buf_len, int status){\n    TLV_ENTITY send_tlv = {0, 0, NULL};\n    int onece = 0, dataNum = 0;\n    char tmp_tlv[1024];\n\n    if (buf == NULL){\n        printf(\"buffer is null!\\n\");\n        return -1;\n    }\n\n    //获取TLV数据结构头\n    onece = recv(sk, tmp_tlv, TLV_TAG_LEN, status);\n    memcpy(&send_tlv.tag, tmp_tlv, 4);\n    send_tlv.tag = ntohl(send_tlv.tag);\n    memcpy(&send_tlv.length, tmp_tlv+4, 4);\n    send_tlv.length = ntohl(send_tlv.length);\n    send_tlv.value = (unsigned char *) malloc(send_tlv.length);\n\n    //根据头数据接收后续value数据\n    while (dataNum < send_tlv.length){\n        onece = recv(sk, tmp_tlv, 1024, status);\n        memcpy(send_tlv.value + dataNum, tmp_tlv, onece);\n        dataNum += onece;\n    }\n\n    if(buf_len < send_tlv.length){\n        printf(\"buffer overflow!\\n\");\n        return -1;\n    }\n\n    memcpy(buf, send_tlv.value, send_tlv.length);\n    if (send_tlv.value != NULL){\n        free(send_tlv.value);\n    }\n\n    return dataNum;\n}\n````\n\nTLV.h：\n````\n//\n// Created by JiHan on 2019/8/26.\n//\n\n#ifndef __TLV_H__\n#define __TLV_H__\n\n#include <stdio.h>\n#include <string.h>\n\n#define TLV_TAG_LEN 10\n\n\nstruct Message{\n    unsigned int id;\n    long num;\n    char name[128];\n    char hello[24];\n    char new[128];\n};\n\n\nint recv_tlv(int sk, unsigned char *buf, int buf_len, int status);\nint send_tlv(int sk, unsigned char *buf, int buf_len, int status);\n\n#endif\n````\n\ntest.c:\n````\n\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <netdb.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\n#include <stdlib.h>\n#include \"TLV.h\"\n\n\n#define SERVER_PORT 9111\n\nint server(){\n    int sk;\n    struct sockaddr_in server_addr, clientAddr;\n    int addr_len = sizeof(clientAddr);\n    int client;\n//    char buffer[200];\n    int iDataNum = 0;\n\n    struct Message MSG;\n    //char recvbuf[1024];\n    //int recvNum;\n\n    if((sk = socket(AF_INET, SOCK_STREAM, 0)) < 0)\n    {\n        printf(\"err socket\\n\");\n        return -1;\n    }\n    memset(&server_addr, 0, sizeof(server_addr));\n    //初始化服务器端的套接字，并用htons和htonl将端口和地址转成网络字节序\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(SERVER_PORT);\n    //ip可是是本服务器的ip，也可以用宏INADDR_ANY代替，代表0.0.0.0，表明所有地址\n    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n    //对于bind，accept之类的函数，里面套接字参数都是需要强制转换成(struct sockaddr *)\n    //bind三个参数：服务器端的套接字的文件描述符，\n    if(bind(sk, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)\n    {\n        printf(\"err connect\\n\");\n        return -1;\n    }\n    //设置服务器上的socket为监听状态\n    if(listen(sk, 5) < 0)\n    {\n        printf(\"err listen\\n\");\n        return -1;\n    }\n\n    while(1) {\n        printf(\"Listening on port: %d\\n\", SERVER_PORT);\n        //调用accept函数后，会进入阻塞状态\n        //accept返回一个套接字的文件描述符，这样服务器端便有两个套接字的文件描述符，\n        //serverSocket和client。\n        //serverSocket仍然继续在监听状态，client则负责接收和发送数据\n        //clientAddr是一个传出参数，accept返回时，传出客户端的地址和端口号\n        //addr_len是一个传入-传出参数，传入的是调用者提供的缓冲区的clientAddr的长度，以避免缓冲区溢出。\n        //传出的是客户端地址结构体的实际长度。\n        //出错返回-1\n        client = accept(sk, (struct sockaddr *) &clientAddr, (socklen_t * ) & addr_len);\n        if (client < 0) {\n            printf(\"err accept\\n\");\n            continue;\n        }\n        printf(\"\\nrecv client data...\\n\");\n        //inet_ntoa   ip地址转换函数，将网络字节序IP转换为点分十进制IP\n        //表达式：char *inet_ntoa (struct in_addr);\n        printf(\"IP is %s\\n\", inet_ntoa(clientAddr.sin_addr));\n        printf(\"Port is %d\\n\", ntohs(clientAddr.sin_port));\n\n        iDataNum = recv_tlv(client, (unsigned char*)&MSG, sizeof(MSG), 0);\n        if (iDataNum <= 0) {\n            printf(\"err recv\\n\");\n            break;\n        }\n\n        printf(\"%d  %ld  %s  %s %s\\n\",MSG.id, MSG.num, MSG.name, MSG.hello, MSG.new);\n\n/*        while (1) {\n            iDataNum = recv(client, buffer, 1024, 0);\n            if (iDataNum <= 0) {\n                printf(\"err recv\\n\");\n                break;\n            }\n            buffer[iDataNum] = '\\0';\n            printf(\"%drecv data is %s\\n\", iDataNum, buffer);\n            send(client, buffer, iDataNum, 0);\n        }*/\n        close(client);\n    }\n    close(sk);\n    return 0;\n\n}\n\nint client(){\n    //客户端只需要一个套接字文件描述符，用于和服务器通信\n    int clientSocket;\n    //描述服务器的socket\n    struct sockaddr_in serverAddr;\n   // char sendbuf[200];\n   // char recvbuf[200];\n   // int iDataNum;\n\n    struct Message MSG = {100, 54321, \"huangjiahao\", \"world\", \"tttttest\"};\n\n    if((clientSocket = socket(AF_INET, SOCK_STREAM, 0)) < 0)\n    {\n        printf(\"err socket\\n\");\n        return 1;\n    }\n\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(SERVER_PORT);\n    //指定服务器端的ip，本地测试：127.0.0.1\n    //inet_addr()函数，将点分十进制IP转换成网络字节序IP\n    serverAddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    if(connect(clientSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0)\n    {\n        printf(\"err connect\\n\");\n        return 1;\n    }\n    printf(\"connect with destination host...\\n\");\n\n    //数据格式转化为tlv，进行发送\n    send_tlv(clientSocket,(unsigned char *)&MSG, sizeof(MSG), 0);\n\n/*    while(1)\n    {\n        printf(\"Input your word:>\");\n        scanf(\"%s\", sendbuf);\n        printf(\"\\n\");\n\n        send(clientSocket, sendbuf, strlen(sendbuf), 0);\n        if(strcmp(sendbuf, \"quit\") == 0)\n            break;\n        iDataNum = recv(clientSocket, recvbuf, 200, 0);\n        recvbuf[iDataNum] = '\\0';\n        printf(\"recv data of my world is: %s\\n\", recvbuf);\n    }*/\n    close(clientSocket);\n    return 0;\n\n}\n\nint main(int argv, char* arg[]){\n\n    if (argv > 1){\n        printf(\"start client...\\n\");\n        client();\n    } else{\n        printf(\"start server...\\n\");\n        server();\n    }\n\n    return 0;\n}\n\n````\n\nMakefile:\n````\n# by jihan\nDIR_INC = .\nDIR_SRC = .\nDIR_OBJ = .\nDIR_BIN = .\n\nEVENT_LIB = /usr/local/lib\nEVENT_INC = /usr/local/include\n\n\n#ALL_LD = -L${EVENT_LIB}\n#ALL_INC = -I${EVENT_INC}\nALL_LIB = -lssl\n\nCXX = g++\nCC = gcc\nCFLAGS = -g -O2 -Wall -Werror\nMPIF90 = mpiif90\n\nSRC = $(wildcard ${DIR_SRC}/*.c)\nOBJ = $(patsubst %.c,${DIR_OBJ}/%.o,$(notdir ${SRC}))\n\nTARGET = a.out\n\nBIN_TARGET = ${DIR_BIN}/${TARGET}\n\n.PHONY:all\nall: ${BIN_TARGET}\n\n${BIN_TARGET}: ${OBJ}\n\t$(CC) $(CFLAGS) $(OBJ)  -o $@ $(ALL_LD) $(ALL_LIB)\n\n${DIR_OBJ}/%.o:${DIR_SRC}/%.c\n\t$(CC) $(CFLAGS)  -c $< -o $@ $(ALL_INC)\n\n.PHONY:clean\nclean:\n\t-rm -f *.out\n\t-rm -f *.o\n#\t-rm -f ./ncfile/*.nc\n\n\nfixed=xy04c\n.PHONY:${fixed}\n${fixed}: ${fixed}.c\n\t$(CC) $(CFLAGS) -o $@.out $< $(ALL_LD) $(ALL_INC) $(ALL_LIB)\n\nIN=$(in)\n.PHONY:one\none: ${IN}.c\n\t$(CC) $(CFLAGS) -o ${IN}.out $< $(ALL_LD) $(ALL_INC) $(ALL_LIB)\n\n.PHONY:maketest\nmaketest:\n\t-echo ${SRC}\n\t-echo ${OBJ} ${BIN_TARGET}\n\t-echo $(notdir ${SRC})\n\n#（1）Makefile中的 符号 $@, $^, $< 的意思：\n#　　$@  表示目标文件\n#　　$^  表示所有的依赖文件\n#　　$<  表示第一个依赖文件\n#　　$?  表示比目标还要新的依赖文件列表\n\n#（2）wildcard、notdir、patsubst的意思：\n#　　wildcard : 扩展通配符\n#　　notdir ： 去除路径\n#　　patsubst ：替换通配符\n\n#（3）PHONY 表示伪目标，比如clean，如果文件中\n#\t  存在clean文件，那么添加了此关键字依旧能\n#\t  执行rm操作。\n\n````\n\nlinux 平台下：\n`make`\n`./a.out`运行server\n`./a.out`运行client","source":"_posts/TLV数据传输协议及简单实现-C.md","raw":"---\ntitle: TLV数据传输协议及简单实现(C)\ndate: 2019-08-27 11:19:02\ncategories: 网络编程\ntags: [TLV, TCP, C]\n---\n\n有关TLV协议的相关内容，以及基于C语言的简单实现。都是个人理解，有许多不足，仅供参考(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n## 概要介绍\n首先，关于TLV协议本质，网上有许多讲解，可以先搜索[TLV相关讲解](http://www.wtango.com/tlv%E7%BC%96%E7%A0%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1/)，我自己的实现思路参考[这篇帖子](https://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html)。\n这里通俗概括：\nT：Type，表示字段标签和编码格式。\nL：Length，表示数据长度。\nV：Value，表示实际传输内容。\n![TLV](TLV数据传输协议及简单实现-C/TLV.png)\n[图片来源](http://www.wtango.com/tlv%E7%BC%96%E7%A0%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1/)：http://www.wtango.com/\n\n## TLV的优势\n而使用TLV的作用是什么呢？概括为将格式数据序列化处理（可能表述不太专业），并且能够有一个约定的通信方式进行通信。意思是，方便你在网络中传输结构体。例如：\n你想传输结构体：\n````\nstruct Message{    \n    unsigned int id; \n    long num;\n    char name[128];\n};\n````\n\n你会开辟一片buf来存放这个结构体，然后传输过去，如果其中有指针，还需要数据整理。\n这个思路意味着你传输数据针对的是你结构体中的每一个数据。而如果你要增加一个字段，则需要关注你传输代码的正确与否。例如你增加一个`char new[1024]`那么，你开辟的buf，返回的数据对应，都需要检查。正如你买菜的时候需要关注每一样菜放的位置对不对。并且，不同设备和语言之间传输数据时，这种传输方式就显得非常难受，甚至不可用。\n使用TLV的好处，在于将你的传输数据进行打包：\n\n````\nT：0x01\nL：136\nV：\nstruct Message{    \n    unsigned int id; \n    long num;\n    char name[128];\n};\n````\n这样你在以TLV格式编写传输代码的时候，就不会关注实际传输内容是什么。仅仅将内容当成一个装满蔬菜的篮子，而非每个蔬菜。这样，你如何更改菜篮子里的蔬菜，对于整个传输过程来说，都不受影响。并且只要支持标准的TLV传输协议的，不论什么底层平台和语言，都能够相互传输。说白了，就是一个网络传输的通用性封装。┐(´-｀)┌ \n\n## 简单示例代码\n代码参考两篇文章：[TLV简介](https://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html) \n[C语言socket编程](https://blog.csdn.net/lovekun1989/article/details/41042273) 其中关于实际数据的大小端转换没有做，在同平台计算机没有影响。并且我这儿只是非常简单的示例，没有按照标准的TLV进行TAG解析以及Length处理。有兴趣的可以按照这个[更加标准的示例](https://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html)来看。\n\nTLV.c:\n````\n//\n// Created by JiHan on 2019/8/26.\n//\n\n#include <stdlib.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include \"TLV.h\"\n\n\nint send_tlv(int sk, unsigned char *buf, int buf_len, int status){\n    TLV_ENTITY *send_tlv=NULL;\n    int tag = sk;\n\n    if (buf == NULL){\n        printf(\"buffer is null!\\n\");\n        return -1;\n    }\n\n\n    send_tlv = (TLV_ENTITY *)malloc(buf_len+TLV_TAG_LEN);\n    memset(send_tlv,0,buf_len+TLV_TAG_LEN);\n\n    //把数据整合到TLV结构中\n    send_tlv->length = htonl(buf_len);\n    send_tlv->tag = htonl(tag);\n    send_tlv->value = (unsigned char*)send_tlv +TLV_TAG_LEN;\n    memcpy(send_tlv->value,buf,buf_len);\n\n    //发送TLV结构\n    send(sk, (char *)send_tlv, sizeof(struct Message)+TLV_TAG_LEN,status);\n\n    if (send_tlv != NULL){\n        free(send_tlv);\n    }\n\n    return 0;\n}\n\nint recv_tlv(int sk, unsigned char *buf, int buf_len, int status){\n    TLV_ENTITY send_tlv = {0, 0, NULL};\n    int onece = 0, dataNum = 0;\n    char tmp_tlv[1024];\n\n    if (buf == NULL){\n        printf(\"buffer is null!\\n\");\n        return -1;\n    }\n\n    //获取TLV数据结构头\n    onece = recv(sk, tmp_tlv, TLV_TAG_LEN, status);\n    memcpy(&send_tlv.tag, tmp_tlv, 4);\n    send_tlv.tag = ntohl(send_tlv.tag);\n    memcpy(&send_tlv.length, tmp_tlv+4, 4);\n    send_tlv.length = ntohl(send_tlv.length);\n    send_tlv.value = (unsigned char *) malloc(send_tlv.length);\n\n    //根据头数据接收后续value数据\n    while (dataNum < send_tlv.length){\n        onece = recv(sk, tmp_tlv, 1024, status);\n        memcpy(send_tlv.value + dataNum, tmp_tlv, onece);\n        dataNum += onece;\n    }\n\n    if(buf_len < send_tlv.length){\n        printf(\"buffer overflow!\\n\");\n        return -1;\n    }\n\n    memcpy(buf, send_tlv.value, send_tlv.length);\n    if (send_tlv.value != NULL){\n        free(send_tlv.value);\n    }\n\n    return dataNum;\n}\n````\n\nTLV.h：\n````\n//\n// Created by JiHan on 2019/8/26.\n//\n\n#ifndef __TLV_H__\n#define __TLV_H__\n\n#include <stdio.h>\n#include <string.h>\n\n#define TLV_TAG_LEN 10\n\n\nstruct Message{\n    unsigned int id;\n    long num;\n    char name[128];\n    char hello[24];\n    char new[128];\n};\n\n\nint recv_tlv(int sk, unsigned char *buf, int buf_len, int status);\nint send_tlv(int sk, unsigned char *buf, int buf_len, int status);\n\n#endif\n````\n\ntest.c:\n````\n\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <netdb.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\n#include <stdlib.h>\n#include \"TLV.h\"\n\n\n#define SERVER_PORT 9111\n\nint server(){\n    int sk;\n    struct sockaddr_in server_addr, clientAddr;\n    int addr_len = sizeof(clientAddr);\n    int client;\n//    char buffer[200];\n    int iDataNum = 0;\n\n    struct Message MSG;\n    //char recvbuf[1024];\n    //int recvNum;\n\n    if((sk = socket(AF_INET, SOCK_STREAM, 0)) < 0)\n    {\n        printf(\"err socket\\n\");\n        return -1;\n    }\n    memset(&server_addr, 0, sizeof(server_addr));\n    //初始化服务器端的套接字，并用htons和htonl将端口和地址转成网络字节序\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(SERVER_PORT);\n    //ip可是是本服务器的ip，也可以用宏INADDR_ANY代替，代表0.0.0.0，表明所有地址\n    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n    //对于bind，accept之类的函数，里面套接字参数都是需要强制转换成(struct sockaddr *)\n    //bind三个参数：服务器端的套接字的文件描述符，\n    if(bind(sk, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)\n    {\n        printf(\"err connect\\n\");\n        return -1;\n    }\n    //设置服务器上的socket为监听状态\n    if(listen(sk, 5) < 0)\n    {\n        printf(\"err listen\\n\");\n        return -1;\n    }\n\n    while(1) {\n        printf(\"Listening on port: %d\\n\", SERVER_PORT);\n        //调用accept函数后，会进入阻塞状态\n        //accept返回一个套接字的文件描述符，这样服务器端便有两个套接字的文件描述符，\n        //serverSocket和client。\n        //serverSocket仍然继续在监听状态，client则负责接收和发送数据\n        //clientAddr是一个传出参数，accept返回时，传出客户端的地址和端口号\n        //addr_len是一个传入-传出参数，传入的是调用者提供的缓冲区的clientAddr的长度，以避免缓冲区溢出。\n        //传出的是客户端地址结构体的实际长度。\n        //出错返回-1\n        client = accept(sk, (struct sockaddr *) &clientAddr, (socklen_t * ) & addr_len);\n        if (client < 0) {\n            printf(\"err accept\\n\");\n            continue;\n        }\n        printf(\"\\nrecv client data...\\n\");\n        //inet_ntoa   ip地址转换函数，将网络字节序IP转换为点分十进制IP\n        //表达式：char *inet_ntoa (struct in_addr);\n        printf(\"IP is %s\\n\", inet_ntoa(clientAddr.sin_addr));\n        printf(\"Port is %d\\n\", ntohs(clientAddr.sin_port));\n\n        iDataNum = recv_tlv(client, (unsigned char*)&MSG, sizeof(MSG), 0);\n        if (iDataNum <= 0) {\n            printf(\"err recv\\n\");\n            break;\n        }\n\n        printf(\"%d  %ld  %s  %s %s\\n\",MSG.id, MSG.num, MSG.name, MSG.hello, MSG.new);\n\n/*        while (1) {\n            iDataNum = recv(client, buffer, 1024, 0);\n            if (iDataNum <= 0) {\n                printf(\"err recv\\n\");\n                break;\n            }\n            buffer[iDataNum] = '\\0';\n            printf(\"%drecv data is %s\\n\", iDataNum, buffer);\n            send(client, buffer, iDataNum, 0);\n        }*/\n        close(client);\n    }\n    close(sk);\n    return 0;\n\n}\n\nint client(){\n    //客户端只需要一个套接字文件描述符，用于和服务器通信\n    int clientSocket;\n    //描述服务器的socket\n    struct sockaddr_in serverAddr;\n   // char sendbuf[200];\n   // char recvbuf[200];\n   // int iDataNum;\n\n    struct Message MSG = {100, 54321, \"huangjiahao\", \"world\", \"tttttest\"};\n\n    if((clientSocket = socket(AF_INET, SOCK_STREAM, 0)) < 0)\n    {\n        printf(\"err socket\\n\");\n        return 1;\n    }\n\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(SERVER_PORT);\n    //指定服务器端的ip，本地测试：127.0.0.1\n    //inet_addr()函数，将点分十进制IP转换成网络字节序IP\n    serverAddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    if(connect(clientSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0)\n    {\n        printf(\"err connect\\n\");\n        return 1;\n    }\n    printf(\"connect with destination host...\\n\");\n\n    //数据格式转化为tlv，进行发送\n    send_tlv(clientSocket,(unsigned char *)&MSG, sizeof(MSG), 0);\n\n/*    while(1)\n    {\n        printf(\"Input your word:>\");\n        scanf(\"%s\", sendbuf);\n        printf(\"\\n\");\n\n        send(clientSocket, sendbuf, strlen(sendbuf), 0);\n        if(strcmp(sendbuf, \"quit\") == 0)\n            break;\n        iDataNum = recv(clientSocket, recvbuf, 200, 0);\n        recvbuf[iDataNum] = '\\0';\n        printf(\"recv data of my world is: %s\\n\", recvbuf);\n    }*/\n    close(clientSocket);\n    return 0;\n\n}\n\nint main(int argv, char* arg[]){\n\n    if (argv > 1){\n        printf(\"start client...\\n\");\n        client();\n    } else{\n        printf(\"start server...\\n\");\n        server();\n    }\n\n    return 0;\n}\n\n````\n\nMakefile:\n````\n# by jihan\nDIR_INC = .\nDIR_SRC = .\nDIR_OBJ = .\nDIR_BIN = .\n\nEVENT_LIB = /usr/local/lib\nEVENT_INC = /usr/local/include\n\n\n#ALL_LD = -L${EVENT_LIB}\n#ALL_INC = -I${EVENT_INC}\nALL_LIB = -lssl\n\nCXX = g++\nCC = gcc\nCFLAGS = -g -O2 -Wall -Werror\nMPIF90 = mpiif90\n\nSRC = $(wildcard ${DIR_SRC}/*.c)\nOBJ = $(patsubst %.c,${DIR_OBJ}/%.o,$(notdir ${SRC}))\n\nTARGET = a.out\n\nBIN_TARGET = ${DIR_BIN}/${TARGET}\n\n.PHONY:all\nall: ${BIN_TARGET}\n\n${BIN_TARGET}: ${OBJ}\n\t$(CC) $(CFLAGS) $(OBJ)  -o $@ $(ALL_LD) $(ALL_LIB)\n\n${DIR_OBJ}/%.o:${DIR_SRC}/%.c\n\t$(CC) $(CFLAGS)  -c $< -o $@ $(ALL_INC)\n\n.PHONY:clean\nclean:\n\t-rm -f *.out\n\t-rm -f *.o\n#\t-rm -f ./ncfile/*.nc\n\n\nfixed=xy04c\n.PHONY:${fixed}\n${fixed}: ${fixed}.c\n\t$(CC) $(CFLAGS) -o $@.out $< $(ALL_LD) $(ALL_INC) $(ALL_LIB)\n\nIN=$(in)\n.PHONY:one\none: ${IN}.c\n\t$(CC) $(CFLAGS) -o ${IN}.out $< $(ALL_LD) $(ALL_INC) $(ALL_LIB)\n\n.PHONY:maketest\nmaketest:\n\t-echo ${SRC}\n\t-echo ${OBJ} ${BIN_TARGET}\n\t-echo $(notdir ${SRC})\n\n#（1）Makefile中的 符号 $@, $^, $< 的意思：\n#　　$@  表示目标文件\n#　　$^  表示所有的依赖文件\n#　　$<  表示第一个依赖文件\n#　　$?  表示比目标还要新的依赖文件列表\n\n#（2）wildcard、notdir、patsubst的意思：\n#　　wildcard : 扩展通配符\n#　　notdir ： 去除路径\n#　　patsubst ：替换通配符\n\n#（3）PHONY 表示伪目标，比如clean，如果文件中\n#\t  存在clean文件，那么添加了此关键字依旧能\n#\t  执行rm操作。\n\n````\n\nlinux 平台下：\n`make`\n`./a.out`运行server\n`./a.out`运行client","slug":"TLV数据传输协议及简单实现-C","published":1,"updated":"2020-09-13T01:39:25.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insi000dh9uo5c2dnigx","content":"<p>有关TLV协议的相关内容，以及基于C语言的简单实现。都是个人理解，有许多不足，仅供参考(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n<h2 id=\"概要介绍\"><a href=\"#概要介绍\" class=\"headerlink\" title=\"概要介绍\"></a>概要介绍</h2><p>首先，关于TLV协议本质，网上有许多讲解，可以先搜索<a href=\"http://www.wtango.com/tlv%E7%BC%96%E7%A0%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1/\" target=\"_blank\" rel=\"noopener\">TLV相关讲解</a>，我自己的实现思路参考<a href=\"https://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html\" target=\"_blank\" rel=\"noopener\">这篇帖子</a>。<br>这里通俗概括：<br>T：Type，表示字段标签和编码格式。<br>L：Length，表示数据长度。<br>V：Value，表示实际传输内容。<br><img src=\"/2019/08/27/TLV数据传输协议及简单实现-C/TLV.png\" alt=\"TLV\"><br><a href=\"http://www.wtango.com/tlv%E7%BC%96%E7%A0%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1/\" target=\"_blank\" rel=\"noopener\">图片来源</a>：<a href=\"http://www.wtango.com/\" target=\"_blank\" rel=\"noopener\">http://www.wtango.com/</a></p>\n<h2 id=\"TLV的优势\"><a href=\"#TLV的优势\" class=\"headerlink\" title=\"TLV的优势\"></a>TLV的优势</h2><p>而使用TLV的作用是什么呢？概括为将格式数据序列化处理（可能表述不太专业），并且能够有一个约定的通信方式进行通信。意思是，方便你在网络中传输结构体。例如：<br>你想传输结构体：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Message{&nbsp;&nbsp;&nbsp; </span><br><span class=\"line\">    unsigned int id;&nbsp;</span><br><span class=\"line\">    long num;</span><br><span class=\"line\">    char name[128];</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>你会开辟一片buf来存放这个结构体，然后传输过去，如果其中有指针，还需要数据整理。<br>这个思路意味着你传输数据针对的是你结构体中的每一个数据。而如果你要增加一个字段，则需要关注你传输代码的正确与否。例如你增加一个<code>char new[1024]</code>那么，你开辟的buf，返回的数据对应，都需要检查。正如你买菜的时候需要关注每一样菜放的位置对不对。并且，不同设备和语言之间传输数据时，这种传输方式就显得非常难受，甚至不可用。<br>使用TLV的好处，在于将你的传输数据进行打包：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T：0x01</span><br><span class=\"line\">L：136</span><br><span class=\"line\">V：</span><br><span class=\"line\">struct Message{&nbsp;&nbsp;&nbsp; </span><br><span class=\"line\">    unsigned int id;&nbsp;</span><br><span class=\"line\">    long num;</span><br><span class=\"line\">    char name[128];</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这样你在以TLV格式编写传输代码的时候，就不会关注实际传输内容是什么。仅仅将内容当成一个装满蔬菜的篮子，而非每个蔬菜。这样，你如何更改菜篮子里的蔬菜，对于整个传输过程来说，都不受影响。并且只要支持标准的TLV传输协议的，不论什么底层平台和语言，都能够相互传输。说白了，就是一个网络传输的通用性封装。┐(´-｀)┌ </p>\n<h2 id=\"简单示例代码\"><a href=\"#简单示例代码\" class=\"headerlink\" title=\"简单示例代码\"></a>简单示例代码</h2><p>代码参考两篇文章：<a href=\"https://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html\" target=\"_blank\" rel=\"noopener\">TLV简介</a><br><a href=\"https://blog.csdn.net/lovekun1989/article/details/41042273\" target=\"_blank\" rel=\"noopener\">C语言socket编程</a> 其中关于实际数据的大小端转换没有做，在同平台计算机没有影响。并且我这儿只是非常简单的示例，没有按照标准的TLV进行TAG解析以及Length处理。有兴趣的可以按照这个<a href=\"https://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html\" target=\"_blank\" rel=\"noopener\">更加标准的示例</a>来看。</p>\n<p>TLV.c:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">// Created by JiHan on 2019/8/26.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;sys/socket.h&gt;</span><br><span class=\"line\">#include &lt;arpa/inet.h&gt;</span><br><span class=\"line\">#include \"TLV.h\"</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int send_tlv(int sk, unsigned char *buf, int buf_len, int status){</span><br><span class=\"line\">    TLV_ENTITY *send_tlv=NULL;</span><br><span class=\"line\">    int tag = sk;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (buf == NULL){</span><br><span class=\"line\">        printf(\"buffer is null!\\n\");</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    send_tlv = (TLV_ENTITY *)malloc(buf_len+TLV_TAG_LEN);</span><br><span class=\"line\">    memset(send_tlv,0,buf_len+TLV_TAG_LEN);</span><br><span class=\"line\"></span><br><span class=\"line\">    //把数据整合到TLV结构中</span><br><span class=\"line\">    send_tlv-&gt;length = htonl(buf_len);</span><br><span class=\"line\">    send_tlv-&gt;tag = htonl(tag);</span><br><span class=\"line\">    send_tlv-&gt;value = (unsigned char*)send_tlv +TLV_TAG_LEN;</span><br><span class=\"line\">    memcpy(send_tlv-&gt;value,buf,buf_len);</span><br><span class=\"line\"></span><br><span class=\"line\">    //发送TLV结构</span><br><span class=\"line\">    send(sk, (char *)send_tlv, sizeof(struct Message)+TLV_TAG_LEN,status);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (send_tlv != NULL){</span><br><span class=\"line\">        free(send_tlv);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">int recv_tlv(int sk, unsigned char *buf, int buf_len, int status){</span><br><span class=\"line\">    TLV_ENTITY send_tlv = {0, 0, NULL};</span><br><span class=\"line\">    int onece = 0, dataNum = 0;</span><br><span class=\"line\">    char tmp_tlv[1024];</span><br><span class=\"line\"></span><br><span class=\"line\">    if (buf == NULL){</span><br><span class=\"line\">        printf(\"buffer is null!\\n\");</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取TLV数据结构头</span><br><span class=\"line\">    onece = recv(sk, tmp_tlv, TLV_TAG_LEN, status);</span><br><span class=\"line\">    memcpy(&amp;send_tlv.tag, tmp_tlv, 4);</span><br><span class=\"line\">    send_tlv.tag = ntohl(send_tlv.tag);</span><br><span class=\"line\">    memcpy(&amp;send_tlv.length, tmp_tlv+4, 4);</span><br><span class=\"line\">    send_tlv.length = ntohl(send_tlv.length);</span><br><span class=\"line\">    send_tlv.value = (unsigned char *) malloc(send_tlv.length);</span><br><span class=\"line\"></span><br><span class=\"line\">    //根据头数据接收后续value数据</span><br><span class=\"line\">    while (dataNum &lt; send_tlv.length){</span><br><span class=\"line\">        onece = recv(sk, tmp_tlv, 1024, status);</span><br><span class=\"line\">        memcpy(send_tlv.value + dataNum, tmp_tlv, onece);</span><br><span class=\"line\">        dataNum += onece;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    if(buf_len &lt; send_tlv.length){</span><br><span class=\"line\">        printf(\"buffer overflow!\\n\");</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    memcpy(buf, send_tlv.value, send_tlv.length);</span><br><span class=\"line\">    if (send_tlv.value != NULL){</span><br><span class=\"line\">        free(send_tlv.value);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    return dataNum;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>TLV.h：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">// Created by JiHan on 2019/8/26.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#ifndef __TLV_H__</span><br><span class=\"line\">#define __TLV_H__</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define TLV_TAG_LEN 10</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">struct Message{</span><br><span class=\"line\">    unsigned int id;</span><br><span class=\"line\">    long num;</span><br><span class=\"line\">    char name[128];</span><br><span class=\"line\">    char hello[24];</span><br><span class=\"line\">    char new[128];</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int recv_tlv(int sk, unsigned char *buf, int buf_len, int status);</span><br><span class=\"line\">int send_tlv(int sk, unsigned char *buf, int buf_len, int status);</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br></pre></td></tr></tbody></table></figure>\n\n<p>test.c:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#include &lt;sys/stat.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;netdb.h&gt;</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/socket.h&gt;</span><br><span class=\"line\">#include &lt;netinet/in.h&gt;</span><br><span class=\"line\">#include &lt;arpa/inet.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include \"TLV.h\"</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#define SERVER_PORT 9111</span><br><span class=\"line\"></span><br><span class=\"line\">int server(){</span><br><span class=\"line\">    int sk;</span><br><span class=\"line\">    struct sockaddr_in server_addr, clientAddr;</span><br><span class=\"line\">    int addr_len = sizeof(clientAddr);</span><br><span class=\"line\">    int client;</span><br><span class=\"line\">//    char buffer[200];</span><br><span class=\"line\">    int iDataNum = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    struct Message MSG;</span><br><span class=\"line\">    //char recvbuf[1024];</span><br><span class=\"line\">    //int recvNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    if((sk = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        printf(\"err socket\\n\");</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    memset(&amp;server_addr, 0, sizeof(server_addr));</span><br><span class=\"line\">    //初始化服务器端的套接字，并用htons和htonl将端口和地址转成网络字节序</span><br><span class=\"line\">    server_addr.sin_family = AF_INET;</span><br><span class=\"line\">    server_addr.sin_port = htons(SERVER_PORT);</span><br><span class=\"line\">    //ip可是是本服务器的ip，也可以用宏INADDR_ANY代替，代表0.0.0.0，表明所有地址</span><br><span class=\"line\">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class=\"line\">    //对于bind，accept之类的函数，里面套接字参数都是需要强制转换成(struct sockaddr *)</span><br><span class=\"line\">    //bind三个参数：服务器端的套接字的文件描述符，</span><br><span class=\"line\">    if(bind(sk, (struct sockaddr *)&amp;server_addr, sizeof(server_addr)) &lt; 0)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        printf(\"err connect\\n\");</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    //设置服务器上的socket为监听状态</span><br><span class=\"line\">    if(listen(sk, 5) &lt; 0)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        printf(\"err listen\\n\");</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    while(1) {</span><br><span class=\"line\">        printf(\"Listening on port: %d\\n\", SERVER_PORT);</span><br><span class=\"line\">        //调用accept函数后，会进入阻塞状态</span><br><span class=\"line\">        //accept返回一个套接字的文件描述符，这样服务器端便有两个套接字的文件描述符，</span><br><span class=\"line\">        //serverSocket和client。</span><br><span class=\"line\">        //serverSocket仍然继续在监听状态，client则负责接收和发送数据</span><br><span class=\"line\">        //clientAddr是一个传出参数，accept返回时，传出客户端的地址和端口号</span><br><span class=\"line\">        //addr_len是一个传入-传出参数，传入的是调用者提供的缓冲区的clientAddr的长度，以避免缓冲区溢出。</span><br><span class=\"line\">        //传出的是客户端地址结构体的实际长度。</span><br><span class=\"line\">        //出错返回-1</span><br><span class=\"line\">        client = accept(sk, (struct sockaddr *) &amp;clientAddr, (socklen_t * ) &amp; addr_len);</span><br><span class=\"line\">        if (client &lt; 0) {</span><br><span class=\"line\">            printf(\"err accept\\n\");</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        printf(\"\\nrecv client data...\\n\");</span><br><span class=\"line\">        //inet_ntoa   ip地址转换函数，将网络字节序IP转换为点分十进制IP</span><br><span class=\"line\">        //表达式：char *inet_ntoa (struct in_addr);</span><br><span class=\"line\">        printf(\"IP is %s\\n\", inet_ntoa(clientAddr.sin_addr));</span><br><span class=\"line\">        printf(\"Port is %d\\n\", ntohs(clientAddr.sin_port));</span><br><span class=\"line\"></span><br><span class=\"line\">        iDataNum = recv_tlv(client, (unsigned char*)&amp;MSG, sizeof(MSG), 0);</span><br><span class=\"line\">        if (iDataNum &lt;= 0) {</span><br><span class=\"line\">            printf(\"err recv\\n\");</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">        printf(\"%d  %ld  %s  %s %s\\n\",MSG.id, MSG.num, MSG.name, MSG.hello, MSG.new);</span><br><span class=\"line\"></span><br><span class=\"line\">/*        while (1) {</span><br><span class=\"line\">            iDataNum = recv(client, buffer, 1024, 0);</span><br><span class=\"line\">            if (iDataNum &lt;= 0) {</span><br><span class=\"line\">                printf(\"err recv\\n\");</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            buffer[iDataNum] = '\\0';</span><br><span class=\"line\">            printf(\"%drecv data is %s\\n\", iDataNum, buffer);</span><br><span class=\"line\">            send(client, buffer, iDataNum, 0);</span><br><span class=\"line\">        }*/</span><br><span class=\"line\">        close(client);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    close(sk);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">int client(){</span><br><span class=\"line\">    //客户端只需要一个套接字文件描述符，用于和服务器通信</span><br><span class=\"line\">    int clientSocket;</span><br><span class=\"line\">    //描述服务器的socket</span><br><span class=\"line\">    struct sockaddr_in serverAddr;</span><br><span class=\"line\">   // char sendbuf[200];</span><br><span class=\"line\">   // char recvbuf[200];</span><br><span class=\"line\">   // int iDataNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    struct Message MSG = {100, 54321, \"huangjiahao\", \"world\", \"tttttest\"};</span><br><span class=\"line\"></span><br><span class=\"line\">    if((clientSocket = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        printf(\"err socket\\n\");</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    serverAddr.sin_family = AF_INET;</span><br><span class=\"line\">    serverAddr.sin_port = htons(SERVER_PORT);</span><br><span class=\"line\">    //指定服务器端的ip，本地测试：127.0.0.1</span><br><span class=\"line\">    //inet_addr()函数，将点分十进制IP转换成网络字节序IP</span><br><span class=\"line\">    serverAddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");</span><br><span class=\"line\">    if(connect(clientSocket, (struct sockaddr *)&amp;serverAddr, sizeof(serverAddr)) &lt; 0)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        printf(\"err connect\\n\");</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    printf(\"connect with destination host...\\n\");</span><br><span class=\"line\"></span><br><span class=\"line\">    //数据格式转化为tlv，进行发送</span><br><span class=\"line\">    send_tlv(clientSocket,(unsigned char *)&amp;MSG, sizeof(MSG), 0);</span><br><span class=\"line\"></span><br><span class=\"line\">/*    while(1)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        printf(\"Input your word:&gt;\");</span><br><span class=\"line\">        scanf(\"%s\", sendbuf);</span><br><span class=\"line\">        printf(\"\\n\");</span><br><span class=\"line\"></span><br><span class=\"line\">        send(clientSocket, sendbuf, strlen(sendbuf), 0);</span><br><span class=\"line\">        if(strcmp(sendbuf, \"quit\") == 0)</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        iDataNum = recv(clientSocket, recvbuf, 200, 0);</span><br><span class=\"line\">        recvbuf[iDataNum] = '\\0';</span><br><span class=\"line\">        printf(\"recv data of my world is: %s\\n\", recvbuf);</span><br><span class=\"line\">    }*/</span><br><span class=\"line\">    close(clientSocket);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argv, char* arg[]){</span><br><span class=\"line\"></span><br><span class=\"line\">    if (argv &gt; 1){</span><br><span class=\"line\">        printf(\"start client...\\n\");</span><br><span class=\"line\">        client();</span><br><span class=\"line\">    } else{</span><br><span class=\"line\">        printf(\"start server...\\n\");</span><br><span class=\"line\">        server();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>Makefile:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># by jihan</span><br><span class=\"line\">DIR_INC = .</span><br><span class=\"line\">DIR_SRC = .</span><br><span class=\"line\">DIR_OBJ = .</span><br><span class=\"line\">DIR_BIN = .</span><br><span class=\"line\"></span><br><span class=\"line\">EVENT_LIB = /usr/local/lib</span><br><span class=\"line\">EVENT_INC = /usr/local/include</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#ALL_LD = -L${EVENT_LIB}</span><br><span class=\"line\">#ALL_INC = -I${EVENT_INC}</span><br><span class=\"line\">ALL_LIB = -lssl</span><br><span class=\"line\"></span><br><span class=\"line\">CXX = g++</span><br><span class=\"line\">CC = gcc</span><br><span class=\"line\">CFLAGS = -g -O2 -Wall -Werror</span><br><span class=\"line\">MPIF90 = mpiif90</span><br><span class=\"line\"></span><br><span class=\"line\">SRC = $(wildcard ${DIR_SRC}/*.c)</span><br><span class=\"line\">OBJ = $(patsubst %.c,${DIR_OBJ}/%.o,$(notdir ${SRC}))</span><br><span class=\"line\"></span><br><span class=\"line\">TARGET = a.out</span><br><span class=\"line\"></span><br><span class=\"line\">BIN_TARGET = ${DIR_BIN}/${TARGET}</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY:all</span><br><span class=\"line\">all: ${BIN_TARGET}</span><br><span class=\"line\"></span><br><span class=\"line\">${BIN_TARGET}: ${OBJ}</span><br><span class=\"line\">\t$(CC) $(CFLAGS) $(OBJ)  -o $@ $(ALL_LD) $(ALL_LIB)</span><br><span class=\"line\"></span><br><span class=\"line\">${DIR_OBJ}/%.o:${DIR_SRC}/%.c</span><br><span class=\"line\">\t$(CC) $(CFLAGS)  -c $&lt; -o $@ $(ALL_INC)</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY:clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">\t-rm -f *.out</span><br><span class=\"line\">\t-rm -f *.o</span><br><span class=\"line\">#\t-rm -f ./ncfile/*.nc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fixed=xy04c</span><br><span class=\"line\">.PHONY:${fixed}</span><br><span class=\"line\">${fixed}: ${fixed}.c</span><br><span class=\"line\">\t$(CC) $(CFLAGS) -o $@.out $&lt; $(ALL_LD) $(ALL_INC) $(ALL_LIB)</span><br><span class=\"line\"></span><br><span class=\"line\">IN=$(in)</span><br><span class=\"line\">.PHONY:one</span><br><span class=\"line\">one: ${IN}.c</span><br><span class=\"line\">\t$(CC) $(CFLAGS) -o ${IN}.out $&lt; $(ALL_LD) $(ALL_INC) $(ALL_LIB)</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY:maketest</span><br><span class=\"line\">maketest:</span><br><span class=\"line\">\t-echo ${SRC}</span><br><span class=\"line\">\t-echo ${OBJ} ${BIN_TARGET}</span><br><span class=\"line\">\t-echo $(notdir ${SRC})</span><br><span class=\"line\"></span><br><span class=\"line\">#（1）Makefile中的 符号 $@, $^, $&lt; 的意思：</span><br><span class=\"line\">#　　$@  表示目标文件</span><br><span class=\"line\">#　　$^  表示所有的依赖文件</span><br><span class=\"line\">#　　$&lt;  表示第一个依赖文件</span><br><span class=\"line\">#　　$?  表示比目标还要新的依赖文件列表</span><br><span class=\"line\"></span><br><span class=\"line\">#（2）wildcard、notdir、patsubst的意思：</span><br><span class=\"line\">#　　wildcard : 扩展通配符</span><br><span class=\"line\">#　　notdir ： 去除路径</span><br><span class=\"line\">#　　patsubst ：替换通配符</span><br><span class=\"line\"></span><br><span class=\"line\">#（3）PHONY 表示伪目标，比如clean，如果文件中</span><br><span class=\"line\">#\t  存在clean文件，那么添加了此关键字依旧能</span><br><span class=\"line\">#\t  执行rm操作。</span><br></pre></td></tr></tbody></table></figure>\n\n<p>linux 平台下：<br><code>make</code><br><code>./a.out</code>运行server<br><code>./a.out</code>运行client</p>\n","site":{"data":{}},"excerpt":"<p>有关TLV协议的相关内容，以及基于C语言的简单实现。都是个人理解，有许多不足，仅供参考(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<h2 id=\"概要介绍\"><a href=\"#概要介绍\" class=\"headerlink\" title=\"概要介绍\"></a>概要介绍</h2><p>首先，关于TLV协议本质，网上有许多讲解，可以先搜索<a href=\"http://www.wtango.com/tlv%E7%BC%96%E7%A0%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1/\" target=\"_blank\" rel=\"noopener\">TLV相关讲解</a>，我自己的实现思路参考<a href=\"https://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html\" target=\"_blank\" rel=\"noopener\">这篇帖子</a>。<br>这里通俗概括：<br>T：Type，表示字段标签和编码格式。<br>L：Length，表示数据长度。<br>V：Value，表示实际传输内容。<br><img src=\"/2019/08/27/TLV数据传输协议及简单实现-C/TLV.png\" alt=\"TLV\"><br><a href=\"http://www.wtango.com/tlv%E7%BC%96%E7%A0%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1/\" target=\"_blank\" rel=\"noopener\">图片来源</a>：<a href=\"http://www.wtango.com/\" target=\"_blank\" rel=\"noopener\">http://www.wtango.com/</a></p>\n<h2 id=\"TLV的优势\"><a href=\"#TLV的优势\" class=\"headerlink\" title=\"TLV的优势\"></a>TLV的优势</h2><p>而使用TLV的作用是什么呢？概括为将格式数据序列化处理（可能表述不太专业），并且能够有一个约定的通信方式进行通信。意思是，方便你在网络中传输结构体。例如：<br>你想传输结构体：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Message&#123;    </span><br><span class=\"line\">    unsigned int id; </span><br><span class=\"line\">    long num;</span><br><span class=\"line\">    char name[128];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>你会开辟一片buf来存放这个结构体，然后传输过去，如果其中有指针，还需要数据整理。<br>这个思路意味着你传输数据针对的是你结构体中的每一个数据。而如果你要增加一个字段，则需要关注你传输代码的正确与否。例如你增加一个<code>char new[1024]</code>那么，你开辟的buf，返回的数据对应，都需要检查。正如你买菜的时候需要关注每一样菜放的位置对不对。并且，不同设备和语言之间传输数据时，这种传输方式就显得非常难受，甚至不可用。<br>使用TLV的好处，在于将你的传输数据进行打包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T：0x01</span><br><span class=\"line\">L：136</span><br><span class=\"line\">V：</span><br><span class=\"line\">struct Message&#123;    </span><br><span class=\"line\">    unsigned int id; </span><br><span class=\"line\">    long num;</span><br><span class=\"line\">    char name[128];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这样你在以TLV格式编写传输代码的时候，就不会关注实际传输内容是什么。仅仅将内容当成一个装满蔬菜的篮子，而非每个蔬菜。这样，你如何更改菜篮子里的蔬菜，对于整个传输过程来说，都不受影响。并且只要支持标准的TLV传输协议的，不论什么底层平台和语言，都能够相互传输。说白了，就是一个网络传输的通用性封装。┐(´-｀)┌ </p>\n<h2 id=\"简单示例代码\"><a href=\"#简单示例代码\" class=\"headerlink\" title=\"简单示例代码\"></a>简单示例代码</h2><p>代码参考两篇文章：<a href=\"https://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html\" target=\"_blank\" rel=\"noopener\">TLV简介</a><br><a href=\"https://blog.csdn.net/lovekun1989/article/details/41042273\" target=\"_blank\" rel=\"noopener\">C语言socket编程</a> 其中关于实际数据的大小端转换没有做，在同平台计算机没有影响。并且我这儿只是非常简单的示例，没有按照标准的TLV进行TAG解析以及Length处理。有兴趣的可以按照这个<a href=\"https://www.cnblogs.com/tml839720759/archive/2014/07/13/3841820.html\" target=\"_blank\" rel=\"noopener\">更加标准的示例</a>来看。</p>\n<p>TLV.c:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">// Created by JiHan on 2019/8/26.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;sys/socket.h&gt;</span><br><span class=\"line\">#include &lt;arpa/inet.h&gt;</span><br><span class=\"line\">#include &quot;TLV.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int send_tlv(int sk, unsigned char *buf, int buf_len, int status)&#123;</span><br><span class=\"line\">    TLV_ENTITY *send_tlv=NULL;</span><br><span class=\"line\">    int tag = sk;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (buf == NULL)&#123;</span><br><span class=\"line\">        printf(&quot;buffer is null!\\n&quot;);</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    send_tlv = (TLV_ENTITY *)malloc(buf_len+TLV_TAG_LEN);</span><br><span class=\"line\">    memset(send_tlv,0,buf_len+TLV_TAG_LEN);</span><br><span class=\"line\"></span><br><span class=\"line\">    //把数据整合到TLV结构中</span><br><span class=\"line\">    send_tlv-&gt;length = htonl(buf_len);</span><br><span class=\"line\">    send_tlv-&gt;tag = htonl(tag);</span><br><span class=\"line\">    send_tlv-&gt;value = (unsigned char*)send_tlv +TLV_TAG_LEN;</span><br><span class=\"line\">    memcpy(send_tlv-&gt;value,buf,buf_len);</span><br><span class=\"line\"></span><br><span class=\"line\">    //发送TLV结构</span><br><span class=\"line\">    send(sk, (char *)send_tlv, sizeof(struct Message)+TLV_TAG_LEN,status);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (send_tlv != NULL)&#123;</span><br><span class=\"line\">        free(send_tlv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int recv_tlv(int sk, unsigned char *buf, int buf_len, int status)&#123;</span><br><span class=\"line\">    TLV_ENTITY send_tlv = &#123;0, 0, NULL&#125;;</span><br><span class=\"line\">    int onece = 0, dataNum = 0;</span><br><span class=\"line\">    char tmp_tlv[1024];</span><br><span class=\"line\"></span><br><span class=\"line\">    if (buf == NULL)&#123;</span><br><span class=\"line\">        printf(&quot;buffer is null!\\n&quot;);</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取TLV数据结构头</span><br><span class=\"line\">    onece = recv(sk, tmp_tlv, TLV_TAG_LEN, status);</span><br><span class=\"line\">    memcpy(&amp;send_tlv.tag, tmp_tlv, 4);</span><br><span class=\"line\">    send_tlv.tag = ntohl(send_tlv.tag);</span><br><span class=\"line\">    memcpy(&amp;send_tlv.length, tmp_tlv+4, 4);</span><br><span class=\"line\">    send_tlv.length = ntohl(send_tlv.length);</span><br><span class=\"line\">    send_tlv.value = (unsigned char *) malloc(send_tlv.length);</span><br><span class=\"line\"></span><br><span class=\"line\">    //根据头数据接收后续value数据</span><br><span class=\"line\">    while (dataNum &lt; send_tlv.length)&#123;</span><br><span class=\"line\">        onece = recv(sk, tmp_tlv, 1024, status);</span><br><span class=\"line\">        memcpy(send_tlv.value + dataNum, tmp_tlv, onece);</span><br><span class=\"line\">        dataNum += onece;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if(buf_len &lt; send_tlv.length)&#123;</span><br><span class=\"line\">        printf(&quot;buffer overflow!\\n&quot;);</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    memcpy(buf, send_tlv.value, send_tlv.length);</span><br><span class=\"line\">    if (send_tlv.value != NULL)&#123;</span><br><span class=\"line\">        free(send_tlv.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return dataNum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TLV.h：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//</span><br><span class=\"line\">// Created by JiHan on 2019/8/26.</span><br><span class=\"line\">//</span><br><span class=\"line\"></span><br><span class=\"line\">#ifndef __TLV_H__</span><br><span class=\"line\">#define __TLV_H__</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define TLV_TAG_LEN 10</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">struct Message&#123;</span><br><span class=\"line\">    unsigned int id;</span><br><span class=\"line\">    long num;</span><br><span class=\"line\">    char name[128];</span><br><span class=\"line\">    char hello[24];</span><br><span class=\"line\">    char new[128];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int recv_tlv(int sk, unsigned char *buf, int buf_len, int status);</span><br><span class=\"line\">int send_tlv(int sk, unsigned char *buf, int buf_len, int status);</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n<p>test.c:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#include &lt;sys/stat.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;netdb.h&gt;</span><br><span class=\"line\">#include &lt;sys/types.h&gt;</span><br><span class=\"line\">#include &lt;sys/socket.h&gt;</span><br><span class=\"line\">#include &lt;netinet/in.h&gt;</span><br><span class=\"line\">#include &lt;arpa/inet.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &quot;TLV.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#define SERVER_PORT 9111</span><br><span class=\"line\"></span><br><span class=\"line\">int server()&#123;</span><br><span class=\"line\">    int sk;</span><br><span class=\"line\">    struct sockaddr_in server_addr, clientAddr;</span><br><span class=\"line\">    int addr_len = sizeof(clientAddr);</span><br><span class=\"line\">    int client;</span><br><span class=\"line\">//    char buffer[200];</span><br><span class=\"line\">    int iDataNum = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    struct Message MSG;</span><br><span class=\"line\">    //char recvbuf[1024];</span><br><span class=\"line\">    //int recvNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    if((sk = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;err socket\\n&quot;);</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    memset(&amp;server_addr, 0, sizeof(server_addr));</span><br><span class=\"line\">    //初始化服务器端的套接字，并用htons和htonl将端口和地址转成网络字节序</span><br><span class=\"line\">    server_addr.sin_family = AF_INET;</span><br><span class=\"line\">    server_addr.sin_port = htons(SERVER_PORT);</span><br><span class=\"line\">    //ip可是是本服务器的ip，也可以用宏INADDR_ANY代替，代表0.0.0.0，表明所有地址</span><br><span class=\"line\">    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class=\"line\">    //对于bind，accept之类的函数，里面套接字参数都是需要强制转换成(struct sockaddr *)</span><br><span class=\"line\">    //bind三个参数：服务器端的套接字的文件描述符，</span><br><span class=\"line\">    if(bind(sk, (struct sockaddr *)&amp;server_addr, sizeof(server_addr)) &lt; 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;err connect\\n&quot;);</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //设置服务器上的socket为监听状态</span><br><span class=\"line\">    if(listen(sk, 5) &lt; 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;err listen\\n&quot;);</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    while(1) &#123;</span><br><span class=\"line\">        printf(&quot;Listening on port: %d\\n&quot;, SERVER_PORT);</span><br><span class=\"line\">        //调用accept函数后，会进入阻塞状态</span><br><span class=\"line\">        //accept返回一个套接字的文件描述符，这样服务器端便有两个套接字的文件描述符，</span><br><span class=\"line\">        //serverSocket和client。</span><br><span class=\"line\">        //serverSocket仍然继续在监听状态，client则负责接收和发送数据</span><br><span class=\"line\">        //clientAddr是一个传出参数，accept返回时，传出客户端的地址和端口号</span><br><span class=\"line\">        //addr_len是一个传入-传出参数，传入的是调用者提供的缓冲区的clientAddr的长度，以避免缓冲区溢出。</span><br><span class=\"line\">        //传出的是客户端地址结构体的实际长度。</span><br><span class=\"line\">        //出错返回-1</span><br><span class=\"line\">        client = accept(sk, (struct sockaddr *) &amp;clientAddr, (socklen_t * ) &amp; addr_len);</span><br><span class=\"line\">        if (client &lt; 0) &#123;</span><br><span class=\"line\">            printf(&quot;err accept\\n&quot;);</span><br><span class=\"line\">            continue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\nrecv client data...\\n&quot;);</span><br><span class=\"line\">        //inet_ntoa   ip地址转换函数，将网络字节序IP转换为点分十进制IP</span><br><span class=\"line\">        //表达式：char *inet_ntoa (struct in_addr);</span><br><span class=\"line\">        printf(&quot;IP is %s\\n&quot;, inet_ntoa(clientAddr.sin_addr));</span><br><span class=\"line\">        printf(&quot;Port is %d\\n&quot;, ntohs(clientAddr.sin_port));</span><br><span class=\"line\"></span><br><span class=\"line\">        iDataNum = recv_tlv(client, (unsigned char*)&amp;MSG, sizeof(MSG), 0);</span><br><span class=\"line\">        if (iDataNum &lt;= 0) &#123;</span><br><span class=\"line\">            printf(&quot;err recv\\n&quot;);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        printf(&quot;%d  %ld  %s  %s %s\\n&quot;,MSG.id, MSG.num, MSG.name, MSG.hello, MSG.new);</span><br><span class=\"line\"></span><br><span class=\"line\">/*        while (1) &#123;</span><br><span class=\"line\">            iDataNum = recv(client, buffer, 1024, 0);</span><br><span class=\"line\">            if (iDataNum &lt;= 0) &#123;</span><br><span class=\"line\">                printf(&quot;err recv\\n&quot;);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            buffer[iDataNum] = &apos;\\0&apos;;</span><br><span class=\"line\">            printf(&quot;%drecv data is %s\\n&quot;, iDataNum, buffer);</span><br><span class=\"line\">            send(client, buffer, iDataNum, 0);</span><br><span class=\"line\">        &#125;*/</span><br><span class=\"line\">        close(client);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    close(sk);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int client()&#123;</span><br><span class=\"line\">    //客户端只需要一个套接字文件描述符，用于和服务器通信</span><br><span class=\"line\">    int clientSocket;</span><br><span class=\"line\">    //描述服务器的socket</span><br><span class=\"line\">    struct sockaddr_in serverAddr;</span><br><span class=\"line\">   // char sendbuf[200];</span><br><span class=\"line\">   // char recvbuf[200];</span><br><span class=\"line\">   // int iDataNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    struct Message MSG = &#123;100, 54321, &quot;huangjiahao&quot;, &quot;world&quot;, &quot;tttttest&quot;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    if((clientSocket = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;err socket\\n&quot;);</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    serverAddr.sin_family = AF_INET;</span><br><span class=\"line\">    serverAddr.sin_port = htons(SERVER_PORT);</span><br><span class=\"line\">    //指定服务器端的ip，本地测试：127.0.0.1</span><br><span class=\"line\">    //inet_addr()函数，将点分十进制IP转换成网络字节序IP</span><br><span class=\"line\">    serverAddr.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;);</span><br><span class=\"line\">    if(connect(clientSocket, (struct sockaddr *)&amp;serverAddr, sizeof(serverAddr)) &lt; 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;err connect\\n&quot;);</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;connect with destination host...\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //数据格式转化为tlv，进行发送</span><br><span class=\"line\">    send_tlv(clientSocket,(unsigned char *)&amp;MSG, sizeof(MSG), 0);</span><br><span class=\"line\"></span><br><span class=\"line\">/*    while(1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;Input your word:&gt;&quot;);</span><br><span class=\"line\">        scanf(&quot;%s&quot;, sendbuf);</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        send(clientSocket, sendbuf, strlen(sendbuf), 0);</span><br><span class=\"line\">        if(strcmp(sendbuf, &quot;quit&quot;) == 0)</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        iDataNum = recv(clientSocket, recvbuf, 200, 0);</span><br><span class=\"line\">        recvbuf[iDataNum] = &apos;\\0&apos;;</span><br><span class=\"line\">        printf(&quot;recv data of my world is: %s\\n&quot;, recvbuf);</span><br><span class=\"line\">    &#125;*/</span><br><span class=\"line\">    close(clientSocket);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argv, char* arg[])&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (argv &gt; 1)&#123;</span><br><span class=\"line\">        printf(&quot;start client...\\n&quot;);</span><br><span class=\"line\">        client();</span><br><span class=\"line\">    &#125; else&#123;</span><br><span class=\"line\">        printf(&quot;start server...\\n&quot;);</span><br><span class=\"line\">        server();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Makefile:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># by jihan</span><br><span class=\"line\">DIR_INC = .</span><br><span class=\"line\">DIR_SRC = .</span><br><span class=\"line\">DIR_OBJ = .</span><br><span class=\"line\">DIR_BIN = .</span><br><span class=\"line\"></span><br><span class=\"line\">EVENT_LIB = /usr/local/lib</span><br><span class=\"line\">EVENT_INC = /usr/local/include</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#ALL_LD = -L$&#123;EVENT_LIB&#125;</span><br><span class=\"line\">#ALL_INC = -I$&#123;EVENT_INC&#125;</span><br><span class=\"line\">ALL_LIB = -lssl</span><br><span class=\"line\"></span><br><span class=\"line\">CXX = g++</span><br><span class=\"line\">CC = gcc</span><br><span class=\"line\">CFLAGS = -g -O2 -Wall -Werror</span><br><span class=\"line\">MPIF90 = mpiif90</span><br><span class=\"line\"></span><br><span class=\"line\">SRC = $(wildcard $&#123;DIR_SRC&#125;/*.c)</span><br><span class=\"line\">OBJ = $(patsubst %.c,$&#123;DIR_OBJ&#125;/%.o,$(notdir $&#123;SRC&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">TARGET = a.out</span><br><span class=\"line\"></span><br><span class=\"line\">BIN_TARGET = $&#123;DIR_BIN&#125;/$&#123;TARGET&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY:all</span><br><span class=\"line\">all: $&#123;BIN_TARGET&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;BIN_TARGET&#125;: $&#123;OBJ&#125;</span><br><span class=\"line\">\t$(CC) $(CFLAGS) $(OBJ)  -o $@ $(ALL_LD) $(ALL_LIB)</span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;DIR_OBJ&#125;/%.o:$&#123;DIR_SRC&#125;/%.c</span><br><span class=\"line\">\t$(CC) $(CFLAGS)  -c $&lt; -o $@ $(ALL_INC)</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY:clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">\t-rm -f *.out</span><br><span class=\"line\">\t-rm -f *.o</span><br><span class=\"line\">#\t-rm -f ./ncfile/*.nc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fixed=xy04c</span><br><span class=\"line\">.PHONY:$&#123;fixed&#125;</span><br><span class=\"line\">$&#123;fixed&#125;: $&#123;fixed&#125;.c</span><br><span class=\"line\">\t$(CC) $(CFLAGS) -o $@.out $&lt; $(ALL_LD) $(ALL_INC) $(ALL_LIB)</span><br><span class=\"line\"></span><br><span class=\"line\">IN=$(in)</span><br><span class=\"line\">.PHONY:one</span><br><span class=\"line\">one: $&#123;IN&#125;.c</span><br><span class=\"line\">\t$(CC) $(CFLAGS) -o $&#123;IN&#125;.out $&lt; $(ALL_LD) $(ALL_INC) $(ALL_LIB)</span><br><span class=\"line\"></span><br><span class=\"line\">.PHONY:maketest</span><br><span class=\"line\">maketest:</span><br><span class=\"line\">\t-echo $&#123;SRC&#125;</span><br><span class=\"line\">\t-echo $&#123;OBJ&#125; $&#123;BIN_TARGET&#125;</span><br><span class=\"line\">\t-echo $(notdir $&#123;SRC&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">#（1）Makefile中的 符号 $@, $^, $&lt; 的意思：</span><br><span class=\"line\">#　　$@  表示目标文件</span><br><span class=\"line\">#　　$^  表示所有的依赖文件</span><br><span class=\"line\">#　　$&lt;  表示第一个依赖文件</span><br><span class=\"line\">#　　$?  表示比目标还要新的依赖文件列表</span><br><span class=\"line\"></span><br><span class=\"line\">#（2）wildcard、notdir、patsubst的意思：</span><br><span class=\"line\">#　　wildcard : 扩展通配符</span><br><span class=\"line\">#　　notdir ： 去除路径</span><br><span class=\"line\">#　　patsubst ：替换通配符</span><br><span class=\"line\"></span><br><span class=\"line\">#（3）PHONY 表示伪目标，比如clean，如果文件中</span><br><span class=\"line\">#\t  存在clean文件，那么添加了此关键字依旧能</span><br><span class=\"line\">#\t  执行rm操作。</span><br></pre></td></tr></table></figure>\n\n<p>linux 平台下：<br><code>make</code><br><code>./a.out</code>运行server<br><code>./a.out</code>运行client</p>"},{"title":"hexo博客使用指南","date":"2020-09-14T01:45:23.000Z","_content":"\n久了不更新博客，就不知道怎么搞环境了，换了环境又得查。索性自己写个简单的(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n可根据自己的需求进行快速定位，本文对应的发布环境是GitHub\n\n### 从0-1搭建hexo网站\n我就不做copper了，直接上链接：\n[超详细Hexo+Github博客搭建小白教程](https://godweiyang.com/2018/04/13/hexo-blog/)\n[hexo主题next](https://github.com/iissnan/hexo-theme-next)（我自己用的）\n[hexo主题推荐](https://www.zhihu.com/question/24422335)\n[hexo主题美化1](https://www.jianshu.com/p/3ff20be8574c)\n[hexo主题美化2](https://blog.csdn.net/nightmare_dimple/article/details/86661502)\n[评论系统](https://valine.js.org/)\n\n### 已有博客，环境迁移\n主要是相应环境安装：\n1. node.js [官方下载](https://nodejs.org/zh-cn/download/releases/), 我这里选择的是12.x的版本。\n   windows直接点安装\n   Linux下载解压后，配置路径`export PATH=$PATH:xxxx/node-v14.10.0-linux-x64/bin`\n2. git安装\n   windows直接点安装\n   Liunx `sudo yum install git`或`sudo apt install git`\n3. 安装hexo\n   ```\n   npm i hexo-cli -g\n\n    #配置git扩展，在你自己的博客里肯定已经配置了项目地址关联\n   npm i hexo-deployer-git\n   ```\n4. 可能有必要\n   如果项目里没有node_modules文件夹，需要到博客根目录重新安装一波：`npm install`\n\n\n### 已有环境，新发文\n发文常用命令(通常都是顺序执行)：\n```\n# 新建文章\nhexo new post \"article title\"\n# 生成博客网页文件\nhexo g  \n# 本地预览博客\nhexo s  \nhexo s -i 0.0.0.0 -p 8080 #指定监听地址端口\n# 上传网页文件到github\nhexo d  \n```\n博客源码备份：\n```\nhexo clean\ngit add -u\ngit commit -m \"new post\"\ngit push\n```\n\n### 常用Markdown语法\n主要针对GitHub，参考[官方文档](https://docs.github.com/cn/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)\n*注意语法中的空格*\n\n#### 标题\n```\n# 最大标题\n## 第二大标题\n###### 最小标题\n```\n\n#### 样式文本\n\n|样式\t|语法|\n|---|---|\n|粗体|\t** ** 或 __ __\t|\n|斜体|\t* * 或 _ _\t||\n|删除线|\t~~ ~~\t\t|\n|粗体和嵌入的斜体|\t** ** 和 _ _|\n|全部粗体和斜体|\t*** ***|\n\n#### 引用文本\n```\n> 引用的文本\n```\n#### 引用代码\n```\n`单行代码引用`\n```\n\n````\n```json(代码类型)\n 多行代码引用\n```\n````\n如果想在代码块中显示\\`\\`\\`, 只需要外层的\\` 比内层的多即可：\n`````\n```` 代码块标识\n```json\n显示的代码\n```\n````\n`````\n\n#### 链接\n```\n[普通链接](https://jihanhuang.github.io/)\n![图片链接](./技术札记/ssh免密登录原理.png)\n[下载链接](./《mysql必知必会》读书笔记/mysql_scripts.zip)\n[文章导航链接](#已有博客环境迁移)\n```\n\n#### 列表\n```\n1. James Madison\n2. James Monroe\n3. John Quincy Adams\n```\n`*`或`-`都可以\n```\n- George Washington\n- John Adams\n- Thomas Jefferson\n```\n嵌套(子列表的`-`需在父列表的第一个字下)\n```\n1. 第一个列表项\n   -  第一个嵌套列表项\n     - 第二个嵌套列表项\n```\n任务：\n```\n- [x] 完成更改\n- [ ] 推送提交到 GitHub\n- [ ] 打开拉取请求\n- [ ] \\(Optional) 规避[]后的()\n```\n\n#### 表格\n```\n|列标题\t|列标题|\n|---|---|\n|数据11|\t数据21 <br> br表示换行\t|\n|数据12|\t数据22\t|\n```\n\n#### 绘图\nhexo自身都不支持Markdown标准绘图和Mermaid。需要进行配置：\n执行以下命令：\n```shell\nnpm install --save hexo-filter-mermaid-diagrams\nnpm install --save hexo-filter-sequence\nnpm install --save hexo-filter-flowchart\n```\nMermaid配置可以阅读：[Hexo中引入Mermaid流程图](https://tyloafer.github.io/posts/7790/)，引用部分如下：\n\n> Mermaid还需要进行配置(根目录下_config.yml)，增加如下内容：\n> ```\n> # mermaid chart\n> mermaid: ## mermaid url https://github.com/knsv/mermaid\n>   enable: true  # default true\n>   version: \"7.1.2\" # default v7.1.2\n>   options:  # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js\n>     #startOnload: true  // default true\n> ```\n> 以及修改js，我这里使用的是`next`主题。在文件`themes/next/layout/_partials/footer.swig`后>加上：\n> ```\n> {% if (theme.mermaid.enable)  %}\n>   <script src='https://unpkg.com/mermaid@{{ theme.mermaid.version }}/dist/mermaid.min.js'></script>\n>   <script>\n>     if (window.mermaid) {\n>       mermaid.initialize({theme: 'forest'});\n>     }\n>   </script>\n> {% endif %}\n> ```\n\n\n语法绘图：\ngraphviz：较为复杂，特别是时序图，但功能强大。[graphviz在线绘图](https://sketchviz.com/new)，[graphviz dot语法总结](https://onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/#1-%E7%AE%80%E4%BB%8B)\nplantuml：绘图风格单一(个人不觉得丑)，但画时序图很快，模板多，本体使用需要java支持。[plantmul在线绘图](https://www.planttext.com/)：多个模板供选择。能接受画面的，还是推荐使用\nMermaid：功能简单，绘图较快，美观度还可以，很多Markdown编辑器都支持。[语法](https://mermaid-js.github.io/mermaid/#/)，个人使用感觉功能太少(可能是插件支持不友好)\n##### 示例\n*[来源](https://www.runoob.com/markdown/md-advance.html)*\n**Markdown标准支持：**\n流程图：\n\n`````\n```flow\nst=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst->op->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op\n```\n`````\n\n效果：\n```flow\nst=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst->op->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op\n```\n\n流程图(横向)：\n````\n```flow\nst=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst(right)->op(right)->cond\ncond(yes)->io(bottom)->e\ncond(no)->sub1(right)->op\n```\n````\n\n效果：\n```flow\nst=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst(right)->op(right)->cond\ncond(yes)->io(bottom)->e\ncond(no)->sub1(right)->op\n```\nUML样例：\n````\n```sequence\n对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象A->对象B: 你真的好吗？\n```\n````\n\n效果：\n```sequence\n对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象A->对象B: 你真的好吗？\n```\nUML复杂样例：\n````\n```sequence\nTitle: 标题：复杂使用\n对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象B->小三: 你好吗\n小三-->>对象A: 对象B找我了\n对象A->对象B: 你真的好吗？\nNote over 小三,对象B: 我们是朋友\nparticipant C\nNote right of C: 没人陪我玩\n```\n````\n\n效果：\n```sequence\nTitle: 标题：复杂使用\n对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象B->小三: 你好吗\n小三-->>对象A: 对象B找我了\n对象A->对象B: 你真的好吗？\nNote over 小三,对象B: 我们是朋友\nparticipant C\nNote right of C: 没人陪我玩\n```\n\n**Mermaid：**\n[语法](https://mermaid-js.github.io/mermaid/#/)\n流程图：\n````\n```mermaid\ngraph TD\nA[方形] --> B(圆角)\n    B --> C{条件a}\n    C --> |a=1| D[结果1]\n    C --> |a=2| E[结果2]\n    F[竖向流程图]\n```\n````\n\n效果：\n```mermaid\ngraph TD\nA[方形] --> B(圆角)\n    B --> C{条件a}\n    C --> |a=1| D[结果1]\n    C --> |a=2| E[结果2]\n    F[竖向流程图]\n```\nUML样例：\n````\n```mermaid\n  sequenceDiagram\n    participant 张三\n    participant 李四\n    张三->王五: 王五你好吗？\n    loop 健康检查\n        王五->王五: 与疾病战斗\n    end\n    Note right of 王五: 合理 食物 <br/>看医生...\n    李四-->>张三: 很好!\n    王五->李四: 你怎么样?\n    李四-->王五: 很好!\n```\n````\n\n效果：\n```mermaid\n  sequenceDiagram\n    participant 张三\n    participant 李四\n    张三->王五: 王五你好吗？\n    loop 健康检查\n        王五->王五: 与疾病战斗\n    end\n    Note right of 王五: 合理 食物 <br/>看医生...\n    李四-->>张三: 很好!\n    王五->李四: 你怎么样?\n    李四-->王五: 很好!\n```\n\n甘特图：\n````\n```mermaid\n      gantt\n        dateFormat  YYYY-MM-DD\n        title 软件开发甘特图\n        section 设计\n        需求                      :done,    des1, 2014-01-06,2014-01-08\n        原型                      :active,  des2, 2014-01-09, 3d\n        UI设计                     :         des3, after des2, 5d\n    未来任务                     :         des4, after des3, 5d\n        section 开发\n        学习准备理解需求                      :crit, done, 2014-01-06,24h\n        设计框架                             :crit, done, after des2, 2d\n        开发                                 :crit, active, 3d\n        未来任务                              :crit, 5d\n        耍                                   :2d\n        section 测试\n        功能测试                              :active, a1, after des3, 3d\n        压力测试                               :after a1  , 20h\n        测试报告                               : 48h\n```\n````\n\n效果：\n```mermaid\n      gantt\n        dateFormat  YYYY-MM-DD\n        title 软件开发甘特图\n        section 设计\n        需求                      :done,    des1, 2014-01-06,2014-01-08\n        原型                      :active,  des2, 2014-01-09, 3d\n        UI设计                     :         des3, after des2, 5d\n    未来任务                     :         des4, after des3, 5d\n        section 开发\n        学习准备理解需求                      :crit, done, 2014-01-06,24h\n        设计框架                             :crit, done, after des2, 2d\n        开发                                 :crit, active, 3d\n        未来任务                              :crit, 5d\n        耍                                   :2d\n        section 测试\n        功能测试                              :active, a1, after des3, 3d\n        压力测试                               :after a1  , 20h\n        测试报告                               : 48h\n```\n\n\n\n#### 段落\n通过在文本行之间留一个空白行，可创建新段落。\n\n#### 忽略Markdown格式\n1. 使用代码块\n2. 使用`\\`\n\n#### 使用表情符号\n通过键入 `:EMOJICODE:` 可在您的写作中添加表情符号。\n比如`:+1:` :+1:  \nhexo默认是不支持表情符号的，因此我在[这儿](https://novnan.github.io/Hexo/emojis-for-hexo-next/)找到了解决方案：\n> 安装\n> ```\n> npm install hexo-filter-github-emojis --save\n> ```\n> 打开配置文件(根目录下的`_config.yml`文件)，并增加：\n> ```\n> githubEmojis:\n>   enable: true\n>   className: github-emoji\n>   unicode: false\n>   styles:\n>   localEmojis:\n> ```\n> GitHubEmojis更多配置参考[文档](https://github.com/crimx/hexo-filter-github-emojis)\n\n更多表情符号参考[emoji-cheat-sheet](https://www.webfx.com/tools/emoji-cheat-sheet/) :sunglasses: \n\n### 可能遇到问题\n**发布图片视频音频：**\n图片发布很简单：\n你在`hexo new post \"xxx\"`会在__posts下生成一个对应xxx.md和一个xxx文件夹。图片放在文件夹里，文章里引用：\n```\n![hello](xxx/image.jpg)\n```\n[视频发布](https://www.jianshu.com/p/26a7fc7cc185)\n**github配置域名发布后被清空：**\n在对应source目录下新建一个CNAME文件，只放置一行你指向的域名。例如：\n```\n# tree Blog/source/ -L 1\nBlog/source/\n|-- categories\n|-- CNAME\n|-- download\n|-- _posts\n|-- tags\n`-- uploads\n# cat Blog/source/CNAME \nxxx.com\n```\n","source":"_posts/hexo博客使用指南.md","raw":"---\ntitle: hexo博客使用指南\ndate: 2020-09-14 09:45:23\ncategories: 技术杂谈\ntags: 工具\n---\n\n久了不更新博客，就不知道怎么搞环境了，换了环境又得查。索性自己写个简单的(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n可根据自己的需求进行快速定位，本文对应的发布环境是GitHub\n\n### 从0-1搭建hexo网站\n我就不做copper了，直接上链接：\n[超详细Hexo+Github博客搭建小白教程](https://godweiyang.com/2018/04/13/hexo-blog/)\n[hexo主题next](https://github.com/iissnan/hexo-theme-next)（我自己用的）\n[hexo主题推荐](https://www.zhihu.com/question/24422335)\n[hexo主题美化1](https://www.jianshu.com/p/3ff20be8574c)\n[hexo主题美化2](https://blog.csdn.net/nightmare_dimple/article/details/86661502)\n[评论系统](https://valine.js.org/)\n\n### 已有博客，环境迁移\n主要是相应环境安装：\n1. node.js [官方下载](https://nodejs.org/zh-cn/download/releases/), 我这里选择的是12.x的版本。\n   windows直接点安装\n   Linux下载解压后，配置路径`export PATH=$PATH:xxxx/node-v14.10.0-linux-x64/bin`\n2. git安装\n   windows直接点安装\n   Liunx `sudo yum install git`或`sudo apt install git`\n3. 安装hexo\n   ```\n   npm i hexo-cli -g\n\n    #配置git扩展，在你自己的博客里肯定已经配置了项目地址关联\n   npm i hexo-deployer-git\n   ```\n4. 可能有必要\n   如果项目里没有node_modules文件夹，需要到博客根目录重新安装一波：`npm install`\n\n\n### 已有环境，新发文\n发文常用命令(通常都是顺序执行)：\n```\n# 新建文章\nhexo new post \"article title\"\n# 生成博客网页文件\nhexo g  \n# 本地预览博客\nhexo s  \nhexo s -i 0.0.0.0 -p 8080 #指定监听地址端口\n# 上传网页文件到github\nhexo d  \n```\n博客源码备份：\n```\nhexo clean\ngit add -u\ngit commit -m \"new post\"\ngit push\n```\n\n### 常用Markdown语法\n主要针对GitHub，参考[官方文档](https://docs.github.com/cn/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax)\n*注意语法中的空格*\n\n#### 标题\n```\n# 最大标题\n## 第二大标题\n###### 最小标题\n```\n\n#### 样式文本\n\n|样式\t|语法|\n|---|---|\n|粗体|\t** ** 或 __ __\t|\n|斜体|\t* * 或 _ _\t||\n|删除线|\t~~ ~~\t\t|\n|粗体和嵌入的斜体|\t** ** 和 _ _|\n|全部粗体和斜体|\t*** ***|\n\n#### 引用文本\n```\n> 引用的文本\n```\n#### 引用代码\n```\n`单行代码引用`\n```\n\n````\n```json(代码类型)\n 多行代码引用\n```\n````\n如果想在代码块中显示\\`\\`\\`, 只需要外层的\\` 比内层的多即可：\n`````\n```` 代码块标识\n```json\n显示的代码\n```\n````\n`````\n\n#### 链接\n```\n[普通链接](https://jihanhuang.github.io/)\n![图片链接](./技术札记/ssh免密登录原理.png)\n[下载链接](./《mysql必知必会》读书笔记/mysql_scripts.zip)\n[文章导航链接](#已有博客环境迁移)\n```\n\n#### 列表\n```\n1. James Madison\n2. James Monroe\n3. John Quincy Adams\n```\n`*`或`-`都可以\n```\n- George Washington\n- John Adams\n- Thomas Jefferson\n```\n嵌套(子列表的`-`需在父列表的第一个字下)\n```\n1. 第一个列表项\n   -  第一个嵌套列表项\n     - 第二个嵌套列表项\n```\n任务：\n```\n- [x] 完成更改\n- [ ] 推送提交到 GitHub\n- [ ] 打开拉取请求\n- [ ] \\(Optional) 规避[]后的()\n```\n\n#### 表格\n```\n|列标题\t|列标题|\n|---|---|\n|数据11|\t数据21 <br> br表示换行\t|\n|数据12|\t数据22\t|\n```\n\n#### 绘图\nhexo自身都不支持Markdown标准绘图和Mermaid。需要进行配置：\n执行以下命令：\n```shell\nnpm install --save hexo-filter-mermaid-diagrams\nnpm install --save hexo-filter-sequence\nnpm install --save hexo-filter-flowchart\n```\nMermaid配置可以阅读：[Hexo中引入Mermaid流程图](https://tyloafer.github.io/posts/7790/)，引用部分如下：\n\n> Mermaid还需要进行配置(根目录下_config.yml)，增加如下内容：\n> ```\n> # mermaid chart\n> mermaid: ## mermaid url https://github.com/knsv/mermaid\n>   enable: true  # default true\n>   version: \"7.1.2\" # default v7.1.2\n>   options:  # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js\n>     #startOnload: true  // default true\n> ```\n> 以及修改js，我这里使用的是`next`主题。在文件`themes/next/layout/_partials/footer.swig`后>加上：\n> ```\n> {% if (theme.mermaid.enable)  %}\n>   <script src='https://unpkg.com/mermaid@{{ theme.mermaid.version }}/dist/mermaid.min.js'></script>\n>   <script>\n>     if (window.mermaid) {\n>       mermaid.initialize({theme: 'forest'});\n>     }\n>   </script>\n> {% endif %}\n> ```\n\n\n语法绘图：\ngraphviz：较为复杂，特别是时序图，但功能强大。[graphviz在线绘图](https://sketchviz.com/new)，[graphviz dot语法总结](https://onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/#1-%E7%AE%80%E4%BB%8B)\nplantuml：绘图风格单一(个人不觉得丑)，但画时序图很快，模板多，本体使用需要java支持。[plantmul在线绘图](https://www.planttext.com/)：多个模板供选择。能接受画面的，还是推荐使用\nMermaid：功能简单，绘图较快，美观度还可以，很多Markdown编辑器都支持。[语法](https://mermaid-js.github.io/mermaid/#/)，个人使用感觉功能太少(可能是插件支持不友好)\n##### 示例\n*[来源](https://www.runoob.com/markdown/md-advance.html)*\n**Markdown标准支持：**\n流程图：\n\n`````\n```flow\nst=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst->op->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op\n```\n`````\n\n效果：\n```flow\nst=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst->op->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op\n```\n\n流程图(横向)：\n````\n```flow\nst=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst(right)->op(right)->cond\ncond(yes)->io(bottom)->e\ncond(no)->sub1(right)->op\n```\n````\n\n效果：\n```flow\nst=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst(right)->op(right)->cond\ncond(yes)->io(bottom)->e\ncond(no)->sub1(right)->op\n```\nUML样例：\n````\n```sequence\n对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象A->对象B: 你真的好吗？\n```\n````\n\n效果：\n```sequence\n对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象A->对象B: 你真的好吗？\n```\nUML复杂样例：\n````\n```sequence\nTitle: 标题：复杂使用\n对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象B->小三: 你好吗\n小三-->>对象A: 对象B找我了\n对象A->对象B: 你真的好吗？\nNote over 小三,对象B: 我们是朋友\nparticipant C\nNote right of C: 没人陪我玩\n```\n````\n\n效果：\n```sequence\nTitle: 标题：复杂使用\n对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象B->小三: 你好吗\n小三-->>对象A: 对象B找我了\n对象A->对象B: 你真的好吗？\nNote over 小三,对象B: 我们是朋友\nparticipant C\nNote right of C: 没人陪我玩\n```\n\n**Mermaid：**\n[语法](https://mermaid-js.github.io/mermaid/#/)\n流程图：\n````\n```mermaid\ngraph TD\nA[方形] --> B(圆角)\n    B --> C{条件a}\n    C --> |a=1| D[结果1]\n    C --> |a=2| E[结果2]\n    F[竖向流程图]\n```\n````\n\n效果：\n```mermaid\ngraph TD\nA[方形] --> B(圆角)\n    B --> C{条件a}\n    C --> |a=1| D[结果1]\n    C --> |a=2| E[结果2]\n    F[竖向流程图]\n```\nUML样例：\n````\n```mermaid\n  sequenceDiagram\n    participant 张三\n    participant 李四\n    张三->王五: 王五你好吗？\n    loop 健康检查\n        王五->王五: 与疾病战斗\n    end\n    Note right of 王五: 合理 食物 <br/>看医生...\n    李四-->>张三: 很好!\n    王五->李四: 你怎么样?\n    李四-->王五: 很好!\n```\n````\n\n效果：\n```mermaid\n  sequenceDiagram\n    participant 张三\n    participant 李四\n    张三->王五: 王五你好吗？\n    loop 健康检查\n        王五->王五: 与疾病战斗\n    end\n    Note right of 王五: 合理 食物 <br/>看医生...\n    李四-->>张三: 很好!\n    王五->李四: 你怎么样?\n    李四-->王五: 很好!\n```\n\n甘特图：\n````\n```mermaid\n      gantt\n        dateFormat  YYYY-MM-DD\n        title 软件开发甘特图\n        section 设计\n        需求                      :done,    des1, 2014-01-06,2014-01-08\n        原型                      :active,  des2, 2014-01-09, 3d\n        UI设计                     :         des3, after des2, 5d\n    未来任务                     :         des4, after des3, 5d\n        section 开发\n        学习准备理解需求                      :crit, done, 2014-01-06,24h\n        设计框架                             :crit, done, after des2, 2d\n        开发                                 :crit, active, 3d\n        未来任务                              :crit, 5d\n        耍                                   :2d\n        section 测试\n        功能测试                              :active, a1, after des3, 3d\n        压力测试                               :after a1  , 20h\n        测试报告                               : 48h\n```\n````\n\n效果：\n```mermaid\n      gantt\n        dateFormat  YYYY-MM-DD\n        title 软件开发甘特图\n        section 设计\n        需求                      :done,    des1, 2014-01-06,2014-01-08\n        原型                      :active,  des2, 2014-01-09, 3d\n        UI设计                     :         des3, after des2, 5d\n    未来任务                     :         des4, after des3, 5d\n        section 开发\n        学习准备理解需求                      :crit, done, 2014-01-06,24h\n        设计框架                             :crit, done, after des2, 2d\n        开发                                 :crit, active, 3d\n        未来任务                              :crit, 5d\n        耍                                   :2d\n        section 测试\n        功能测试                              :active, a1, after des3, 3d\n        压力测试                               :after a1  , 20h\n        测试报告                               : 48h\n```\n\n\n\n#### 段落\n通过在文本行之间留一个空白行，可创建新段落。\n\n#### 忽略Markdown格式\n1. 使用代码块\n2. 使用`\\`\n\n#### 使用表情符号\n通过键入 `:EMOJICODE:` 可在您的写作中添加表情符号。\n比如`:+1:` :+1:  \nhexo默认是不支持表情符号的，因此我在[这儿](https://novnan.github.io/Hexo/emojis-for-hexo-next/)找到了解决方案：\n> 安装\n> ```\n> npm install hexo-filter-github-emojis --save\n> ```\n> 打开配置文件(根目录下的`_config.yml`文件)，并增加：\n> ```\n> githubEmojis:\n>   enable: true\n>   className: github-emoji\n>   unicode: false\n>   styles:\n>   localEmojis:\n> ```\n> GitHubEmojis更多配置参考[文档](https://github.com/crimx/hexo-filter-github-emojis)\n\n更多表情符号参考[emoji-cheat-sheet](https://www.webfx.com/tools/emoji-cheat-sheet/) :sunglasses: \n\n### 可能遇到问题\n**发布图片视频音频：**\n图片发布很简单：\n你在`hexo new post \"xxx\"`会在__posts下生成一个对应xxx.md和一个xxx文件夹。图片放在文件夹里，文章里引用：\n```\n![hello](xxx/image.jpg)\n```\n[视频发布](https://www.jianshu.com/p/26a7fc7cc185)\n**github配置域名发布后被清空：**\n在对应source目录下新建一个CNAME文件，只放置一行你指向的域名。例如：\n```\n# tree Blog/source/ -L 1\nBlog/source/\n|-- categories\n|-- CNAME\n|-- download\n|-- _posts\n|-- tags\n`-- uploads\n# cat Blog/source/CNAME \nxxx.com\n```\n","slug":"hexo博客使用指南","published":1,"updated":"2021-01-25T03:29:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insj000gh9uog5g4k2lp","content":"<p>久了不更新博客，就不知道怎么搞环境了，换了环境又得查。索性自己写个简单的(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n<p>可根据自己的需求进行快速定位，本文对应的发布环境是GitHub</p>\n<h3 id=\"从0-1搭建hexo网站\"><a href=\"#从0-1搭建hexo网站\" class=\"headerlink\" title=\"从0-1搭建hexo网站\"></a>从0-1搭建hexo网站</h3><p>我就不做copper了，直接上链接：<br><a href=\"https://godweiyang.com/2018/04/13/hexo-blog/\" target=\"_blank\" rel=\"noopener\">超详细Hexo+Github博客搭建小白教程</a><br><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">hexo主题next</a>（我自己用的）<br><a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">hexo主题推荐</a><br><a href=\"https://www.jianshu.com/p/3ff20be8574c\" target=\"_blank\" rel=\"noopener\">hexo主题美化1</a><br><a href=\"https://blog.csdn.net/nightmare_dimple/article/details/86661502\" target=\"_blank\" rel=\"noopener\">hexo主题美化2</a><br><a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">评论系统</a></p>\n<h3 id=\"已有博客，环境迁移\"><a href=\"#已有博客，环境迁移\" class=\"headerlink\" title=\"已有博客，环境迁移\"></a>已有博客，环境迁移</h3><p>主要是相应环境安装：</p>\n<ol>\n<li><p>node.js <a href=\"https://nodejs.org/zh-cn/download/releases/\" target=\"_blank\" rel=\"noopener\">官方下载</a>, 我这里选择的是12.x的版本。<br>windows直接点安装<br>Linux下载解压后，配置路径<code>export PATH=$PATH:xxxx/node-v14.10.0-linux-x64/bin</code></p>\n</li>\n<li><p>git安装<br>windows直接点安装<br>Liunx <code>sudo yum install git</code>或<code>sudo apt install git</code></p>\n</li>\n<li><p>安装hexo</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"> #配置git扩展，在你自己的博客里肯定已经配置了项目地址关联</span><br><span class=\"line\">npm i hexo-deployer-git</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>可能有必要<br>如果项目里没有node_modules文件夹，需要到博客根目录重新安装一波：<code>npm install</code></p>\n</li>\n</ol>\n<h3 id=\"已有环境，新发文\"><a href=\"#已有环境，新发文\" class=\"headerlink\" title=\"已有环境，新发文\"></a>已有环境，新发文</h3><p>发文常用命令(通常都是顺序执行)：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建文章</span><br><span class=\"line\">hexo new post \"article title\"</span><br><span class=\"line\"># 生成博客网页文件</span><br><span class=\"line\">hexo g  </span><br><span class=\"line\"># 本地预览博客</span><br><span class=\"line\">hexo s  </span><br><span class=\"line\">hexo s -i 0.0.0.0 -p 8080 #指定监听地址端口</span><br><span class=\"line\"># 上传网页文件到github</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></tbody></table></figure>\n\n<p>博客源码备份：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">git add -u</span><br><span class=\"line\">git commit -m \"new post\"</span><br><span class=\"line\">git push</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"常用Markdown语法\"><a href=\"#常用Markdown语法\" class=\"headerlink\" title=\"常用Markdown语法\"></a>常用Markdown语法</h3><p>主要针对GitHub，参考<a href=\"https://docs.github.com/cn/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax\" target=\"_blank\" rel=\"noopener\">官方文档</a><br><em>注意语法中的空格</em></p>\n<h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 最大标题</span><br><span class=\"line\">## 第二大标题</span><br><span class=\"line\">###### 最小标题</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"样式文本\"><a href=\"#样式文本\" class=\"headerlink\" title=\"样式文本\"></a>样式文本</h4><table>\n<thead>\n<tr>\n<th>样式</th>\n<th>语法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>粗体</td>\n<td>** ** 或 __ __</td>\n</tr>\n<tr>\n<td>斜体</td>\n<td>* * 或 _ _</td>\n</tr>\n<tr>\n<td>删除线</td>\n<td>~~ ~~</td>\n</tr>\n<tr>\n<td>粗体和嵌入的斜体</td>\n<td>** ** 和 _ _</td>\n</tr>\n<tr>\n<td>全部粗体和斜体</td>\n<td><strong>* *</strong></td>\n</tr>\n</tbody></table>\n<h4 id=\"引用文本\"><a href=\"#引用文本\" class=\"headerlink\" title=\"引用文本\"></a>引用文本</h4><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 引用的文本</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"引用代码\"><a href=\"#引用代码\" class=\"headerlink\" title=\"引用代码\"></a>引用代码</h4><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`单行代码引用`</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```json(代码类型)</span><br><span class=\"line\"> 多行代码引用</span><br><span class=\"line\">```</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果想在代码块中显示```, 只需要外层的` 比内层的多即可：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```` 代码块标识</span><br><span class=\"line\">```json</span><br><span class=\"line\">显示的代码</span><br><span class=\"line\">```</span><br><span class=\"line\">````</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[普通链接](https://jihanhuang.github.io/)</span><br><span class=\"line\">![图片链接](./技术札记/ssh免密登录原理.png)</span><br><span class=\"line\">[下载链接](./《mysql必知必会》读书笔记/mysql_scripts.zip)</span><br><span class=\"line\">[文章导航链接](#已有博客环境迁移)</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. James Madison</span><br><span class=\"line\">2. James Monroe</span><br><span class=\"line\">3. John Quincy Adams</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>*</code>或<code>-</code>都可以</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- George Washington</span><br><span class=\"line\">- John Adams</span><br><span class=\"line\">- Thomas Jefferson</span><br></pre></td></tr></tbody></table></figure>\n\n<p>嵌套(子列表的<code>-</code>需在父列表的第一个字下)</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 第一个列表项</span><br><span class=\"line\">   -  第一个嵌套列表项</span><br><span class=\"line\">     - 第二个嵌套列表项</span><br></pre></td></tr></tbody></table></figure>\n\n<p>任务：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [x] 完成更改</span><br><span class=\"line\">- [ ] 推送提交到 GitHub</span><br><span class=\"line\">- [ ] 打开拉取请求</span><br><span class=\"line\">- [ ] \\(Optional) 规避[]后的()</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|列标题\t|列标题|</span><br><span class=\"line\">|---|---|</span><br><span class=\"line\">|数据11|\t数据21 &lt;br&gt; br表示换行\t|</span><br><span class=\"line\">|数据12|\t数据22\t|</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"绘图\"><a href=\"#绘图\" class=\"headerlink\" title=\"绘图\"></a>绘图</h4><p>hexo自身都不支持Markdown标准绘图和Mermaid。需要进行配置：<br>执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-filter-mermaid-diagrams</span><br><span class=\"line\">npm install --save hexo-filter-sequence</span><br><span class=\"line\">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></tbody></table></figure>\n\n<p>Mermaid配置可以阅读：<a href=\"https://tyloafer.github.io/posts/7790/\" target=\"_blank\" rel=\"noopener\">Hexo中引入Mermaid流程图</a>，引用部分如下：</p>\n<blockquote>\n<p>Mermaid还需要进行配置(根目录下_config.yml)，增加如下内容：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; # mermaid chart</span><br><span class=\"line\">&gt; mermaid: ## mermaid url https://github.com/knsv/mermaid</span><br><span class=\"line\">&gt;   enable: true  # default true</span><br><span class=\"line\">&gt;   version: \"7.1.2\" # default v7.1.2</span><br><span class=\"line\">&gt;   options:  # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span><br><span class=\"line\">&gt;     #startOnload: true  // default true</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></tbody></table></figure>\n</blockquote>\n<blockquote>\n<p>以及修改js，我这里使用的是<code>next</code>主题。在文件<code>themes/next/layout/_partials/footer.swig</code>后&gt;加上：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; {% if (theme.mermaid.enable)  %}</span><br><span class=\"line\">&gt;   &lt;script src='https://unpkg.com/mermaid@{{ theme.mermaid.version }}/dist/mermaid.min.js'&gt;&lt;/script&gt;</span><br><span class=\"line\">&gt;   &lt;script&gt;</span><br><span class=\"line\">&gt;     if (window.mermaid) {</span><br><span class=\"line\">&gt;       mermaid.initialize({theme: 'forest'});</span><br><span class=\"line\">&gt;     }</span><br><span class=\"line\">&gt;   &lt;/script&gt;</span><br><span class=\"line\">&gt; {% endif %}</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></tbody></table></figure>\n</blockquote>\n<p>语法绘图：<br>graphviz：较为复杂，特别是时序图，但功能强大。<a href=\"https://sketchviz.com/new\" target=\"_blank\" rel=\"noopener\">graphviz在线绘图</a>，<a href=\"https://onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/#1-%E7%AE%80%E4%BB%8B\" target=\"_blank\" rel=\"noopener\">graphviz dot语法总结</a><br>plantuml：绘图风格单一(个人不觉得丑)，但画时序图很快，模板多，本体使用需要java支持。<a href=\"https://www.planttext.com/\" target=\"_blank\" rel=\"noopener\">plantmul在线绘图</a>：多个模板供选择。能接受画面的，还是推荐使用<br>Mermaid：功能简单，绘图较快，美观度还可以，很多Markdown编辑器都支持。<a href=\"https://mermaid-js.github.io/mermaid/#/\" target=\"_blank\" rel=\"noopener\">语法</a>，个人使用感觉功能太少(可能是插件支持不友好)</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><p><em><a href=\"https://www.runoob.com/markdown/md-advance.html\" target=\"_blank\" rel=\"noopener\">来源</a></em><br><strong>Markdown标准支持：</strong><br>流程图：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=\"flowchart-0\" class=\"flow-chart\"&gt;&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>效果：</p>\n<div id=\"flowchart-1\" class=\"flow-chart\"></div>\n\n<p>流程图(横向)：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=\"flowchart-2\" class=\"flow-chart\"&gt;&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>效果：</p>\n<div id=\"flowchart-3\" class=\"flow-chart\"></div>\nUML样例：\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=\"sequence-0\"&gt;&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>效果：</p>\n<div id=\"sequence-1\"></div>\nUML复杂样例：\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=\"sequence-2\"&gt;&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>效果：</p>\n<div id=\"sequence-3\"></div>\n\n<p><strong>Mermaid：</strong><br><a href=\"https://mermaid-js.github.io/mermaid/#/\" target=\"_blank\" rel=\"noopener\">语法</a><br>流程图：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre class=\"mermaid\"&gt;graph TD</span><br><span class=\"line\">A[方形] --&gt; B(圆角)</span><br><span class=\"line\">    B --&gt; C{条件a}</span><br><span class=\"line\">    C --&gt; |a=1| D[结果1]</span><br><span class=\"line\">    C --&gt; |a=2| E[结果2]</span><br><span class=\"line\">    F[竖向流程图]&lt;/pre&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>效果：</p>\n<pre class=\"mermaid\">graph TD\nA[方形] --&gt; B(圆角)\n    B --&gt; C{条件a}\n    C --&gt; |a=1| D[结果1]\n    C --&gt; |a=2| E[结果2]\n    F[竖向流程图]</pre>\n<p>UML样例：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre class=\"mermaid\"&gt;  sequenceDiagram</span><br><span class=\"line\">    participant 张三</span><br><span class=\"line\">    participant 李四</span><br><span class=\"line\">    张三-&gt;王五: 王五你好吗？</span><br><span class=\"line\">    loop 健康检查</span><br><span class=\"line\">        王五-&gt;王五: 与疾病战斗</span><br><span class=\"line\">    end</span><br><span class=\"line\">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class=\"line\">    李四--&gt;&gt;张三: 很好!</span><br><span class=\"line\">    王五-&gt;李四: 你怎么样?</span><br><span class=\"line\">    李四--&gt;王五: 很好!&lt;/pre&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>效果：</p>\n<pre class=\"mermaid\">  sequenceDiagram\n    participant 张三\n    participant 李四\n    张三-&gt;王五: 王五你好吗？\n    loop 健康检查\n        王五-&gt;王五: 与疾病战斗\n    end\n    Note right of 王五: 合理 食物 <br>看医生...\n    李四--&gt;&gt;张三: 很好!\n    王五-&gt;李四: 你怎么样?\n    李四--&gt;王五: 很好!</pre>\n\n<p>甘特图：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre class=\"mermaid\"&gt;      gantt</span><br><span class=\"line\">        dateFormat  YYYY-MM-DD</span><br><span class=\"line\">        title 软件开发甘特图</span><br><span class=\"line\">        section 设计</span><br><span class=\"line\">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class=\"line\">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class=\"line\">        UI设计                     :         des3, after des2, 5d</span><br><span class=\"line\">    未来任务                     :         des4, after des3, 5d</span><br><span class=\"line\">        section 开发</span><br><span class=\"line\">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class=\"line\">        设计框架                             :crit, done, after des2, 2d</span><br><span class=\"line\">        开发                                 :crit, active, 3d</span><br><span class=\"line\">        未来任务                              :crit, 5d</span><br><span class=\"line\">        耍                                   :2d</span><br><span class=\"line\">        section 测试</span><br><span class=\"line\">        功能测试                              :active, a1, after des3, 3d</span><br><span class=\"line\">        压力测试                               :after a1  , 20h</span><br><span class=\"line\">        测试报告                               : 48h&lt;/pre&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>效果：</p>\n<pre class=\"mermaid\">      gantt\n        dateFormat  YYYY-MM-DD\n        title 软件开发甘特图\n        section 设计\n        需求                      :done,    des1, 2014-01-06,2014-01-08\n        原型                      :active,  des2, 2014-01-09, 3d\n        UI设计                     :         des3, after des2, 5d\n    未来任务                     :         des4, after des3, 5d\n        section 开发\n        学习准备理解需求                      :crit, done, 2014-01-06,24h\n        设计框架                             :crit, done, after des2, 2d\n        开发                                 :crit, active, 3d\n        未来任务                              :crit, 5d\n        耍                                   :2d\n        section 测试\n        功能测试                              :active, a1, after des3, 3d\n        压力测试                               :after a1  , 20h\n        测试报告                               : 48h</pre>\n\n\n\n<h4 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h4><p>通过在文本行之间留一个空白行，可创建新段落。</p>\n<h4 id=\"忽略Markdown格式\"><a href=\"#忽略Markdown格式\" class=\"headerlink\" title=\"忽略Markdown格式\"></a>忽略Markdown格式</h4><ol>\n<li>使用代码块</li>\n<li>使用<code>\\</code></li>\n</ol>\n<h4 id=\"使用表情符号\"><a href=\"#使用表情符号\" class=\"headerlink\" title=\"使用表情符号\"></a>使用表情符号</h4><p>通过键入 <code>:EMOJICODE:</code> 可在您的写作中添加表情符号。<br>比如<code>:+1:</code> :+1:<br>hexo默认是不支持表情符号的，因此我在<a href=\"https://novnan.github.io/Hexo/emojis-for-hexo-next/\" target=\"_blank\" rel=\"noopener\">这儿</a>找到了解决方案：</p>\n<blockquote>\n<p>安装</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm install hexo-filter-github-emojis --save</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></tbody></table></figure>\n</blockquote>\n<blockquote>\n<p>打开配置文件(根目录下的<code>_config.yml</code>文件)，并增加：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; githubEmojis:</span><br><span class=\"line\">&gt;   enable: true</span><br><span class=\"line\">&gt;   className: github-emoji</span><br><span class=\"line\">&gt;   unicode: false</span><br><span class=\"line\">&gt;   styles:</span><br><span class=\"line\">&gt;   localEmojis:</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></tbody></table></figure>\n</blockquote>\n<blockquote>\n<p>GitHubEmojis更多配置参考<a href=\"https://github.com/crimx/hexo-filter-github-emojis\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n</blockquote>\n<p>更多表情符号参考<a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\" target=\"_blank\" rel=\"noopener\">emoji-cheat-sheet</a> <span class=\"github-emoji\"><span>😎</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> </p>\n<h3 id=\"可能遇到问题\"><a href=\"#可能遇到问题\" class=\"headerlink\" title=\"可能遇到问题\"></a>可能遇到问题</h3><p><strong>发布图片视频音频：</strong><br>图片发布很简单：<br>你在<code>hexo new post \"xxx\"</code>会在__posts下生成一个对应xxx.md和一个xxx文件夹。图片放在文件夹里，文章里引用：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![hello](xxx/image.jpg)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/26a7fc7cc185\" target=\"_blank\" rel=\"noopener\">视频发布</a><br><strong>github配置域名发布后被清空：</strong><br>在对应source目录下新建一个CNAME文件，只放置一行你指向的域名。例如：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tree Blog/source/ -L 1</span><br><span class=\"line\">Blog/source/</span><br><span class=\"line\">|-- categories</span><br><span class=\"line\">|-- CNAME</span><br><span class=\"line\">|-- download</span><br><span class=\"line\">|-- _posts</span><br><span class=\"line\">|-- tags</span><br><span class=\"line\">`-- uploads</span><br><span class=\"line\"># cat Blog/source/CNAME </span><br><span class=\"line\">xxx.com</span><br></pre></td></tr></tbody></table></figure>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=&gt;start: 开始框\nop=&gt;operation: 处理框\ncond=&gt;condition: 判断框(是或否?)\nsub1=&gt;subroutine: 子流程\nio=&gt;inputoutput: 输入输出框\ne=&gt;end: 结束框\nst-&gt;op-&gt;cond\ncond(yes)-&gt;io-&gt;e\ncond(no)-&gt;sub1(right)-&gt;op</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script><textarea id=\"flowchart-1-code\" style=\"display: none\">st=&gt;start: 开始框\nop=&gt;operation: 处理框\ncond=&gt;condition: 判断框(是或否?)\nsub1=&gt;subroutine: 子流程\nio=&gt;inputoutput: 输入输出框\ne=&gt;end: 结束框\nst-&gt;op-&gt;cond\ncond(yes)-&gt;io-&gt;e\ncond(no)-&gt;sub1(right)-&gt;op</textarea><textarea id=\"flowchart-1-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-1-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-1-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-1\", options);</script><textarea id=\"flowchart-2-code\" style=\"display: none\">st=&gt;start: 开始框\nop=&gt;operation: 处理框\ncond=&gt;condition: 判断框(是或否?)\nsub1=&gt;subroutine: 子流程\nio=&gt;inputoutput: 输入输出框\ne=&gt;end: 结束框\nst(right)-&gt;op(right)-&gt;cond\ncond(yes)-&gt;io(bottom)-&gt;e\ncond(no)-&gt;sub1(right)-&gt;op</textarea><textarea id=\"flowchart-2-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-2-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-2-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-2\", options);</script><textarea id=\"flowchart-3-code\" style=\"display: none\">st=&gt;start: 开始框\nop=&gt;operation: 处理框\ncond=&gt;condition: 判断框(是或否?)\nsub1=&gt;subroutine: 子流程\nio=&gt;inputoutput: 输入输出框\ne=&gt;end: 结束框\nst(right)-&gt;op(right)-&gt;cond\ncond(yes)-&gt;io(bottom)-&gt;e\ncond(no)-&gt;sub1(right)-&gt;op</textarea><textarea id=\"flowchart-3-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-3-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-3-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-3\", options);</script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\"></script><textarea id=\"sequence-0-code\" style=\"display: none\">对象A-&gt;对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B--&gt;对象A: 我很好(响应)\n对象A-&gt;对象B: 你真的好吗？</textarea><textarea id=\"sequence-0-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"sequence-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-0-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-0\", options);</script><textarea id=\"sequence-1-code\" style=\"display: none\">对象A-&gt;对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B--&gt;对象A: 我很好(响应)\n对象A-&gt;对象B: 你真的好吗？</textarea><textarea id=\"sequence-1-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"sequence-1-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-1-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-1\", options);</script><textarea id=\"sequence-2-code\" style=\"display: none\">Title: 标题：复杂使用\n对象A-&gt;对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B--&gt;对象A: 我很好(响应)\n对象B-&gt;小三: 你好吗\n小三--&gt;&gt;对象A: 对象B找我了\n对象A-&gt;对象B: 你真的好吗？\nNote over 小三,对象B: 我们是朋友\nparticipant C\nNote right of C: 没人陪我玩</textarea><textarea id=\"sequence-2-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"sequence-2-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-2-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-2\", options);</script><textarea id=\"sequence-3-code\" style=\"display: none\">Title: 标题：复杂使用\n对象A-&gt;对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B--&gt;对象A: 我很好(响应)\n对象B-&gt;小三: 你好吗\n小三--&gt;&gt;对象A: 对象B找我了\n对象A-&gt;对象B: 你真的好吗？\nNote over 小三,对象B: 我们是朋友\nparticipant C\nNote right of C: 没人陪我玩</textarea><textarea id=\"sequence-3-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"sequence-3-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-3-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-3\", options);</script>","site":{"data":{}},"excerpt":"<p>久了不更新博客，就不知道怎么搞环境了，换了环境又得查。索性自己写个简单的(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<p>可根据自己的需求进行快速定位，本文对应的发布环境是GitHub</p>\n<h3 id=\"从0-1搭建hexo网站\"><a href=\"#从0-1搭建hexo网站\" class=\"headerlink\" title=\"从0-1搭建hexo网站\"></a>从0-1搭建hexo网站</h3><p>我就不做copper了，直接上链接：<br><a href=\"https://godweiyang.com/2018/04/13/hexo-blog/\" target=\"_blank\" rel=\"noopener\">超详细Hexo+Github博客搭建小白教程</a><br><a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">hexo主题next</a>（我自己用的）<br><a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">hexo主题推荐</a><br><a href=\"https://www.jianshu.com/p/3ff20be8574c\" target=\"_blank\" rel=\"noopener\">hexo主题美化1</a><br><a href=\"https://blog.csdn.net/nightmare_dimple/article/details/86661502\" target=\"_blank\" rel=\"noopener\">hexo主题美化2</a><br><a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">评论系统</a></p>\n<h3 id=\"已有博客，环境迁移\"><a href=\"#已有博客，环境迁移\" class=\"headerlink\" title=\"已有博客，环境迁移\"></a>已有博客，环境迁移</h3><p>主要是相应环境安装：</p>\n<ol>\n<li><p>node.js <a href=\"https://nodejs.org/zh-cn/download/releases/\" target=\"_blank\" rel=\"noopener\">官方下载</a>, 我这里选择的是12.x的版本。<br>windows直接点安装<br>Linux下载解压后，配置路径<code>export PATH=$PATH:xxxx/node-v14.10.0-linux-x64/bin</code></p>\n</li>\n<li><p>git安装<br>windows直接点安装<br>Liunx <code>sudo yum install git</code>或<code>sudo apt install git</code></p>\n</li>\n<li><p>安装hexo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-cli -g</span><br><span class=\"line\"></span><br><span class=\"line\"> #配置git扩展，在你自己的博客里肯定已经配置了项目地址关联</span><br><span class=\"line\">npm i hexo-deployer-git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可能有必要<br>如果项目里没有node_modules文件夹，需要到博客根目录重新安装一波：<code>npm install</code></p>\n</li>\n</ol>\n<h3 id=\"已有环境，新发文\"><a href=\"#已有环境，新发文\" class=\"headerlink\" title=\"已有环境，新发文\"></a>已有环境，新发文</h3><p>发文常用命令(通常都是顺序执行)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建文章</span><br><span class=\"line\">hexo new post &quot;article title&quot;</span><br><span class=\"line\"># 生成博客网页文件</span><br><span class=\"line\">hexo g  </span><br><span class=\"line\"># 本地预览博客</span><br><span class=\"line\">hexo s  </span><br><span class=\"line\">hexo s -i 0.0.0.0 -p 8080 #指定监听地址端口</span><br><span class=\"line\"># 上传网页文件到github</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>博客源码备份：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">git add -u</span><br><span class=\"line\">git commit -m &quot;new post&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常用Markdown语法\"><a href=\"#常用Markdown语法\" class=\"headerlink\" title=\"常用Markdown语法\"></a>常用Markdown语法</h3><p>主要针对GitHub，参考<a href=\"https://docs.github.com/cn/free-pro-team@latest/github/writing-on-github/basic-writing-and-formatting-syntax\" target=\"_blank\" rel=\"noopener\">官方文档</a><br><em>注意语法中的空格</em></p>\n<h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 最大标题</span><br><span class=\"line\">## 第二大标题</span><br><span class=\"line\">###### 最小标题</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样式文本\"><a href=\"#样式文本\" class=\"headerlink\" title=\"样式文本\"></a>样式文本</h4><table>\n<thead>\n<tr>\n<th>样式</th>\n<th>语法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>粗体</td>\n<td>** ** 或 __ __</td>\n</tr>\n<tr>\n<td>斜体</td>\n<td>* * 或 _ _</td>\n</tr>\n<tr>\n<td>删除线</td>\n<td>~~ ~~</td>\n</tr>\n<tr>\n<td>粗体和嵌入的斜体</td>\n<td>** ** 和 _ _</td>\n</tr>\n<tr>\n<td>全部粗体和斜体</td>\n<td><strong>* *</strong></td>\n</tr>\n</tbody></table>\n<h4 id=\"引用文本\"><a href=\"#引用文本\" class=\"headerlink\" title=\"引用文本\"></a>引用文本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 引用的文本</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"引用代码\"><a href=\"#引用代码\" class=\"headerlink\" title=\"引用代码\"></a>引用代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`单行代码引用`</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```json(代码类型)</span><br><span class=\"line\"> 多行代码引用</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<p>如果想在代码块中显示```, 只需要外层的` 比内层的多即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```` 代码块标识</span><br><span class=\"line\">```json</span><br><span class=\"line\">显示的代码</span><br><span class=\"line\">```</span><br><span class=\"line\">````</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[普通链接](https://jihanhuang.github.io/)</span><br><span class=\"line\">![图片链接](./技术札记/ssh免密登录原理.png)</span><br><span class=\"line\">[下载链接](./《mysql必知必会》读书笔记/mysql_scripts.zip)</span><br><span class=\"line\">[文章导航链接](#已有博客环境迁移)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. James Madison</span><br><span class=\"line\">2. James Monroe</span><br><span class=\"line\">3. John Quincy Adams</span><br></pre></td></tr></table></figure>\n\n<p><code>*</code>或<code>-</code>都可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- George Washington</span><br><span class=\"line\">- John Adams</span><br><span class=\"line\">- Thomas Jefferson</span><br></pre></td></tr></table></figure>\n\n<p>嵌套(子列表的<code>-</code>需在父列表的第一个字下)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 第一个列表项</span><br><span class=\"line\">   -  第一个嵌套列表项</span><br><span class=\"line\">     - 第二个嵌套列表项</span><br></pre></td></tr></table></figure>\n\n<p>任务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [x] 完成更改</span><br><span class=\"line\">- [ ] 推送提交到 GitHub</span><br><span class=\"line\">- [ ] 打开拉取请求</span><br><span class=\"line\">- [ ] \\(Optional) 规避[]后的()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|列标题\t|列标题|</span><br><span class=\"line\">|---|---|</span><br><span class=\"line\">|数据11|\t数据21 &lt;br&gt; br表示换行\t|</span><br><span class=\"line\">|数据12|\t数据22\t|</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"绘图\"><a href=\"#绘图\" class=\"headerlink\" title=\"绘图\"></a>绘图</h4><p>hexo自身都不支持Markdown标准绘图和Mermaid。需要进行配置：<br>执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-filter-mermaid-diagrams</span><br><span class=\"line\">npm install --save hexo-filter-sequence</span><br><span class=\"line\">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>\n\n<p>Mermaid配置可以阅读：<a href=\"https://tyloafer.github.io/posts/7790/\" target=\"_blank\" rel=\"noopener\">Hexo中引入Mermaid流程图</a>，引用部分如下：</p>\n<blockquote>\n<p>Mermaid还需要进行配置(根目录下_config.yml)，增加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; # mermaid chart</span><br><span class=\"line\">&gt; mermaid: ## mermaid url https://github.com/knsv/mermaid</span><br><span class=\"line\">&gt;   enable: true  # default true</span><br><span class=\"line\">&gt;   version: &quot;7.1.2&quot; # default v7.1.2</span><br><span class=\"line\">&gt;   options:  # find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span><br><span class=\"line\">&gt;     #startOnload: true  // default true</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>以及修改js，我这里使用的是<code>next</code>主题。在文件<code>themes/next/layout/_partials/footer.swig</code>后&gt;加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; &#123;% if (theme.mermaid.enable)  %&#125;</span><br><span class=\"line\">&gt;   &lt;script src=&apos;https://unpkg.com/mermaid@&#123;&#123; theme.mermaid.version &#125;&#125;/dist/mermaid.min.js&apos;&gt;&lt;/script&gt;</span><br><span class=\"line\">&gt;   &lt;script&gt;</span><br><span class=\"line\">&gt;     if (window.mermaid) &#123;</span><br><span class=\"line\">&gt;       mermaid.initialize(&#123;theme: &apos;forest&apos;&#125;);</span><br><span class=\"line\">&gt;     &#125;</span><br><span class=\"line\">&gt;   &lt;/script&gt;</span><br><span class=\"line\">&gt; &#123;% endif %&#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>语法绘图：<br>graphviz：较为复杂，特别是时序图，但功能强大。<a href=\"https://sketchviz.com/new\" target=\"_blank\" rel=\"noopener\">graphviz在线绘图</a>，<a href=\"https://onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/#1-%E7%AE%80%E4%BB%8B\" target=\"_blank\" rel=\"noopener\">graphviz dot语法总结</a><br>plantuml：绘图风格单一(个人不觉得丑)，但画时序图很快，模板多，本体使用需要java支持。<a href=\"https://www.planttext.com/\" target=\"_blank\" rel=\"noopener\">plantmul在线绘图</a>：多个模板供选择。能接受画面的，还是推荐使用<br>Mermaid：功能简单，绘图较快，美观度还可以，很多Markdown编辑器都支持。<a href=\"https://mermaid-js.github.io/mermaid/#/\" target=\"_blank\" rel=\"noopener\">语法</a>，个人使用感觉功能太少(可能是插件支持不友好)</p>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><p><em><a href=\"https://www.runoob.com/markdown/md-advance.html\" target=\"_blank\" rel=\"noopener\">来源</a></em><br><strong>Markdown标准支持：</strong><br>流程图：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;flowchart-0&quot; class=&quot;flow-chart&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<div id=\"flowchart-1\" class=\"flow-chart\"></div>\n\n<p>流程图(横向)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;flowchart-2&quot; class=&quot;flow-chart&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<div id=\"flowchart-3\" class=\"flow-chart\"></div>\nUML样例：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;sequence-0&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<div id=\"sequence-1\"></div>\nUML复杂样例：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;sequence-2&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<div id=\"sequence-3\"></div>\n\n<p><strong>Mermaid：</strong><br><a href=\"https://mermaid-js.github.io/mermaid/#/\" target=\"_blank\" rel=\"noopener\">语法</a><br>流程图：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre class=&quot;mermaid&quot;&gt;graph TD</span><br><span class=\"line\">A[方形] --&gt; B(圆角)</span><br><span class=\"line\">    B --&gt; C&#123;条件a&#125;</span><br><span class=\"line\">    C --&gt; |a=1| D[结果1]</span><br><span class=\"line\">    C --&gt; |a=2| E[结果2]</span><br><span class=\"line\">    F[竖向流程图]&lt;/pre&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<pre class=\"mermaid\">graph TD\nA[方形] --> B(圆角)\n    B --> C{条件a}\n    C --> |a=1| D[结果1]\n    C --> |a=2| E[结果2]\n    F[竖向流程图]</pre>\n<p>UML样例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre class=&quot;mermaid&quot;&gt;  sequenceDiagram</span><br><span class=\"line\">    participant 张三</span><br><span class=\"line\">    participant 李四</span><br><span class=\"line\">    张三-&gt;王五: 王五你好吗？</span><br><span class=\"line\">    loop 健康检查</span><br><span class=\"line\">        王五-&gt;王五: 与疾病战斗</span><br><span class=\"line\">    end</span><br><span class=\"line\">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class=\"line\">    李四--&gt;&gt;张三: 很好!</span><br><span class=\"line\">    王五-&gt;李四: 你怎么样?</span><br><span class=\"line\">    李四--&gt;王五: 很好!&lt;/pre&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<pre class=\"mermaid\">  sequenceDiagram\n    participant 张三\n    participant 李四\n    张三->王五: 王五你好吗？\n    loop 健康检查\n        王五->王五: 与疾病战斗\n    end\n    Note right of 王五: 合理 食物 <br>看医生...\n    李四-->>张三: 很好!\n    王五->李四: 你怎么样?\n    李四-->王五: 很好!</pre>\n\n<p>甘特图：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;pre class=&quot;mermaid&quot;&gt;      gantt</span><br><span class=\"line\">        dateFormat  YYYY-MM-DD</span><br><span class=\"line\">        title 软件开发甘特图</span><br><span class=\"line\">        section 设计</span><br><span class=\"line\">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class=\"line\">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class=\"line\">        UI设计                     :         des3, after des2, 5d</span><br><span class=\"line\">    未来任务                     :         des4, after des3, 5d</span><br><span class=\"line\">        section 开发</span><br><span class=\"line\">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class=\"line\">        设计框架                             :crit, done, after des2, 2d</span><br><span class=\"line\">        开发                                 :crit, active, 3d</span><br><span class=\"line\">        未来任务                              :crit, 5d</span><br><span class=\"line\">        耍                                   :2d</span><br><span class=\"line\">        section 测试</span><br><span class=\"line\">        功能测试                              :active, a1, after des3, 3d</span><br><span class=\"line\">        压力测试                               :after a1  , 20h</span><br><span class=\"line\">        测试报告                               : 48h&lt;/pre&gt;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<pre class=\"mermaid\">      gantt\n        dateFormat  YYYY-MM-DD\n        title 软件开发甘特图\n        section 设计\n        需求                      :done,    des1, 2014-01-06,2014-01-08\n        原型                      :active,  des2, 2014-01-09, 3d\n        UI设计                     :         des3, after des2, 5d\n    未来任务                     :         des4, after des3, 5d\n        section 开发\n        学习准备理解需求                      :crit, done, 2014-01-06,24h\n        设计框架                             :crit, done, after des2, 2d\n        开发                                 :crit, active, 3d\n        未来任务                              :crit, 5d\n        耍                                   :2d\n        section 测试\n        功能测试                              :active, a1, after des3, 3d\n        压力测试                               :after a1  , 20h\n        测试报告                               : 48h</pre>\n\n\n\n<h4 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h4><p>通过在文本行之间留一个空白行，可创建新段落。</p>\n<h4 id=\"忽略Markdown格式\"><a href=\"#忽略Markdown格式\" class=\"headerlink\" title=\"忽略Markdown格式\"></a>忽略Markdown格式</h4><ol>\n<li>使用代码块</li>\n<li>使用<code>\\</code></li>\n</ol>\n<h4 id=\"使用表情符号\"><a href=\"#使用表情符号\" class=\"headerlink\" title=\"使用表情符号\"></a>使用表情符号</h4><p>通过键入 <code>:EMOJICODE:</code> 可在您的写作中添加表情符号。<br>比如<code>:+1:</code> :+1:<br>hexo默认是不支持表情符号的，因此我在<a href=\"https://novnan.github.io/Hexo/emojis-for-hexo-next/\" target=\"_blank\" rel=\"noopener\">这儿</a>找到了解决方案：</p>\n<blockquote>\n<p>安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; npm install hexo-filter-github-emojis --save</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>打开配置文件(根目录下的<code>_config.yml</code>文件)，并增加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; githubEmojis:</span><br><span class=\"line\">&gt;   enable: true</span><br><span class=\"line\">&gt;   className: github-emoji</span><br><span class=\"line\">&gt;   unicode: false</span><br><span class=\"line\">&gt;   styles:</span><br><span class=\"line\">&gt;   localEmojis:</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>GitHubEmojis更多配置参考<a href=\"https://github.com/crimx/hexo-filter-github-emojis\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n</blockquote>\n<p>更多表情符号参考<a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\" target=\"_blank\" rel=\"noopener\">emoji-cheat-sheet</a> :sunglasses: </p>\n<h3 id=\"可能遇到问题\"><a href=\"#可能遇到问题\" class=\"headerlink\" title=\"可能遇到问题\"></a>可能遇到问题</h3><p><strong>发布图片视频音频：</strong><br>图片发布很简单：<br>你在<code>hexo new post &quot;xxx&quot;</code>会在__posts下生成一个对应xxx.md和一个xxx文件夹。图片放在文件夹里，文章里引用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![hello](xxx/image.jpg)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.jianshu.com/p/26a7fc7cc185\" target=\"_blank\" rel=\"noopener\">视频发布</a><br><strong>github配置域名发布后被清空：</strong><br>在对应source目录下新建一个CNAME文件，只放置一行你指向的域名。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tree Blog/source/ -L 1</span><br><span class=\"line\">Blog/source/</span><br><span class=\"line\">|-- categories</span><br><span class=\"line\">|-- CNAME</span><br><span class=\"line\">|-- download</span><br><span class=\"line\">|-- _posts</span><br><span class=\"line\">|-- tags</span><br><span class=\"line\">`-- uploads</span><br><span class=\"line\"># cat Blog/source/CNAME </span><br><span class=\"line\">xxx.com</span><br></pre></td></tr></table></figure>\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"></script><textarea id=\"flowchart-0-code\" style=\"display: none\">st=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst->op->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op</textarea><textarea id=\"flowchart-0-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-0\", options);</script><textarea id=\"flowchart-1-code\" style=\"display: none\">st=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst->op->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op</textarea><textarea id=\"flowchart-1-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-1-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-1-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-1\", options);</script><textarea id=\"flowchart-2-code\" style=\"display: none\">st=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst(right)->op(right)->cond\ncond(yes)->io(bottom)->e\ncond(no)->sub1(right)->op</textarea><textarea id=\"flowchart-2-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-2-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-2-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-2\", options);</script><textarea id=\"flowchart-3-code\" style=\"display: none\">st=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst(right)->op(right)->cond\ncond(yes)->io(bottom)->e\ncond(no)->sub1(right)->op</textarea><textarea id=\"flowchart-3-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"flowchart-3-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-3-options\").value));  var diagram = flowchart.parse(code);  diagram.drawSVG(\"flowchart-3\", options);</script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\"></script><textarea id=\"sequence-0-code\" style=\"display: none\">对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象A->对象B: 你真的好吗？</textarea><textarea id=\"sequence-0-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"sequence-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-0-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-0\", options);</script><textarea id=\"sequence-1-code\" style=\"display: none\">对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象A->对象B: 你真的好吗？</textarea><textarea id=\"sequence-1-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"sequence-1-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-1-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-1\", options);</script><textarea id=\"sequence-2-code\" style=\"display: none\">Title: 标题：复杂使用\n对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象B->小三: 你好吗\n小三-->>对象A: 对象B找我了\n对象A->对象B: 你真的好吗？\nNote over 小三,对象B: 我们是朋友\nparticipant C\nNote right of C: 没人陪我玩</textarea><textarea id=\"sequence-2-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"sequence-2-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-2-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-2\", options);</script><textarea id=\"sequence-3-code\" style=\"display: none\">Title: 标题：复杂使用\n对象A->对象B: 对象B你好吗?（请求）\nNote right of 对象B: 对象B的描述\nNote left of 对象A: 对象A的描述(提示)\n对象B-->对象A: 我很好(响应)\n对象B->小三: 你好吗\n小三-->>对象A: 对象B找我了\n对象A->对象B: 你真的好吗？\nNote over 小三,对象B: 我们是朋友\nparticipant C\nNote right of C: 没人陪我玩</textarea><textarea id=\"sequence-3-options\" style=\"display: none\">{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12}</textarea><script>  var code = document.getElementById(\"sequence-3-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-3-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-3\", options);</script>"},{"title":"ipset消息通信","date":"2020-05-18T07:45:31.000Z","_content":"\n这里列出了一些ipset消息通信的格式，并且附加了ipset命令的debug版本。(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n\n*先看之前的{% post_link libipset源码分析 %}*\n\n<!-- more -->\n\n源码分析里讲解了ipset的通信机制，这里主要是列出一些示例。也就是ipset通信时的消息体部分。再挂一下这张图：\n![netlink数据结构之间的关系](ipset消息通信/netlink数据关系.png)\n*[图片来源](https://blog.csdn.net/zhao_h/article/details/80943226)*\n\n**示例**\n尝试运行命令`ipset list test_net`得到：\n``` shell\n[root@localhost jihan]# ./ipset list test_net\nName: test_net\nType: hash:net\nRevision: 1\nHeader: family inet hashsize 1024 maxelem 65536\nSize in memory: 16816\nReferences: 0\nMembers:\n1.1.2.0/31\n```\n*当然test_net是我之前就添加好了的。这里只是举例，是个ipset正确命令就行。*\n这里显示的就是正常ipset命令下的运行结果，我编译了一个ipset的[debug版本](/download/ipset_DD)(对应源码libipset7.6)，并且加了一些打印，可以得到一下信息：\n```\nMessage header: received cmd  LIST (7)\n\tlen 140\n\tflag EXIST\n\tseq 1589773040\n\tCommand attributes:\n\tPROTOCOL: 6\n\tSETNAME: test_net\n\tTYPENAME: hash:net\n\tREVISION: 1\n\tFAMILY: 2\n\t\tCREATE attributes:\n\t\tHASHSIZE: 1024\n\t\tMAXELEM: 65536\n\t\tREFERENCES: 0\n\t\tMEMSIZE: 16816\n\t\tADT attributes:\n\t\tIP: 1.1.2.0\n\t\tCIDR: 31\nRecv hdr:\n0x8c 0x00 0x00 0x00 0x07 0x06 0x02 0x00 0xf0 0x02 0xc2 0x5e 0xe5 0x2b 0x01 0x00 \nRecv msg:\n0x02 0x00 0x00 0x00 //ex header\n0x05 0x00 0x01 0x00 0x06 0x00 0x00 0x00  //PROTOCOL\n0x0d 0x00 0x02 0x00 0x74 0x65 0x73 0x74 0x5f 0x6e 0x65 0x74 0x00 0x00 0x00 0x00 //SETNAME\n0x0d 0x00 0x03 0x00 0x68 0x61 0x73 0x68 0x3a 0x6e 0x65 0x74 0x00 0x00 0x00 0x00 //TYPENAME\n0x05 0x00 0x05 0x00 0x02 0x00 0x00 0x00 //FAMILY\n0x05 0x00 0x04 0x00 0x01 0x00 0x00 0x00 //REVISION\n0x24 0x00 0x07 0x80 //DATA\n\t0x08 0x00 0x12 0x40 0x00 0x00 0x04 0x00 \n\t0x08 0x00 0x13 0x40 0x00 0x01 0x00 0x00 \n\t0x08 0x00 0x19 0x40 0x00 0x00 0x00 0x00 \n\t0x08 0x00 0x1a 0x40 0x00 0x00 0x41 0xb0 \n0x1c 0x00 0x08 0x80 //ADT\n\t0x18 0x00 0x07 0x80 //DATA\n\t\t0x0c 0x00 0x01 0x80 //IP\n\t\t\t0x08 0x00 0x01 0x00 0x01 0x01 0x02 0x00 //1.1.2.0\n\t\t0x05 0x00 0x03 0x00 0x1f 0x00 0x00 0x00 //CIDR\n```\n其中单个属性的组成模式类似tlv结构({% post_link TLV数据传输协议及简单实现-C %})，不过这里是ltv结构。比如`0x05 0x00 0x01 0x00 0x06 0x00 0x00 0x00`中`0x05 0x00`是指长度为5，`0x01 0x00`是标志PROTOCOL(源码里有映射表)，后面的就是值了，这里的实际传输长度为8，是因为进行了对齐操作。\n\n如果你需要进行其他ipset通信的分析，执行上面提到的ipset的debug版本对应命令，进行解析即可。","source":"_posts/ipset消息通信.md","raw":"---\ntitle: ipset消息通信\ndate: 2020-05-18 15:45:31\ncategories: 技术杂谈\ntags: [IPSET]\n---\n\n这里列出了一些ipset消息通信的格式，并且附加了ipset命令的debug版本。(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n\n*先看之前的{% post_link libipset源码分析 %}*\n\n<!-- more -->\n\n源码分析里讲解了ipset的通信机制，这里主要是列出一些示例。也就是ipset通信时的消息体部分。再挂一下这张图：\n![netlink数据结构之间的关系](ipset消息通信/netlink数据关系.png)\n*[图片来源](https://blog.csdn.net/zhao_h/article/details/80943226)*\n\n**示例**\n尝试运行命令`ipset list test_net`得到：\n``` shell\n[root@localhost jihan]# ./ipset list test_net\nName: test_net\nType: hash:net\nRevision: 1\nHeader: family inet hashsize 1024 maxelem 65536\nSize in memory: 16816\nReferences: 0\nMembers:\n1.1.2.0/31\n```\n*当然test_net是我之前就添加好了的。这里只是举例，是个ipset正确命令就行。*\n这里显示的就是正常ipset命令下的运行结果，我编译了一个ipset的[debug版本](/download/ipset_DD)(对应源码libipset7.6)，并且加了一些打印，可以得到一下信息：\n```\nMessage header: received cmd  LIST (7)\n\tlen 140\n\tflag EXIST\n\tseq 1589773040\n\tCommand attributes:\n\tPROTOCOL: 6\n\tSETNAME: test_net\n\tTYPENAME: hash:net\n\tREVISION: 1\n\tFAMILY: 2\n\t\tCREATE attributes:\n\t\tHASHSIZE: 1024\n\t\tMAXELEM: 65536\n\t\tREFERENCES: 0\n\t\tMEMSIZE: 16816\n\t\tADT attributes:\n\t\tIP: 1.1.2.0\n\t\tCIDR: 31\nRecv hdr:\n0x8c 0x00 0x00 0x00 0x07 0x06 0x02 0x00 0xf0 0x02 0xc2 0x5e 0xe5 0x2b 0x01 0x00 \nRecv msg:\n0x02 0x00 0x00 0x00 //ex header\n0x05 0x00 0x01 0x00 0x06 0x00 0x00 0x00  //PROTOCOL\n0x0d 0x00 0x02 0x00 0x74 0x65 0x73 0x74 0x5f 0x6e 0x65 0x74 0x00 0x00 0x00 0x00 //SETNAME\n0x0d 0x00 0x03 0x00 0x68 0x61 0x73 0x68 0x3a 0x6e 0x65 0x74 0x00 0x00 0x00 0x00 //TYPENAME\n0x05 0x00 0x05 0x00 0x02 0x00 0x00 0x00 //FAMILY\n0x05 0x00 0x04 0x00 0x01 0x00 0x00 0x00 //REVISION\n0x24 0x00 0x07 0x80 //DATA\n\t0x08 0x00 0x12 0x40 0x00 0x00 0x04 0x00 \n\t0x08 0x00 0x13 0x40 0x00 0x01 0x00 0x00 \n\t0x08 0x00 0x19 0x40 0x00 0x00 0x00 0x00 \n\t0x08 0x00 0x1a 0x40 0x00 0x00 0x41 0xb0 \n0x1c 0x00 0x08 0x80 //ADT\n\t0x18 0x00 0x07 0x80 //DATA\n\t\t0x0c 0x00 0x01 0x80 //IP\n\t\t\t0x08 0x00 0x01 0x00 0x01 0x01 0x02 0x00 //1.1.2.0\n\t\t0x05 0x00 0x03 0x00 0x1f 0x00 0x00 0x00 //CIDR\n```\n其中单个属性的组成模式类似tlv结构({% post_link TLV数据传输协议及简单实现-C %})，不过这里是ltv结构。比如`0x05 0x00 0x01 0x00 0x06 0x00 0x00 0x00`中`0x05 0x00`是指长度为5，`0x01 0x00`是标志PROTOCOL(源码里有映射表)，后面的就是值了，这里的实际传输长度为8，是因为进行了对齐操作。\n\n如果你需要进行其他ipset通信的分析，执行上面提到的ipset的debug版本对应命令，进行解析即可。","slug":"ipset消息通信","published":1,"updated":"2020-09-14T03:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insl000jh9uod1xwydim","content":"<p>这里列出了一些ipset消息通信的格式，并且附加了ipset命令的debug版本。(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em>先看之前的<a href=\"/2020/05/06/libipset源码分析/\" title=\"libipset源码分析\">libipset源码分析</a></em></p>\n<a id=\"more\"></a>\n\n<p>源码分析里讲解了ipset的通信机制，这里主要是列出一些示例。也就是ipset通信时的消息体部分。再挂一下这张图：<br><img src=\"/2020/05/18/ipset消息通信/netlink%E6%95%B0%E6%8D%AE%E5%85%B3%E7%B3%BB.png\" alt=\"netlink数据结构之间的关系\"><br><em><a href=\"https://blog.csdn.net/zhao_h/article/details/80943226\" target=\"_blank\" rel=\"noopener\">图片来源</a></em></p>\n<p><strong>示例</strong><br>尝试运行命令<code>ipset list test_net</code>得到：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost jihan]# ./ipset list test_net</span><br><span class=\"line\">Name: test_net</span><br><span class=\"line\">Type: hash:net</span><br><span class=\"line\">Revision: 1</span><br><span class=\"line\">Header: family inet hashsize 1024 maxelem 65536</span><br><span class=\"line\">Size in memory: 16816</span><br><span class=\"line\">References: 0</span><br><span class=\"line\">Members:</span><br><span class=\"line\">1.1.2.0/31</span><br></pre></td></tr></tbody></table></figure>\n\n<p><em>当然test_net是我之前就添加好了的。这里只是举例，是个ipset正确命令就行。</em><br>这里显示的就是正常ipset命令下的运行结果，我编译了一个ipset的<a href=\"/download/ipset_DD\">debug版本</a>(对应源码libipset7.6)，并且加了一些打印，可以得到一下信息：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Message header: received cmd  LIST (7)</span><br><span class=\"line\">\tlen 140</span><br><span class=\"line\">\tflag EXIST</span><br><span class=\"line\">\tseq 1589773040</span><br><span class=\"line\">\tCommand attributes:</span><br><span class=\"line\">\tPROTOCOL: 6</span><br><span class=\"line\">\tSETNAME: test_net</span><br><span class=\"line\">\tTYPENAME: hash:net</span><br><span class=\"line\">\tREVISION: 1</span><br><span class=\"line\">\tFAMILY: 2</span><br><span class=\"line\">\t\tCREATE attributes:</span><br><span class=\"line\">\t\tHASHSIZE: 1024</span><br><span class=\"line\">\t\tMAXELEM: 65536</span><br><span class=\"line\">\t\tREFERENCES: 0</span><br><span class=\"line\">\t\tMEMSIZE: 16816</span><br><span class=\"line\">\t\tADT attributes:</span><br><span class=\"line\">\t\tIP: 1.1.2.0</span><br><span class=\"line\">\t\tCIDR: 31</span><br><span class=\"line\">Recv hdr:</span><br><span class=\"line\">0x8c 0x00 0x00 0x00 0x07 0x06 0x02 0x00 0xf0 0x02 0xc2 0x5e 0xe5 0x2b 0x01 0x00 </span><br><span class=\"line\">Recv msg:</span><br><span class=\"line\">0x02 0x00 0x00 0x00 //ex header</span><br><span class=\"line\">0x05 0x00 0x01 0x00 0x06 0x00 0x00 0x00  //PROTOCOL</span><br><span class=\"line\">0x0d 0x00 0x02 0x00 0x74 0x65 0x73 0x74 0x5f 0x6e 0x65 0x74 0x00 0x00 0x00 0x00 //SETNAME</span><br><span class=\"line\">0x0d 0x00 0x03 0x00 0x68 0x61 0x73 0x68 0x3a 0x6e 0x65 0x74 0x00 0x00 0x00 0x00 //TYPENAME</span><br><span class=\"line\">0x05 0x00 0x05 0x00 0x02 0x00 0x00 0x00 //FAMILY</span><br><span class=\"line\">0x05 0x00 0x04 0x00 0x01 0x00 0x00 0x00 //REVISION</span><br><span class=\"line\">0x24 0x00 0x07 0x80 //DATA</span><br><span class=\"line\">\t0x08 0x00 0x12 0x40 0x00 0x00 0x04 0x00 </span><br><span class=\"line\">\t0x08 0x00 0x13 0x40 0x00 0x01 0x00 0x00 </span><br><span class=\"line\">\t0x08 0x00 0x19 0x40 0x00 0x00 0x00 0x00 </span><br><span class=\"line\">\t0x08 0x00 0x1a 0x40 0x00 0x00 0x41 0xb0 </span><br><span class=\"line\">0x1c 0x00 0x08 0x80 //ADT</span><br><span class=\"line\">\t0x18 0x00 0x07 0x80 //DATA</span><br><span class=\"line\">\t\t0x0c 0x00 0x01 0x80 //IP</span><br><span class=\"line\">\t\t\t0x08 0x00 0x01 0x00 0x01 0x01 0x02 0x00 //1.1.2.0</span><br><span class=\"line\">\t\t0x05 0x00 0x03 0x00 0x1f 0x00 0x00 0x00 //CIDR</span><br></pre></td></tr></tbody></table></figure>\n\n<p>其中单个属性的组成模式类似tlv结构(<a href=\"/2019/08/27/TLV数据传输协议及简单实现-C/\" title=\"TLV数据传输协议及简单实现(C)\">TLV数据传输协议及简单实现(C)</a>)，不过这里是ltv结构。比如<code>0x05 0x00 0x01 0x00 0x06 0x00 0x00 0x00</code>中<code>0x05 0x00</code>是指长度为5，<code>0x01 0x00</code>是标志PROTOCOL(源码里有映射表)，后面的就是值了，这里的实际传输长度为8，是因为进行了对齐操作。</p>\n<p>如果你需要进行其他ipset通信的分析，执行上面提到的ipset的debug版本对应命令，进行解析即可。</p>\n","site":{"data":{}},"excerpt":"<p>这里列出了一些ipset消息通信的格式，并且附加了ipset命令的debug版本。(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em>先看之前的<a href=\"/2020/05/06/libipset源码分析/\" title=\"libipset源码分析\">libipset源码分析</a></em></p>","more":"<p>源码分析里讲解了ipset的通信机制，这里主要是列出一些示例。也就是ipset通信时的消息体部分。再挂一下这张图：<br><img src=\"/2020/05/18/ipset消息通信/netlink%E6%95%B0%E6%8D%AE%E5%85%B3%E7%B3%BB.png\" alt=\"netlink数据结构之间的关系\"><br><em><a href=\"https://blog.csdn.net/zhao_h/article/details/80943226\" target=\"_blank\" rel=\"noopener\">图片来源</a></em></p>\n<p><strong>示例</strong><br>尝试运行命令<code>ipset list test_net</code>得到：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost jihan]# ./ipset list test_net</span><br><span class=\"line\">Name: test_net</span><br><span class=\"line\">Type: hash:net</span><br><span class=\"line\">Revision: 1</span><br><span class=\"line\">Header: family inet hashsize 1024 maxelem 65536</span><br><span class=\"line\">Size in memory: 16816</span><br><span class=\"line\">References: 0</span><br><span class=\"line\">Members:</span><br><span class=\"line\">1.1.2.0/31</span><br></pre></td></tr></table></figure>\n\n<p><em>当然test_net是我之前就添加好了的。这里只是举例，是个ipset正确命令就行。</em><br>这里显示的就是正常ipset命令下的运行结果，我编译了一个ipset的<a href=\"/download/ipset_DD\">debug版本</a>(对应源码libipset7.6)，并且加了一些打印，可以得到一下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Message header: received cmd  LIST (7)</span><br><span class=\"line\">\tlen 140</span><br><span class=\"line\">\tflag EXIST</span><br><span class=\"line\">\tseq 1589773040</span><br><span class=\"line\">\tCommand attributes:</span><br><span class=\"line\">\tPROTOCOL: 6</span><br><span class=\"line\">\tSETNAME: test_net</span><br><span class=\"line\">\tTYPENAME: hash:net</span><br><span class=\"line\">\tREVISION: 1</span><br><span class=\"line\">\tFAMILY: 2</span><br><span class=\"line\">\t\tCREATE attributes:</span><br><span class=\"line\">\t\tHASHSIZE: 1024</span><br><span class=\"line\">\t\tMAXELEM: 65536</span><br><span class=\"line\">\t\tREFERENCES: 0</span><br><span class=\"line\">\t\tMEMSIZE: 16816</span><br><span class=\"line\">\t\tADT attributes:</span><br><span class=\"line\">\t\tIP: 1.1.2.0</span><br><span class=\"line\">\t\tCIDR: 31</span><br><span class=\"line\">Recv hdr:</span><br><span class=\"line\">0x8c 0x00 0x00 0x00 0x07 0x06 0x02 0x00 0xf0 0x02 0xc2 0x5e 0xe5 0x2b 0x01 0x00 </span><br><span class=\"line\">Recv msg:</span><br><span class=\"line\">0x02 0x00 0x00 0x00 //ex header</span><br><span class=\"line\">0x05 0x00 0x01 0x00 0x06 0x00 0x00 0x00  //PROTOCOL</span><br><span class=\"line\">0x0d 0x00 0x02 0x00 0x74 0x65 0x73 0x74 0x5f 0x6e 0x65 0x74 0x00 0x00 0x00 0x00 //SETNAME</span><br><span class=\"line\">0x0d 0x00 0x03 0x00 0x68 0x61 0x73 0x68 0x3a 0x6e 0x65 0x74 0x00 0x00 0x00 0x00 //TYPENAME</span><br><span class=\"line\">0x05 0x00 0x05 0x00 0x02 0x00 0x00 0x00 //FAMILY</span><br><span class=\"line\">0x05 0x00 0x04 0x00 0x01 0x00 0x00 0x00 //REVISION</span><br><span class=\"line\">0x24 0x00 0x07 0x80 //DATA</span><br><span class=\"line\">\t0x08 0x00 0x12 0x40 0x00 0x00 0x04 0x00 </span><br><span class=\"line\">\t0x08 0x00 0x13 0x40 0x00 0x01 0x00 0x00 </span><br><span class=\"line\">\t0x08 0x00 0x19 0x40 0x00 0x00 0x00 0x00 </span><br><span class=\"line\">\t0x08 0x00 0x1a 0x40 0x00 0x00 0x41 0xb0 </span><br><span class=\"line\">0x1c 0x00 0x08 0x80 //ADT</span><br><span class=\"line\">\t0x18 0x00 0x07 0x80 //DATA</span><br><span class=\"line\">\t\t0x0c 0x00 0x01 0x80 //IP</span><br><span class=\"line\">\t\t\t0x08 0x00 0x01 0x00 0x01 0x01 0x02 0x00 //1.1.2.0</span><br><span class=\"line\">\t\t0x05 0x00 0x03 0x00 0x1f 0x00 0x00 0x00 //CIDR</span><br></pre></td></tr></table></figure>\n\n<p>其中单个属性的组成模式类似tlv结构(<a href=\"/2019/08/27/TLV数据传输协议及简单实现-C/\" title=\"TLV数据传输协议及简单实现(C)\">TLV数据传输协议及简单实现(C)</a>)，不过这里是ltv结构。比如<code>0x05 0x00 0x01 0x00 0x06 0x00 0x00 0x00</code>中<code>0x05 0x00</code>是指长度为5，<code>0x01 0x00</code>是标志PROTOCOL(源码里有映射表)，后面的就是值了，这里的实际传输长度为8，是因为进行了对齐操作。</p>\n<p>如果你需要进行其他ipset通信的分析，执行上面提到的ipset的debug版本对应命令，进行解析即可。</p>"},{"title":"libipset源码分析","date":"2020-05-06T03:04:02.000Z","_content":"\n\n由于语言需求，需要使用go实现libipset的功能，与内核通信，就简单的看了一下源码(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n*[ipset官网](http://ipset.netfilter.org/)*  \n*[libipset手册](http://ipset.netfilter.org/libipset.man.html)*\n*[libmnl](https://netfilter.org/projects/libmnl/)*\n\n*本文主要根据ipset 7.x版本来进行介绍的。*\n\n<!-- more -->\n\n### 简单介绍\n#### 简介\nipset是 Linux 防火墙 iptables 的一个协助工具。 通过这个工具可以轻松愉快地屏蔽一组IP地址。--[来自wiki](https://wiki.archlinux.org/index.php/Ipset_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))\nipset主要解决的是iptables在屏蔽大量ip产生的效率低下问题。搞一张图看看效率差距：\n![iptables和ipset性能对比](libipset源码分析/iptables-nfhipac-ipset.jpg)\n--[测评来源](http://people.netfilter.org/kadlec/nftest.pdf)\n并且，iptables在进行规则插入和删除的时候，也只能一条条的进行，速度也是非常慢的。我自己在自己的设备上测试效果如下(time + 脚本测试的)：\n| 添加Iptables数量 | 1\t| 500\t| 1000 |\t2000 |\t4000\t| 10000 |\n| ------------- | ------------- | ------------- | ------------- |------------ | ------------- | ------------- | ------------- |\n| 花费时间 |0.002s\t|2.831s\t|4.115s|\t10.725s\t|33.365s|\t2m55.954s|\n**那么**，如果你有需求使用iptables屏蔽大量的ip，就可以考虑使用ipset。\n#### 使用\n看源码之前，首先需要了解ipset有什么用，简单给个示例来屏蔽一个ip：\n你要有两台机器，可以是自己的虚拟机，在一台机器上配置ipset + iptables，另外一台机器去ping测试。\n安装(centos)：`yum install ipset`\n```shell\nipset create hash_test hash:ip #创建一个集合\nipset add hash_test 192.168.1.120 #添加一个成员到集合\niptables -I INPUT -m set --match-set hash_test src -j DROP  #iptables配置匹配项\n```\n你也可以进行更多的尝试，参见[官网](http://ipset.netfilter.org/)\nipset的使用不是本文主要目的，简单给个示例就行了。\n### 基本流程\nlibipset属于用户态部分的代码，负责与内核通信，真正的ipset工作的地方是在内核的netfilter中。\n我们就根据上面`ipset create hash_test hash:ip`命令来分析大概的流程。\n![libipset流程图](libipset源码分析/ipset_source_flow.png)\n特殊说明在流程图里都有备注，顺便说明一下几个固定列表的位置：\n* 各种类型的类型列表，包含所支持的命令，以及需要的参数：ipset_<type_name>.c\n  ![haship](libipset源码分析/haship.jpg)\n* 错误码：errcode.c\n  ![errcode](libipset源码分析/errcode.jpg)\n* 输入命令参数列表(主要是-s这种类型的参数)：ipset.c\n  ![ipset](libipset源码分析/ipset.jpg)\n* 输入命令参数列表(主要是add这种类型的参数)：args.c\n  ![args](libipset源码分析/args.jpg)\n* 某个命令的消息协议：PROTOCOL\n  ![protocol](libipset源码分析/protocol.jpg)\n\n### 消息格式\nipset使用的消息是Netlink通信，在ipset用户态构造的sock参数：AF_NETLINK，SOCK_RAW，NETLINK_NETFILTER，sock具体用法自己去查。ipset用户态构造的sock需要进行bind才能使用，因为它不能像udp这种自动分配发送端的端口。\n首先来看看netlink的消息格式([主要参考](https://www.cnblogs.com/wenqiang/p/6306727.html))：\n`struct sockaddr_nl`结构:\n``` c\nstruct sockaddr_nl {\n     __kernel_sa_family_t    nl_family;  /* AF_NETLINK （跟AF_INET对应）*/\n     unsigned short  nl_pad;     /* zero */\n     __u32       nl_pid;     /* port ID  （通信端口号）*/\n     __u32       nl_groups;  /* multicast groups mask */\n};\n```\n`struct nlmsghd` 结构：\n``` c\n/* struct nlmsghd 是netlink消息头*/\nstruct nlmsghdr {   \n    __u32       nlmsg_len;  /* Length of message including header */\n    __u16       nlmsg_type; /* Message content */\n    __u16       nlmsg_flags;    /* Additional flags */ \n    __u32       nlmsg_seq;  /* Sequence number */\n    __u32       nlmsg_pid;  /* Sending process port ID */\n};\n```\n通常这个头消息的构造，在ipset中是下面的代码(其中seq是一个自增检验数，pid通常设置0)：\n``` c\nstatic void\nipset_mnl_fill_hdr(struct ipset_handle *handle, enum ipset_cmd cmd,\n\t\t   void *buffer, size_t len UNUSED, uint8_t envflags)\n{\n\tstruct nlmsghdr *nlh;\n\tstruct nfgenmsg *nfg;\n\n\tassert(handle);\n\tassert(buffer);\n\tassert(cmd > IPSET_CMD_NONE && cmd < IPSET_MSG_MAX);\n\n\tnlh = mnl_nlmsg_put_header(buffer);\n\tnlh->nlmsg_type = cmd | (NFNL_SUBSYS_IPSET << 8);\n\tnlh->nlmsg_flags = cmdflags[cmd - 1];\n\tif (envflags & IPSET_ENV_EXIST)\n\t\tnlh->nlmsg_flags &=  ~NLM_F_EXCL;\n\n        //这儿是扩展头，通常是固定的\\x02\\x00\\x00\\x00\n\tnfg = mnl_nlmsg_put_extra_header(nlh, sizeof(struct nfgenmsg));\n\tnfg->nfgen_family = AF_INET;\n\tnfg->version = NFNETLINK_V0;\n\tnfg->res_id = htons(0);\n}\n```\n`struct msghdr` 结构:\n``` c\nstruct iovec {                    /* Scatter/gather array items */\n     void  *iov_base;              /* Starting address */\n     size_t iov_len;               /* Number of bytes to transfer */\n };\n  /* iov_base: iov_base指向数据包缓冲区，即参数buff，iov_len是buff的长度。msghdr中允许一次传递多个buff，\n    以数组的形式组织在 msg_iov中，msg_iovlen就记录数组的长度 （即有多少个buff）\n  */\n struct msghdr {\n     void         *msg_name;       /* optional address */\n     socklen_t     msg_namelen;    /* size of address */\n     struct iovec *msg_iov;        /* scatter/gather array */\n     size_t        msg_iovlen;     /* # elements in msg_iov */\n     void         *msg_control;    /* ancillary data, see below */\n     size_t        msg_controllen; /* ancillary data buffer len */\n     int           msg_flags;      /* flags on received message */\n };\n /* msg_name： 数据的目的地址，网络包指向sockaddr_in, netlink则指向sockaddr_nl;\n    msg_namelen: msg_name 所代表的地址长度\n    msg_iov: 指向的是缓冲区数组\n    msg_iovlen: 缓冲区数组长度\n    msg_control: 辅助数据，控制信息(发送任何的控制信息)\n    msg_controllen: 辅助信息长度\n    msg_flags: 消息标识\n */\n```\n这个结构体主要在ipset接收消息的时候使用。具体代码包含在libmnl库中，需要[下载源码](https://netfilter.org/projects/libmnl/downloads.html)。然后就可以看到以下的接收消息的函数：\n``` c\nssize_t mnl_socket_recvfrom(const struct mnl_socket *nl, void *buf,\n\t\t\t    size_t bufsiz)\n{\n\tssize_t ret;\n\tstruct sockaddr_nl addr;\n\tstruct iovec iov = {\n\t\t.iov_base\t= buf,\n\t\t.iov_len\t= bufsiz,\n\t};\n\tstruct msghdr msg = {\n\t\t.msg_name\t= &addr,\n\t\t.msg_namelen\t= sizeof(struct sockaddr_nl),\n\t\t.msg_iov\t= &iov,\n\t\t.msg_iovlen\t= 1,\n\t\t.msg_control\t= NULL,\n\t\t.msg_controllen\t= 0,\n\t\t.msg_flags\t= 0,\n\t};\n\tret = recvmsg(nl->fd, &msg, 0);\n\tif (ret == -1)\n\t\treturn ret;\n\n\tif (msg.msg_flags & MSG_TRUNC) {\n\t\terrno = ENOSPC;\n\t\treturn -1;\n\t}\n\tif (msg.msg_namelen != sizeof(struct sockaddr_nl)) {\n\t\terrno = EINVAL;\n\t\treturn -1;\n\t}\n\treturn ret;\n}\n```\n上述的netlink消息数据结构，也就是ipset里使用的主要结构，而这些消息结构的关系如下：\n![netlink数据结构之间的关系](libipset源码分析/netlink数据关系.png)\n*[图片来源](https://blog.csdn.net/zhao_h/article/details/80943226)*\n上述示例的就是ipset中使用到的主要消息结构了，更多细节，还是在源码中查看。\n### 示例Demo\n这里我们列出两个语言的demo，C和Go的。\n#### C\nc的相对简单，因为只需要调用libipset提供的接口就行。这里推荐写法和官方的ipset的main函数写法一致。\n**官方main函数**(这个函数只有在ipset 7版本中才有)\n``` c\n#include <assert.h>\t\t\t/* assert */\n#include <stdio.h>\t\t\t/* fprintf */\n#include <stdlib.h>\t\t\t/* exit */\n\n#include <config.h>\n#include <libipset/ipset.h>\t\t/* ipset library */\n\nint\nmain(int argc, char *argv[])\n{\n\tstruct ipset *ipset;\n\tint ret;\n\n\t/* Load set types */\n\tipset_load_types();\n\n\t/* Initialize ipset library */\n\tipset = ipset_init();\n\tif (ipset == NULL) {\n\t\tfprintf(stderr, \"Cannot initialize ipset, aborting.\");\n\t\texit(1);\n\t}\n\n\tret = ipset_parse_argv(ipset, argc, argv);\n\n\tipset_fini(ipset);\n\n\treturn ret;\n}\n```\n是不是简单到爆。\n**第二种**，是使用libipset中的session结构体([参考来源](https://github.com/Lekensteyn/dnsallow/blob/master/ipset.c))：\n``` c\n#include <stdint.h>\n#include <stdbool.h>\n#include <stdlib.h>\n#include <libipset/types.h>\n#include <libipset/session.h>\n#include <libipset/data.h>\n#include <netinet/in.h>   \n#include <arpa/inet.h>\n\n/* Setname X which can be used in \"ipset list X\". */\n#define SETNAME_IPV4 \"ipset-ipv4\"\n#define SETNAME_IPV6 \"ipset-ipv6\"\n\nstruct ipset_state {\n    struct ipset_session *session;\n};\n\nstruct address {\n    int family;\n    union {\n        struct in_addr ip4_addr;\n        struct in6_addr ip6_addr;\n    };\n};\n\nstatic bool try_ipset_cmd(struct ipset_session *session, enum ipset_cmd cmd,\n\t\t        const char *setname, int family, const void *addr)\n{\n    ipset_session_data_set(session, IPSET_SETNAME, setname);\n    if (!ipset_type_get(session, cmd)) {\n\t        fprintf(stderr, \"Cannot find ipset %s: %s\\n\", setname,\n\t\t\t\t\t                ipset_session_error(session));\n\t        return false;\n\t    }\n    ipset_session_data_set(session, IPSET_OPT_FAMILY, &family);\n    ipset_session_data_set(session, IPSET_OPT_IP, addr);\n\n    if (ipset_cmd(session, cmd, /*lineno*/ 0)) {\n\t        fprintf(stderr, \"Failed to add to set %s: %s\\n\", setname,\n\t\t\t\t\t                ipset_session_error(session));\n\t        return false;\n\t    }\n    return true;\n}\n\nstatic bool try_ipset_create(struct ipset_session *session, const char *setname,\n\t\t        const char *typename, int family)\n{\n    const struct ipset_type *type;\n    uint32_t timeout;\n\n    ipset_session_data_set(session, IPSET_SETNAME, setname);\n    ipset_session_data_set(session, IPSET_OPT_TYPENAME, typename);\n    type = ipset_type_get(session, IPSET_CMD_CREATE);\n    if (type == NULL) {\n\t        fprintf(stderr, \"Cannot find ipset type %s: %s\\n\", typename,\n\t\t\t\t\t                ipset_session_error(session));\n\t        return false;\n\t    }\n\n    timeout = 0; /* timeout support, but default to infinity */\n    ipset_session_data_set(session, IPSET_OPT_TIMEOUT, &timeout);\n    ipset_session_data_set(session, IPSET_OPT_TYPE, type);\n    ipset_session_data_set(session, IPSET_OPT_FAMILY, &family);\n\n    if (ipset_cmd(session, IPSET_CMD_CREATE, /*lineno*/ 0)) {\n\t        fprintf(stderr, \"Failed to create ipset %s: %s\\n\", setname,\n\t\t\t\t\t                ipset_session_error(session));\n\t        return false;\n\t    }\n    return true;\n}\n\nstruct ipset_state *ipset_init(void)\n{\n    struct ipset_state *state;\n\n    state = malloc(sizeof(*state));\n    if (!state)\n        return NULL;\n\n    ipset_load_types();\n\n    state->session = ipset_session_init(printf);\n    if (!state->session) {\n\t        fprintf(stderr, \"Cannot initialize ipset session.\\n\");\n\t        goto err_session;\n\t    }\n\n    /* Return success on attempts to create a compatible ipset or attempts to\n\t *      * add an existing rule. */\n    ipset_envopt_parse(state->session, IPSET_ENV_EXIST, NULL);\n\n    if (!try_ipset_create(state->session, SETNAME_IPV4, \"hash:ip\", NFPROTO_IPV4))\n        goto err_set;\n    if (!try_ipset_create(state->session, SETNAME_IPV6, \"hash:ip\", NFPROTO_IPV6))\n        goto err_set;\n\n    return state;\n\nerr_set:\nerr_session:\n    ipset_session_fini(state->session);\n    free(state);\n    return NULL;\n}\n\nvoid ipset_add_ip(struct ipset_state *state, struct address *addr)\n{\n    struct ipset_session *session = state->session;\n\n    switch (addr->family) {\n\t    case AF_INET:\n\t        try_ipset_cmd(session, IPSET_CMD_ADD, SETNAME_IPV4, NFPROTO_IPV4, &addr->ip4_addr);\n\t        break;\n\t    case AF_INET6:\n\t        try_ipset_cmd(session, IPSET_CMD_ADD, SETNAME_IPV6, NFPROTO_IPV6, &addr->ip6_addr);\n\t        break;\n\t    default:\n\t        fprintf(stderr, \"Unrecognized address family 0x%04x\\n\", addr->family);\n\t        return;\n\t    }\n    ipset_session_report_reset(session);\n}\n\nvoid ipset_fini(struct ipset_state *state)\n{\n    ipset_session_fini(state->session);\n    free(state);\n}\n\n\n//for test\nint main(){\n    struct address addr;\n    addr.family = AF_INET;\n    inet_aton(\"192.168.1.10\", &addr.ip4_addr);\n    struct ipset_state *state = ipset_init();\n    ipset_add_ip(state, &addr);\n    ipset_fini(state);\n\treturn 0;\n}\n\n```\n**编译**(根据各自的环境调整)：\n``` shell\ngcc -g -O2 -Wall -Werror -c ipset_test.c -o ipset_test.o\ngcc -g -O2 -Wall -Werror ./ipset_test.o -o a.out -L/usr/lib64/ -lipset\n```\n#### GO\ngo有三种方式来调用ipset，第一种是用执行命令的方式，第二种是使用cgo的方式，第三种是使用netlink通信的方式。这里简单给下第二种和第三种的demo：\n**cgo：**\nipset.go:\n``` go\npackage main\n\n// #cgo LDFLAGS: -L${SRCDIR}/ -Wl,-rpath,${SRCDIR}/ -lcipset -L/usr/lib64/  -lipset\n// #include <stdlib.h>\n// #include \"cipset.h\"\nimport (\n\t\"C\"\n)\nimport \"unsafe\"\n\nfunc main() {\n\tcip := C.CString(\"10.92.2.100\")\n\tdefer C.free(unsafe.Pointer(cip))\n\tvar caddr C.struct_address\n\tC.ip2addr(cip, &caddr)\n\t//caddr.family = C.AF_INET\n\t//C.inet_aton(cip, caddr.ip4_addr)\n\tvar cstate *C.struct_ipset_state = C.ipset_init()\n\tC.ipset_add_ip(cstate, &caddr)\n\tC.ipset_fini(cstate)\n}\n```\ncipset.h\n``` c\n#ifndef __cipset\n#define __cipset\n\n/* Setname X which can be used in \"ipset list X\". */\n#define SETNAME_IPV4 \"ipset-ipv4\"\n#define SETNAME_IPV6 \"ipset-ipv6\"\n\nstruct ipset_state;\nstruct address;\n\nstruct ipset_state *ipset_init(void);\nvoid ipset_add_ip(struct ipset_state *state, struct address *addr);\nvoid ipset_fini(struct ipset_state *state);\nvoid ip2addr(char *ip, struct address *addr);\n\n#endif\n```\ncipset.c 和上面的C第二种示例代码一致，这里就不占空间了。\n\n**编译执行：**\n```\ngcc -g -O2 -Wall -Werror -rdynamic -fPIC -shared -o ./libcipset.so ./cipset.c  #动态库生成\ngo run ipset.go  #执行go程序\n```\n**go-netlink**([主要参考](https://github.com/nadoo/glider/blob/master/ipset/ipset_linux.go))\n```go\n// Apache License 2.0\n// @mdlayher https://github.com/mdlayher/netlink\n// Ref: https://github.com/vishvananda/netlink/blob/master/nl/nl_linux.go\n\npackage ipset\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"net\"\n\t\"strings\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"syscall\"\n\t\"unsafe\"\n\n\t\"github.com/nadoo/glider/common/log\"\n\t\"github.com/nadoo/glider/rule\"\n)\n\n// NFNL_SUBSYS_IPSET netfilter netlink message types\n// https://github.com/torvalds/linux/blob/9e66317d3c92ddaab330c125dfe9d06eee268aff/include/uapi/linux/netfilter/nfnetlink.h#L56\nconst NFNL_SUBSYS_IPSET = 6\n\n// IPSET_PROTOCOL The protocol version\n// http://git.netfilter.org/ipset/tree/include/libipset/linux_ip_set.h\nconst IPSET_PROTOCOL = 6\n\n// IPSET_MAXNAMELEN The max length of strings including NUL: set and type identifiers\nconst IPSET_MAXNAMELEN = 32\n\n// Message types and commands\nconst (\n\tIPSET_CMD_CREATE = 2\n\tIPSET_CMD_FLUSH  = 4\n\tIPSET_CMD_ADD    = 9\n\tIPSET_CMD_DEL    = 10\n)\n\n// Attributes at command level\nconst (\n\tIPSET_ATTR_PROTOCOL = 1 /* 1: Protocol version */\n\tIPSET_ATTR_SETNAME  = 2 /* 2: Name of the set */\n\tIPSET_ATTR_TYPENAME = 3 /* 3: Typename */\n\tIPSET_ATTR_REVISION = 4 /* 4: Settype revision */\n\tIPSET_ATTR_FAMILY   = 5 /* 5: Settype family */\n\tIPSET_ATTR_DATA     = 7 /* 7: Nested attributes */\n)\n\n// CADT specific attributes\nconst (\n\tIPSET_ATTR_IP   = 1\n\tIPSET_ATTR_CIDR = 3\n)\n\n// IP specific attributes\nconst (\n\tIPSET_ATTR_IPADDR_IPV4 = 1\n\tIPSET_ATTR_IPADDR_IPV6 = 2\n)\n\n// ATTR flags\nconst (\n\tNLA_F_NESTED        = (1 << 15)\n\tNLA_F_NET_BYTEORDER = (1 << 14)\n)\n\nvar nextSeqNr uint32\nvar nativeEndian binary.ByteOrder\n\n// Manager struct\ntype Manager struct {\n\tfd  int\n\tlsa syscall.SockaddrNetlink\n\n\tdomainSet sync.Map\n}\n\n// NewManager returns a Manager\nfunc NewManager(rules []*rule.Config) (*Manager, error) {\n\tfd, err := syscall.Socket(syscall.AF_NETLINK, syscall.SOCK_RAW, syscall.NETLINK_NETFILTER)\n\tif err != nil {\n\t\tlog.F(\"%s\", err)\n\t\treturn nil, err\n\t}\n\t// defer syscall.Close(fd)\n\n\tlsa := syscall.SockaddrNetlink{\n\t\tFamily: syscall.AF_NETLINK,\n\t}\n\n\terr = syscall.Bind(fd, &lsa)\n\tif err != nil {\n\t\tlog.F(\"%s\", err)\n\t\treturn nil, err\n\t}\n\n\tm := &Manager{fd: fd, lsa: lsa}\n\n\t// create ipset\n\tfor _, r := range rules {\n\t\tif r.IPSet != \"\" {\n\t\t\tCreateSet(fd, lsa, r.IPSet)\n\t\t}\n\t}\n\n\t// init ipset\n\tfor _, r := range rules {\n\t\tif r.IPSet != \"\" {\n\t\t\tfor _, domain := range r.Domain {\n\t\t\t\tm.domainSet.Store(domain, r.IPSet)\n\t\t\t}\n\t\t\tfor _, ip := range r.IP {\n\t\t\t\tAddToSet(fd, lsa, r.IPSet, ip)\n\t\t\t}\n\t\t\tfor _, cidr := range r.CIDR {\n\t\t\t\tAddToSet(fd, lsa, r.IPSet, cidr)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn m, nil\n}\n\n// AddDomainIP implements the DNSAnswerHandler function, used to update ipset according to domainSet rule\nfunc (m *Manager) AddDomainIP(domain, ip string) error {\n\tif domain == \"\" || ip == \"\" {\n\t\treturn errors.New(\"please specify the domain and ip address\")\n\t}\n\n\tdomainParts := strings.Split(domain, \".\")\n\tlength := len(domainParts)\n\tfor i := length - 1; i >= 0; i-- {\n\t\tdomain := strings.Join(domainParts[i:length], \".\")\n\n\t\t// find in domainMap\n\t\tif ipset, ok := m.domainSet.Load(domain); ok {\n\t\t\tAddToSet(m.fd, m.lsa, ipset.(string), ip)\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// CreateSet create a ipset\nfunc CreateSet(fd int, lsa syscall.SockaddrNetlink, setName string) {\n\tif setName == \"\" {\n\t\treturn\n\t}\n\n\tif len(setName) > IPSET_MAXNAMELEN {\n\t\tlog.Fatal(\"ipset: name too long\")\n\t}\n\n\tlog.F(\"ipset create %s hash:net\", setName)\n\n\treq := NewNetlinkRequest(IPSET_CMD_CREATE|(NFNL_SUBSYS_IPSET<<8), syscall.NLM_F_REQUEST)\n\n\t// TODO: support AF_INET6\n\treq.AddData(NewNfGenMsg(syscall.AF_INET, 0, 0))\n\treq.AddData(NewRtAttr(IPSET_ATTR_PROTOCOL, Uint8Attr(IPSET_PROTOCOL)))\n\treq.AddData(NewRtAttr(IPSET_ATTR_SETNAME, ZeroTerminated(setName)))\n\treq.AddData(NewRtAttr(IPSET_ATTR_TYPENAME, ZeroTerminated(\"hash:net\")))\n\treq.AddData(NewRtAttr(IPSET_ATTR_REVISION, Uint8Attr(1)))\n\treq.AddData(NewRtAttr(IPSET_ATTR_FAMILY, Uint8Attr(2)))\n\treq.AddData(NewRtAttr(IPSET_ATTR_DATA|NLA_F_NESTED, nil))\n\n\terr := syscall.Sendto(fd, req.Serialize(), 0, &lsa)\n\tif err != nil {\n\t\tlog.F(\"%s\", err)\n\t}\n\n\tFlushSet(fd, lsa, setName)\n}\n\n// FlushSet flush a ipset\nfunc FlushSet(fd int, lsa syscall.SockaddrNetlink, setName string) {\n\tlog.F(\"ipset flush %s\", setName)\n\n\treq := NewNetlinkRequest(IPSET_CMD_FLUSH|(NFNL_SUBSYS_IPSET<<8), syscall.NLM_F_REQUEST)\n\n\t// TODO: support AF_INET6\n\treq.AddData(NewNfGenMsg(syscall.AF_INET, 0, 0))\n\treq.AddData(NewRtAttr(IPSET_ATTR_PROTOCOL, Uint8Attr(IPSET_PROTOCOL)))\n\treq.AddData(NewRtAttr(IPSET_ATTR_SETNAME, ZeroTerminated(setName)))\n\n\terr := syscall.Sendto(fd, req.Serialize(), 0, &lsa)\n\tif err != nil {\n\t\tlog.F(\"%s\", err)\n\t}\n\n}\n\n// AddToSet adds an entry to ipset\nfunc AddToSet(fd int, lsa syscall.SockaddrNetlink, setName, entry string) {\n\tif setName == \"\" {\n\t\treturn\n\t}\n\n\tif len(setName) > IPSET_MAXNAMELEN {\n\t\tlog.F(\"ipset: name too long\")\n\t}\n\n\tlog.F(\"ipset add %s %s\", setName, entry)\n\n\tvar ip net.IP\n\tvar cidr *net.IPNet\n\n\tip, cidr, err := net.ParseCIDR(entry)\n\tif err != nil {\n\t\tip = net.ParseIP(entry)\n\t}\n\n\tif ip == nil {\n\t\tlog.F(\"ipset: parse %s error\", entry)\n\t\treturn\n\t}\n\n\treq := NewNetlinkRequest(IPSET_CMD_ADD|(NFNL_SUBSYS_IPSET<<8), syscall.NLM_F_REQUEST)\n\n\t// TODO: support AF_INET6\n\treq.AddData(NewNfGenMsg(syscall.AF_INET, 0, 0))\n\treq.AddData(NewRtAttr(IPSET_ATTR_PROTOCOL, Uint8Attr(IPSET_PROTOCOL)))\n\treq.AddData(NewRtAttr(IPSET_ATTR_SETNAME, ZeroTerminated(setName)))\n\n\tattrNested := NewRtAttr(IPSET_ATTR_DATA|NLA_F_NESTED, nil)\n\tattrIP := NewRtAttrChild(attrNested, IPSET_ATTR_IP|NLA_F_NESTED, nil)\n\n\t// TODO: support ipV6\n\tNewRtAttrChild(attrIP, IPSET_ATTR_IPADDR_IPV4|NLA_F_NET_BYTEORDER, ip.To4())\n\n\t// for cidr prefix\n\tif cidr != nil {\n\t\tcidrPrefix, _ := cidr.Mask.Size()\n\t\tNewRtAttrChild(attrNested, IPSET_ATTR_CIDR, Uint8Attr(uint8(cidrPrefix)))\n\t}\n\n\tNewRtAttrChild(attrNested, 9|NLA_F_NET_BYTEORDER, Uint32Attr(0))\n\treq.AddData(attrNested)\n\n\terr = syscall.Sendto(fd, req.Serialize(), 0, &lsa)\n\tif err != nil {\n\t\tlog.F(\"%s\", err)\n\t}\n}\n\n// NativeEndian get native endianness for the system\nfunc NativeEndian() binary.ByteOrder {\n\tif nativeEndian == nil {\n\t\tvar x uint32 = 0x01020304\n\t\tif *(*byte)(unsafe.Pointer(&x)) == 0x01 {\n\t\t\tnativeEndian = binary.BigEndian\n\t\t} else {\n\t\t\tnativeEndian = binary.LittleEndian\n\t\t}\n\t}\n\treturn nativeEndian\n}\n\nfunc rtaAlignOf(attrlen int) int {\n\treturn (attrlen + syscall.RTA_ALIGNTO - 1) & ^(syscall.RTA_ALIGNTO - 1)\n}\n\n// NetlinkRequestData .\ntype NetlinkRequestData interface {\n\tLen() int\n\tSerialize() []byte\n}\n\n// NfGenMsg .\ntype NfGenMsg struct {\n\tnfgenFamily uint8\n\tversion     uint8\n\tresID       uint16\n}\n\n// NewNfGenMsg .\nfunc NewNfGenMsg(nfgenFamily, version, resID int) *NfGenMsg {\n\treturn &NfGenMsg{\n\t\tnfgenFamily: uint8(nfgenFamily),\n\t\tversion:     uint8(version),\n\t\tresID:       uint16(resID),\n\t}\n}\n\n// Len .\nfunc (m *NfGenMsg) Len() int {\n\treturn rtaAlignOf(4)\n}\n\n// Serialize .\nfunc (m *NfGenMsg) Serialize() []byte {\n\tnative := NativeEndian()\n\n\tlength := m.Len()\n\tbuf := make([]byte, rtaAlignOf(length))\n\tbuf[0] = m.nfgenFamily\n\tbuf[1] = m.version\n\tnative.PutUint16(buf[2:4], m.resID)\n\treturn buf\n}\n\n// RtAttr Extend RtAttr to handle data and children\ntype RtAttr struct {\n\tsyscall.RtAttr\n\tData     []byte\n\tchildren []NetlinkRequestData\n}\n\n// NewRtAttr Create a new Extended RtAttr object\nfunc NewRtAttr(attrType int, data []byte) *RtAttr {\n\treturn &RtAttr{\n\t\tRtAttr: syscall.RtAttr{\n\t\t\tType: uint16(attrType),\n\t\t},\n\t\tchildren: []NetlinkRequestData{},\n\t\tData:     data,\n\t}\n}\n\n// NewRtAttrChild Create a new RtAttr obj anc add it as a child of an existing object\nfunc NewRtAttrChild(parent *RtAttr, attrType int, data []byte) *RtAttr {\n\tattr := NewRtAttr(attrType, data)\n\tparent.children = append(parent.children, attr)\n\treturn attr\n}\n\n// Len .\nfunc (a *RtAttr) Len() int {\n\tif len(a.children) == 0 {\n\t\treturn (syscall.SizeofRtAttr + len(a.Data))\n\t}\n\n\tl := 0\n\tfor _, child := range a.children {\n\t\tl += rtaAlignOf(child.Len())\n\t}\n\tl += syscall.SizeofRtAttr\n\treturn rtaAlignOf(l + len(a.Data))\n}\n\n// Serialize the RtAttr into a byte array\n// This can't just unsafe.cast because it must iterate through children.\nfunc (a *RtAttr) Serialize() []byte {\n\tnative := NativeEndian()\n\n\tlength := a.Len()\n\tbuf := make([]byte, rtaAlignOf(length))\n\n\tnext := 4\n\tif a.Data != nil {\n\t\tcopy(buf[next:], a.Data)\n\t\tnext += rtaAlignOf(len(a.Data))\n\t}\n\tif len(a.children) > 0 {\n\t\tfor _, child := range a.children {\n\t\t\tchildBuf := child.Serialize()\n\t\t\tcopy(buf[next:], childBuf)\n\t\t\tnext += rtaAlignOf(len(childBuf))\n\t\t}\n\t}\n\n\tif l := uint16(length); l != 0 {\n\t\tnative.PutUint16(buf[0:2], l)\n\t}\n\tnative.PutUint16(buf[2:4], a.Type)\n\treturn buf\n}\n\n// NetlinkRequest .\ntype NetlinkRequest struct {\n\tsyscall.NlMsghdr\n\tData    []NetlinkRequestData\n\tRawData []byte\n}\n\n// NewNetlinkRequest create a new netlink request from proto and flags\n// Note the Len value will be inaccurate once data is added until\n// the message is serialized\nfunc NewNetlinkRequest(proto, flags int) *NetlinkRequest {\n\treturn &NetlinkRequest{\n\t\tNlMsghdr: syscall.NlMsghdr{\n\t\t\tLen:   uint32(syscall.SizeofNlMsghdr),\n\t\t\tType:  uint16(proto),\n\t\t\tFlags: syscall.NLM_F_REQUEST | uint16(flags),\n\t\t\tSeq:   atomic.AddUint32(&nextSeqNr, 1),\n\t\t\t// Pid:   uint32(os.Getpid()),\n\t\t},\n\t}\n}\n\n// Serialize the Netlink Request into a byte array\nfunc (req *NetlinkRequest) Serialize() []byte {\n\tlength := syscall.SizeofNlMsghdr\n\tdataBytes := make([][]byte, len(req.Data))\n\tfor i, data := range req.Data {\n\t\tdataBytes[i] = data.Serialize()\n\t\tlength = length + len(dataBytes[i])\n\t}\n\tlength += len(req.RawData)\n\n\treq.Len = uint32(length)\n\tb := make([]byte, length)\n\thdr := (*(*[syscall.SizeofNlMsghdr]byte)(unsafe.Pointer(req)))[:]\n\tnext := syscall.SizeofNlMsghdr\n\tcopy(b[0:next], hdr)\n\tfor _, data := range dataBytes {\n\t\tfor _, dataByte := range data {\n\t\t\tb[next] = dataByte\n\t\t\tnext = next + 1\n\t\t}\n\t}\n\t// Add the raw data if any\n\tif len(req.RawData) > 0 {\n\t\tcopy(b[next:length], req.RawData)\n\t}\n\treturn b\n}\n\n// AddData add data to request\nfunc (req *NetlinkRequest) AddData(data NetlinkRequestData) {\n\tif data != nil {\n\t\treq.Data = append(req.Data, data)\n\t}\n}\n\n// AddRawData adds raw bytes to the end of the NetlinkRequest object during serialization\nfunc (req *NetlinkRequest) AddRawData(data []byte) {\n\tif data != nil {\n\t\treq.RawData = append(req.RawData, data...)\n\t}\n}\n\n// Uint8Attr .\nfunc Uint8Attr(v uint8) []byte {\n\treturn []byte{byte(v)}\n}\n\n// Uint16Attr .\nfunc Uint16Attr(v uint16) []byte {\n\tnative := NativeEndian()\n\tbytes := make([]byte, 2)\n\tnative.PutUint16(bytes, v)\n\treturn bytes\n}\n\n// Uint32Attr .\nfunc Uint32Attr(v uint32) []byte {\n\tnative := NativeEndian()\n\tbytes := make([]byte, 4)\n\tnative.PutUint32(bytes, v)\n\treturn bytes\n}\n\n// ZeroTerminated .\nfunc ZeroTerminated(s string) []byte {\n\tbytes := make([]byte, len(s)+1)\n\tfor i := 0; i < len(s); i++ {\n\t\tbytes[i] = s[i]\n\t}\n\tbytes[len(s)] = 0\n\treturn bytes\n}\n\n// NonZeroTerminated .\nfunc NonZeroTerminated(s string) []byte {\n\tbytes := make([]byte, len(s))\n\tfor i := 0; i < len(s); i++ {\n\t\tbytes[i] = s[i]\n\t}\n\treturn bytes\n}\n\n// BytesToString .\nfunc BytesToString(b []byte) string {\n\tn := bytes.Index(b, []byte{0})\n\treturn string(b[:n])\n}\n```\ngo的代码，我自己改的已经完善了常用命令，以及接收内核反馈消息等。由于我修改的代码做了模块划分，涉及的文件比较多，这里就列出参考的源代码吧，想看更多的去参考的链接。反正这个源码也是参考libipset写的。(๑`･ᴗ･´๑)\n\n\n以上，如果有什么问题，欢迎随时交流。-(￢∀￢)σ","source":"_posts/libipset源码分析.md","raw":"---\ntitle: libipset源码分析\ndate: 2020-05-06 11:04:02\ncategories: 技术杂谈\ntags: [IPSET, NETLINK, C, GO]\n---\n\n\n由于语言需求，需要使用go实现libipset的功能，与内核通信，就简单的看了一下源码(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n*[ipset官网](http://ipset.netfilter.org/)*  \n*[libipset手册](http://ipset.netfilter.org/libipset.man.html)*\n*[libmnl](https://netfilter.org/projects/libmnl/)*\n\n*本文主要根据ipset 7.x版本来进行介绍的。*\n\n<!-- more -->\n\n### 简单介绍\n#### 简介\nipset是 Linux 防火墙 iptables 的一个协助工具。 通过这个工具可以轻松愉快地屏蔽一组IP地址。--[来自wiki](https://wiki.archlinux.org/index.php/Ipset_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))\nipset主要解决的是iptables在屏蔽大量ip产生的效率低下问题。搞一张图看看效率差距：\n![iptables和ipset性能对比](libipset源码分析/iptables-nfhipac-ipset.jpg)\n--[测评来源](http://people.netfilter.org/kadlec/nftest.pdf)\n并且，iptables在进行规则插入和删除的时候，也只能一条条的进行，速度也是非常慢的。我自己在自己的设备上测试效果如下(time + 脚本测试的)：\n| 添加Iptables数量 | 1\t| 500\t| 1000 |\t2000 |\t4000\t| 10000 |\n| ------------- | ------------- | ------------- | ------------- |------------ | ------------- | ------------- | ------------- |\n| 花费时间 |0.002s\t|2.831s\t|4.115s|\t10.725s\t|33.365s|\t2m55.954s|\n**那么**，如果你有需求使用iptables屏蔽大量的ip，就可以考虑使用ipset。\n#### 使用\n看源码之前，首先需要了解ipset有什么用，简单给个示例来屏蔽一个ip：\n你要有两台机器，可以是自己的虚拟机，在一台机器上配置ipset + iptables，另外一台机器去ping测试。\n安装(centos)：`yum install ipset`\n```shell\nipset create hash_test hash:ip #创建一个集合\nipset add hash_test 192.168.1.120 #添加一个成员到集合\niptables -I INPUT -m set --match-set hash_test src -j DROP  #iptables配置匹配项\n```\n你也可以进行更多的尝试，参见[官网](http://ipset.netfilter.org/)\nipset的使用不是本文主要目的，简单给个示例就行了。\n### 基本流程\nlibipset属于用户态部分的代码，负责与内核通信，真正的ipset工作的地方是在内核的netfilter中。\n我们就根据上面`ipset create hash_test hash:ip`命令来分析大概的流程。\n![libipset流程图](libipset源码分析/ipset_source_flow.png)\n特殊说明在流程图里都有备注，顺便说明一下几个固定列表的位置：\n* 各种类型的类型列表，包含所支持的命令，以及需要的参数：ipset_<type_name>.c\n  ![haship](libipset源码分析/haship.jpg)\n* 错误码：errcode.c\n  ![errcode](libipset源码分析/errcode.jpg)\n* 输入命令参数列表(主要是-s这种类型的参数)：ipset.c\n  ![ipset](libipset源码分析/ipset.jpg)\n* 输入命令参数列表(主要是add这种类型的参数)：args.c\n  ![args](libipset源码分析/args.jpg)\n* 某个命令的消息协议：PROTOCOL\n  ![protocol](libipset源码分析/protocol.jpg)\n\n### 消息格式\nipset使用的消息是Netlink通信，在ipset用户态构造的sock参数：AF_NETLINK，SOCK_RAW，NETLINK_NETFILTER，sock具体用法自己去查。ipset用户态构造的sock需要进行bind才能使用，因为它不能像udp这种自动分配发送端的端口。\n首先来看看netlink的消息格式([主要参考](https://www.cnblogs.com/wenqiang/p/6306727.html))：\n`struct sockaddr_nl`结构:\n``` c\nstruct sockaddr_nl {\n     __kernel_sa_family_t    nl_family;  /* AF_NETLINK （跟AF_INET对应）*/\n     unsigned short  nl_pad;     /* zero */\n     __u32       nl_pid;     /* port ID  （通信端口号）*/\n     __u32       nl_groups;  /* multicast groups mask */\n};\n```\n`struct nlmsghd` 结构：\n``` c\n/* struct nlmsghd 是netlink消息头*/\nstruct nlmsghdr {   \n    __u32       nlmsg_len;  /* Length of message including header */\n    __u16       nlmsg_type; /* Message content */\n    __u16       nlmsg_flags;    /* Additional flags */ \n    __u32       nlmsg_seq;  /* Sequence number */\n    __u32       nlmsg_pid;  /* Sending process port ID */\n};\n```\n通常这个头消息的构造，在ipset中是下面的代码(其中seq是一个自增检验数，pid通常设置0)：\n``` c\nstatic void\nipset_mnl_fill_hdr(struct ipset_handle *handle, enum ipset_cmd cmd,\n\t\t   void *buffer, size_t len UNUSED, uint8_t envflags)\n{\n\tstruct nlmsghdr *nlh;\n\tstruct nfgenmsg *nfg;\n\n\tassert(handle);\n\tassert(buffer);\n\tassert(cmd > IPSET_CMD_NONE && cmd < IPSET_MSG_MAX);\n\n\tnlh = mnl_nlmsg_put_header(buffer);\n\tnlh->nlmsg_type = cmd | (NFNL_SUBSYS_IPSET << 8);\n\tnlh->nlmsg_flags = cmdflags[cmd - 1];\n\tif (envflags & IPSET_ENV_EXIST)\n\t\tnlh->nlmsg_flags &=  ~NLM_F_EXCL;\n\n        //这儿是扩展头，通常是固定的\\x02\\x00\\x00\\x00\n\tnfg = mnl_nlmsg_put_extra_header(nlh, sizeof(struct nfgenmsg));\n\tnfg->nfgen_family = AF_INET;\n\tnfg->version = NFNETLINK_V0;\n\tnfg->res_id = htons(0);\n}\n```\n`struct msghdr` 结构:\n``` c\nstruct iovec {                    /* Scatter/gather array items */\n     void  *iov_base;              /* Starting address */\n     size_t iov_len;               /* Number of bytes to transfer */\n };\n  /* iov_base: iov_base指向数据包缓冲区，即参数buff，iov_len是buff的长度。msghdr中允许一次传递多个buff，\n    以数组的形式组织在 msg_iov中，msg_iovlen就记录数组的长度 （即有多少个buff）\n  */\n struct msghdr {\n     void         *msg_name;       /* optional address */\n     socklen_t     msg_namelen;    /* size of address */\n     struct iovec *msg_iov;        /* scatter/gather array */\n     size_t        msg_iovlen;     /* # elements in msg_iov */\n     void         *msg_control;    /* ancillary data, see below */\n     size_t        msg_controllen; /* ancillary data buffer len */\n     int           msg_flags;      /* flags on received message */\n };\n /* msg_name： 数据的目的地址，网络包指向sockaddr_in, netlink则指向sockaddr_nl;\n    msg_namelen: msg_name 所代表的地址长度\n    msg_iov: 指向的是缓冲区数组\n    msg_iovlen: 缓冲区数组长度\n    msg_control: 辅助数据，控制信息(发送任何的控制信息)\n    msg_controllen: 辅助信息长度\n    msg_flags: 消息标识\n */\n```\n这个结构体主要在ipset接收消息的时候使用。具体代码包含在libmnl库中，需要[下载源码](https://netfilter.org/projects/libmnl/downloads.html)。然后就可以看到以下的接收消息的函数：\n``` c\nssize_t mnl_socket_recvfrom(const struct mnl_socket *nl, void *buf,\n\t\t\t    size_t bufsiz)\n{\n\tssize_t ret;\n\tstruct sockaddr_nl addr;\n\tstruct iovec iov = {\n\t\t.iov_base\t= buf,\n\t\t.iov_len\t= bufsiz,\n\t};\n\tstruct msghdr msg = {\n\t\t.msg_name\t= &addr,\n\t\t.msg_namelen\t= sizeof(struct sockaddr_nl),\n\t\t.msg_iov\t= &iov,\n\t\t.msg_iovlen\t= 1,\n\t\t.msg_control\t= NULL,\n\t\t.msg_controllen\t= 0,\n\t\t.msg_flags\t= 0,\n\t};\n\tret = recvmsg(nl->fd, &msg, 0);\n\tif (ret == -1)\n\t\treturn ret;\n\n\tif (msg.msg_flags & MSG_TRUNC) {\n\t\terrno = ENOSPC;\n\t\treturn -1;\n\t}\n\tif (msg.msg_namelen != sizeof(struct sockaddr_nl)) {\n\t\terrno = EINVAL;\n\t\treturn -1;\n\t}\n\treturn ret;\n}\n```\n上述的netlink消息数据结构，也就是ipset里使用的主要结构，而这些消息结构的关系如下：\n![netlink数据结构之间的关系](libipset源码分析/netlink数据关系.png)\n*[图片来源](https://blog.csdn.net/zhao_h/article/details/80943226)*\n上述示例的就是ipset中使用到的主要消息结构了，更多细节，还是在源码中查看。\n### 示例Demo\n这里我们列出两个语言的demo，C和Go的。\n#### C\nc的相对简单，因为只需要调用libipset提供的接口就行。这里推荐写法和官方的ipset的main函数写法一致。\n**官方main函数**(这个函数只有在ipset 7版本中才有)\n``` c\n#include <assert.h>\t\t\t/* assert */\n#include <stdio.h>\t\t\t/* fprintf */\n#include <stdlib.h>\t\t\t/* exit */\n\n#include <config.h>\n#include <libipset/ipset.h>\t\t/* ipset library */\n\nint\nmain(int argc, char *argv[])\n{\n\tstruct ipset *ipset;\n\tint ret;\n\n\t/* Load set types */\n\tipset_load_types();\n\n\t/* Initialize ipset library */\n\tipset = ipset_init();\n\tif (ipset == NULL) {\n\t\tfprintf(stderr, \"Cannot initialize ipset, aborting.\");\n\t\texit(1);\n\t}\n\n\tret = ipset_parse_argv(ipset, argc, argv);\n\n\tipset_fini(ipset);\n\n\treturn ret;\n}\n```\n是不是简单到爆。\n**第二种**，是使用libipset中的session结构体([参考来源](https://github.com/Lekensteyn/dnsallow/blob/master/ipset.c))：\n``` c\n#include <stdint.h>\n#include <stdbool.h>\n#include <stdlib.h>\n#include <libipset/types.h>\n#include <libipset/session.h>\n#include <libipset/data.h>\n#include <netinet/in.h>   \n#include <arpa/inet.h>\n\n/* Setname X which can be used in \"ipset list X\". */\n#define SETNAME_IPV4 \"ipset-ipv4\"\n#define SETNAME_IPV6 \"ipset-ipv6\"\n\nstruct ipset_state {\n    struct ipset_session *session;\n};\n\nstruct address {\n    int family;\n    union {\n        struct in_addr ip4_addr;\n        struct in6_addr ip6_addr;\n    };\n};\n\nstatic bool try_ipset_cmd(struct ipset_session *session, enum ipset_cmd cmd,\n\t\t        const char *setname, int family, const void *addr)\n{\n    ipset_session_data_set(session, IPSET_SETNAME, setname);\n    if (!ipset_type_get(session, cmd)) {\n\t        fprintf(stderr, \"Cannot find ipset %s: %s\\n\", setname,\n\t\t\t\t\t                ipset_session_error(session));\n\t        return false;\n\t    }\n    ipset_session_data_set(session, IPSET_OPT_FAMILY, &family);\n    ipset_session_data_set(session, IPSET_OPT_IP, addr);\n\n    if (ipset_cmd(session, cmd, /*lineno*/ 0)) {\n\t        fprintf(stderr, \"Failed to add to set %s: %s\\n\", setname,\n\t\t\t\t\t                ipset_session_error(session));\n\t        return false;\n\t    }\n    return true;\n}\n\nstatic bool try_ipset_create(struct ipset_session *session, const char *setname,\n\t\t        const char *typename, int family)\n{\n    const struct ipset_type *type;\n    uint32_t timeout;\n\n    ipset_session_data_set(session, IPSET_SETNAME, setname);\n    ipset_session_data_set(session, IPSET_OPT_TYPENAME, typename);\n    type = ipset_type_get(session, IPSET_CMD_CREATE);\n    if (type == NULL) {\n\t        fprintf(stderr, \"Cannot find ipset type %s: %s\\n\", typename,\n\t\t\t\t\t                ipset_session_error(session));\n\t        return false;\n\t    }\n\n    timeout = 0; /* timeout support, but default to infinity */\n    ipset_session_data_set(session, IPSET_OPT_TIMEOUT, &timeout);\n    ipset_session_data_set(session, IPSET_OPT_TYPE, type);\n    ipset_session_data_set(session, IPSET_OPT_FAMILY, &family);\n\n    if (ipset_cmd(session, IPSET_CMD_CREATE, /*lineno*/ 0)) {\n\t        fprintf(stderr, \"Failed to create ipset %s: %s\\n\", setname,\n\t\t\t\t\t                ipset_session_error(session));\n\t        return false;\n\t    }\n    return true;\n}\n\nstruct ipset_state *ipset_init(void)\n{\n    struct ipset_state *state;\n\n    state = malloc(sizeof(*state));\n    if (!state)\n        return NULL;\n\n    ipset_load_types();\n\n    state->session = ipset_session_init(printf);\n    if (!state->session) {\n\t        fprintf(stderr, \"Cannot initialize ipset session.\\n\");\n\t        goto err_session;\n\t    }\n\n    /* Return success on attempts to create a compatible ipset or attempts to\n\t *      * add an existing rule. */\n    ipset_envopt_parse(state->session, IPSET_ENV_EXIST, NULL);\n\n    if (!try_ipset_create(state->session, SETNAME_IPV4, \"hash:ip\", NFPROTO_IPV4))\n        goto err_set;\n    if (!try_ipset_create(state->session, SETNAME_IPV6, \"hash:ip\", NFPROTO_IPV6))\n        goto err_set;\n\n    return state;\n\nerr_set:\nerr_session:\n    ipset_session_fini(state->session);\n    free(state);\n    return NULL;\n}\n\nvoid ipset_add_ip(struct ipset_state *state, struct address *addr)\n{\n    struct ipset_session *session = state->session;\n\n    switch (addr->family) {\n\t    case AF_INET:\n\t        try_ipset_cmd(session, IPSET_CMD_ADD, SETNAME_IPV4, NFPROTO_IPV4, &addr->ip4_addr);\n\t        break;\n\t    case AF_INET6:\n\t        try_ipset_cmd(session, IPSET_CMD_ADD, SETNAME_IPV6, NFPROTO_IPV6, &addr->ip6_addr);\n\t        break;\n\t    default:\n\t        fprintf(stderr, \"Unrecognized address family 0x%04x\\n\", addr->family);\n\t        return;\n\t    }\n    ipset_session_report_reset(session);\n}\n\nvoid ipset_fini(struct ipset_state *state)\n{\n    ipset_session_fini(state->session);\n    free(state);\n}\n\n\n//for test\nint main(){\n    struct address addr;\n    addr.family = AF_INET;\n    inet_aton(\"192.168.1.10\", &addr.ip4_addr);\n    struct ipset_state *state = ipset_init();\n    ipset_add_ip(state, &addr);\n    ipset_fini(state);\n\treturn 0;\n}\n\n```\n**编译**(根据各自的环境调整)：\n``` shell\ngcc -g -O2 -Wall -Werror -c ipset_test.c -o ipset_test.o\ngcc -g -O2 -Wall -Werror ./ipset_test.o -o a.out -L/usr/lib64/ -lipset\n```\n#### GO\ngo有三种方式来调用ipset，第一种是用执行命令的方式，第二种是使用cgo的方式，第三种是使用netlink通信的方式。这里简单给下第二种和第三种的demo：\n**cgo：**\nipset.go:\n``` go\npackage main\n\n// #cgo LDFLAGS: -L${SRCDIR}/ -Wl,-rpath,${SRCDIR}/ -lcipset -L/usr/lib64/  -lipset\n// #include <stdlib.h>\n// #include \"cipset.h\"\nimport (\n\t\"C\"\n)\nimport \"unsafe\"\n\nfunc main() {\n\tcip := C.CString(\"10.92.2.100\")\n\tdefer C.free(unsafe.Pointer(cip))\n\tvar caddr C.struct_address\n\tC.ip2addr(cip, &caddr)\n\t//caddr.family = C.AF_INET\n\t//C.inet_aton(cip, caddr.ip4_addr)\n\tvar cstate *C.struct_ipset_state = C.ipset_init()\n\tC.ipset_add_ip(cstate, &caddr)\n\tC.ipset_fini(cstate)\n}\n```\ncipset.h\n``` c\n#ifndef __cipset\n#define __cipset\n\n/* Setname X which can be used in \"ipset list X\". */\n#define SETNAME_IPV4 \"ipset-ipv4\"\n#define SETNAME_IPV6 \"ipset-ipv6\"\n\nstruct ipset_state;\nstruct address;\n\nstruct ipset_state *ipset_init(void);\nvoid ipset_add_ip(struct ipset_state *state, struct address *addr);\nvoid ipset_fini(struct ipset_state *state);\nvoid ip2addr(char *ip, struct address *addr);\n\n#endif\n```\ncipset.c 和上面的C第二种示例代码一致，这里就不占空间了。\n\n**编译执行：**\n```\ngcc -g -O2 -Wall -Werror -rdynamic -fPIC -shared -o ./libcipset.so ./cipset.c  #动态库生成\ngo run ipset.go  #执行go程序\n```\n**go-netlink**([主要参考](https://github.com/nadoo/glider/blob/master/ipset/ipset_linux.go))\n```go\n// Apache License 2.0\n// @mdlayher https://github.com/mdlayher/netlink\n// Ref: https://github.com/vishvananda/netlink/blob/master/nl/nl_linux.go\n\npackage ipset\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"net\"\n\t\"strings\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"syscall\"\n\t\"unsafe\"\n\n\t\"github.com/nadoo/glider/common/log\"\n\t\"github.com/nadoo/glider/rule\"\n)\n\n// NFNL_SUBSYS_IPSET netfilter netlink message types\n// https://github.com/torvalds/linux/blob/9e66317d3c92ddaab330c125dfe9d06eee268aff/include/uapi/linux/netfilter/nfnetlink.h#L56\nconst NFNL_SUBSYS_IPSET = 6\n\n// IPSET_PROTOCOL The protocol version\n// http://git.netfilter.org/ipset/tree/include/libipset/linux_ip_set.h\nconst IPSET_PROTOCOL = 6\n\n// IPSET_MAXNAMELEN The max length of strings including NUL: set and type identifiers\nconst IPSET_MAXNAMELEN = 32\n\n// Message types and commands\nconst (\n\tIPSET_CMD_CREATE = 2\n\tIPSET_CMD_FLUSH  = 4\n\tIPSET_CMD_ADD    = 9\n\tIPSET_CMD_DEL    = 10\n)\n\n// Attributes at command level\nconst (\n\tIPSET_ATTR_PROTOCOL = 1 /* 1: Protocol version */\n\tIPSET_ATTR_SETNAME  = 2 /* 2: Name of the set */\n\tIPSET_ATTR_TYPENAME = 3 /* 3: Typename */\n\tIPSET_ATTR_REVISION = 4 /* 4: Settype revision */\n\tIPSET_ATTR_FAMILY   = 5 /* 5: Settype family */\n\tIPSET_ATTR_DATA     = 7 /* 7: Nested attributes */\n)\n\n// CADT specific attributes\nconst (\n\tIPSET_ATTR_IP   = 1\n\tIPSET_ATTR_CIDR = 3\n)\n\n// IP specific attributes\nconst (\n\tIPSET_ATTR_IPADDR_IPV4 = 1\n\tIPSET_ATTR_IPADDR_IPV6 = 2\n)\n\n// ATTR flags\nconst (\n\tNLA_F_NESTED        = (1 << 15)\n\tNLA_F_NET_BYTEORDER = (1 << 14)\n)\n\nvar nextSeqNr uint32\nvar nativeEndian binary.ByteOrder\n\n// Manager struct\ntype Manager struct {\n\tfd  int\n\tlsa syscall.SockaddrNetlink\n\n\tdomainSet sync.Map\n}\n\n// NewManager returns a Manager\nfunc NewManager(rules []*rule.Config) (*Manager, error) {\n\tfd, err := syscall.Socket(syscall.AF_NETLINK, syscall.SOCK_RAW, syscall.NETLINK_NETFILTER)\n\tif err != nil {\n\t\tlog.F(\"%s\", err)\n\t\treturn nil, err\n\t}\n\t// defer syscall.Close(fd)\n\n\tlsa := syscall.SockaddrNetlink{\n\t\tFamily: syscall.AF_NETLINK,\n\t}\n\n\terr = syscall.Bind(fd, &lsa)\n\tif err != nil {\n\t\tlog.F(\"%s\", err)\n\t\treturn nil, err\n\t}\n\n\tm := &Manager{fd: fd, lsa: lsa}\n\n\t// create ipset\n\tfor _, r := range rules {\n\t\tif r.IPSet != \"\" {\n\t\t\tCreateSet(fd, lsa, r.IPSet)\n\t\t}\n\t}\n\n\t// init ipset\n\tfor _, r := range rules {\n\t\tif r.IPSet != \"\" {\n\t\t\tfor _, domain := range r.Domain {\n\t\t\t\tm.domainSet.Store(domain, r.IPSet)\n\t\t\t}\n\t\t\tfor _, ip := range r.IP {\n\t\t\t\tAddToSet(fd, lsa, r.IPSet, ip)\n\t\t\t}\n\t\t\tfor _, cidr := range r.CIDR {\n\t\t\t\tAddToSet(fd, lsa, r.IPSet, cidr)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn m, nil\n}\n\n// AddDomainIP implements the DNSAnswerHandler function, used to update ipset according to domainSet rule\nfunc (m *Manager) AddDomainIP(domain, ip string) error {\n\tif domain == \"\" || ip == \"\" {\n\t\treturn errors.New(\"please specify the domain and ip address\")\n\t}\n\n\tdomainParts := strings.Split(domain, \".\")\n\tlength := len(domainParts)\n\tfor i := length - 1; i >= 0; i-- {\n\t\tdomain := strings.Join(domainParts[i:length], \".\")\n\n\t\t// find in domainMap\n\t\tif ipset, ok := m.domainSet.Load(domain); ok {\n\t\t\tAddToSet(m.fd, m.lsa, ipset.(string), ip)\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// CreateSet create a ipset\nfunc CreateSet(fd int, lsa syscall.SockaddrNetlink, setName string) {\n\tif setName == \"\" {\n\t\treturn\n\t}\n\n\tif len(setName) > IPSET_MAXNAMELEN {\n\t\tlog.Fatal(\"ipset: name too long\")\n\t}\n\n\tlog.F(\"ipset create %s hash:net\", setName)\n\n\treq := NewNetlinkRequest(IPSET_CMD_CREATE|(NFNL_SUBSYS_IPSET<<8), syscall.NLM_F_REQUEST)\n\n\t// TODO: support AF_INET6\n\treq.AddData(NewNfGenMsg(syscall.AF_INET, 0, 0))\n\treq.AddData(NewRtAttr(IPSET_ATTR_PROTOCOL, Uint8Attr(IPSET_PROTOCOL)))\n\treq.AddData(NewRtAttr(IPSET_ATTR_SETNAME, ZeroTerminated(setName)))\n\treq.AddData(NewRtAttr(IPSET_ATTR_TYPENAME, ZeroTerminated(\"hash:net\")))\n\treq.AddData(NewRtAttr(IPSET_ATTR_REVISION, Uint8Attr(1)))\n\treq.AddData(NewRtAttr(IPSET_ATTR_FAMILY, Uint8Attr(2)))\n\treq.AddData(NewRtAttr(IPSET_ATTR_DATA|NLA_F_NESTED, nil))\n\n\terr := syscall.Sendto(fd, req.Serialize(), 0, &lsa)\n\tif err != nil {\n\t\tlog.F(\"%s\", err)\n\t}\n\n\tFlushSet(fd, lsa, setName)\n}\n\n// FlushSet flush a ipset\nfunc FlushSet(fd int, lsa syscall.SockaddrNetlink, setName string) {\n\tlog.F(\"ipset flush %s\", setName)\n\n\treq := NewNetlinkRequest(IPSET_CMD_FLUSH|(NFNL_SUBSYS_IPSET<<8), syscall.NLM_F_REQUEST)\n\n\t// TODO: support AF_INET6\n\treq.AddData(NewNfGenMsg(syscall.AF_INET, 0, 0))\n\treq.AddData(NewRtAttr(IPSET_ATTR_PROTOCOL, Uint8Attr(IPSET_PROTOCOL)))\n\treq.AddData(NewRtAttr(IPSET_ATTR_SETNAME, ZeroTerminated(setName)))\n\n\terr := syscall.Sendto(fd, req.Serialize(), 0, &lsa)\n\tif err != nil {\n\t\tlog.F(\"%s\", err)\n\t}\n\n}\n\n// AddToSet adds an entry to ipset\nfunc AddToSet(fd int, lsa syscall.SockaddrNetlink, setName, entry string) {\n\tif setName == \"\" {\n\t\treturn\n\t}\n\n\tif len(setName) > IPSET_MAXNAMELEN {\n\t\tlog.F(\"ipset: name too long\")\n\t}\n\n\tlog.F(\"ipset add %s %s\", setName, entry)\n\n\tvar ip net.IP\n\tvar cidr *net.IPNet\n\n\tip, cidr, err := net.ParseCIDR(entry)\n\tif err != nil {\n\t\tip = net.ParseIP(entry)\n\t}\n\n\tif ip == nil {\n\t\tlog.F(\"ipset: parse %s error\", entry)\n\t\treturn\n\t}\n\n\treq := NewNetlinkRequest(IPSET_CMD_ADD|(NFNL_SUBSYS_IPSET<<8), syscall.NLM_F_REQUEST)\n\n\t// TODO: support AF_INET6\n\treq.AddData(NewNfGenMsg(syscall.AF_INET, 0, 0))\n\treq.AddData(NewRtAttr(IPSET_ATTR_PROTOCOL, Uint8Attr(IPSET_PROTOCOL)))\n\treq.AddData(NewRtAttr(IPSET_ATTR_SETNAME, ZeroTerminated(setName)))\n\n\tattrNested := NewRtAttr(IPSET_ATTR_DATA|NLA_F_NESTED, nil)\n\tattrIP := NewRtAttrChild(attrNested, IPSET_ATTR_IP|NLA_F_NESTED, nil)\n\n\t// TODO: support ipV6\n\tNewRtAttrChild(attrIP, IPSET_ATTR_IPADDR_IPV4|NLA_F_NET_BYTEORDER, ip.To4())\n\n\t// for cidr prefix\n\tif cidr != nil {\n\t\tcidrPrefix, _ := cidr.Mask.Size()\n\t\tNewRtAttrChild(attrNested, IPSET_ATTR_CIDR, Uint8Attr(uint8(cidrPrefix)))\n\t}\n\n\tNewRtAttrChild(attrNested, 9|NLA_F_NET_BYTEORDER, Uint32Attr(0))\n\treq.AddData(attrNested)\n\n\terr = syscall.Sendto(fd, req.Serialize(), 0, &lsa)\n\tif err != nil {\n\t\tlog.F(\"%s\", err)\n\t}\n}\n\n// NativeEndian get native endianness for the system\nfunc NativeEndian() binary.ByteOrder {\n\tif nativeEndian == nil {\n\t\tvar x uint32 = 0x01020304\n\t\tif *(*byte)(unsafe.Pointer(&x)) == 0x01 {\n\t\t\tnativeEndian = binary.BigEndian\n\t\t} else {\n\t\t\tnativeEndian = binary.LittleEndian\n\t\t}\n\t}\n\treturn nativeEndian\n}\n\nfunc rtaAlignOf(attrlen int) int {\n\treturn (attrlen + syscall.RTA_ALIGNTO - 1) & ^(syscall.RTA_ALIGNTO - 1)\n}\n\n// NetlinkRequestData .\ntype NetlinkRequestData interface {\n\tLen() int\n\tSerialize() []byte\n}\n\n// NfGenMsg .\ntype NfGenMsg struct {\n\tnfgenFamily uint8\n\tversion     uint8\n\tresID       uint16\n}\n\n// NewNfGenMsg .\nfunc NewNfGenMsg(nfgenFamily, version, resID int) *NfGenMsg {\n\treturn &NfGenMsg{\n\t\tnfgenFamily: uint8(nfgenFamily),\n\t\tversion:     uint8(version),\n\t\tresID:       uint16(resID),\n\t}\n}\n\n// Len .\nfunc (m *NfGenMsg) Len() int {\n\treturn rtaAlignOf(4)\n}\n\n// Serialize .\nfunc (m *NfGenMsg) Serialize() []byte {\n\tnative := NativeEndian()\n\n\tlength := m.Len()\n\tbuf := make([]byte, rtaAlignOf(length))\n\tbuf[0] = m.nfgenFamily\n\tbuf[1] = m.version\n\tnative.PutUint16(buf[2:4], m.resID)\n\treturn buf\n}\n\n// RtAttr Extend RtAttr to handle data and children\ntype RtAttr struct {\n\tsyscall.RtAttr\n\tData     []byte\n\tchildren []NetlinkRequestData\n}\n\n// NewRtAttr Create a new Extended RtAttr object\nfunc NewRtAttr(attrType int, data []byte) *RtAttr {\n\treturn &RtAttr{\n\t\tRtAttr: syscall.RtAttr{\n\t\t\tType: uint16(attrType),\n\t\t},\n\t\tchildren: []NetlinkRequestData{},\n\t\tData:     data,\n\t}\n}\n\n// NewRtAttrChild Create a new RtAttr obj anc add it as a child of an existing object\nfunc NewRtAttrChild(parent *RtAttr, attrType int, data []byte) *RtAttr {\n\tattr := NewRtAttr(attrType, data)\n\tparent.children = append(parent.children, attr)\n\treturn attr\n}\n\n// Len .\nfunc (a *RtAttr) Len() int {\n\tif len(a.children) == 0 {\n\t\treturn (syscall.SizeofRtAttr + len(a.Data))\n\t}\n\n\tl := 0\n\tfor _, child := range a.children {\n\t\tl += rtaAlignOf(child.Len())\n\t}\n\tl += syscall.SizeofRtAttr\n\treturn rtaAlignOf(l + len(a.Data))\n}\n\n// Serialize the RtAttr into a byte array\n// This can't just unsafe.cast because it must iterate through children.\nfunc (a *RtAttr) Serialize() []byte {\n\tnative := NativeEndian()\n\n\tlength := a.Len()\n\tbuf := make([]byte, rtaAlignOf(length))\n\n\tnext := 4\n\tif a.Data != nil {\n\t\tcopy(buf[next:], a.Data)\n\t\tnext += rtaAlignOf(len(a.Data))\n\t}\n\tif len(a.children) > 0 {\n\t\tfor _, child := range a.children {\n\t\t\tchildBuf := child.Serialize()\n\t\t\tcopy(buf[next:], childBuf)\n\t\t\tnext += rtaAlignOf(len(childBuf))\n\t\t}\n\t}\n\n\tif l := uint16(length); l != 0 {\n\t\tnative.PutUint16(buf[0:2], l)\n\t}\n\tnative.PutUint16(buf[2:4], a.Type)\n\treturn buf\n}\n\n// NetlinkRequest .\ntype NetlinkRequest struct {\n\tsyscall.NlMsghdr\n\tData    []NetlinkRequestData\n\tRawData []byte\n}\n\n// NewNetlinkRequest create a new netlink request from proto and flags\n// Note the Len value will be inaccurate once data is added until\n// the message is serialized\nfunc NewNetlinkRequest(proto, flags int) *NetlinkRequest {\n\treturn &NetlinkRequest{\n\t\tNlMsghdr: syscall.NlMsghdr{\n\t\t\tLen:   uint32(syscall.SizeofNlMsghdr),\n\t\t\tType:  uint16(proto),\n\t\t\tFlags: syscall.NLM_F_REQUEST | uint16(flags),\n\t\t\tSeq:   atomic.AddUint32(&nextSeqNr, 1),\n\t\t\t// Pid:   uint32(os.Getpid()),\n\t\t},\n\t}\n}\n\n// Serialize the Netlink Request into a byte array\nfunc (req *NetlinkRequest) Serialize() []byte {\n\tlength := syscall.SizeofNlMsghdr\n\tdataBytes := make([][]byte, len(req.Data))\n\tfor i, data := range req.Data {\n\t\tdataBytes[i] = data.Serialize()\n\t\tlength = length + len(dataBytes[i])\n\t}\n\tlength += len(req.RawData)\n\n\treq.Len = uint32(length)\n\tb := make([]byte, length)\n\thdr := (*(*[syscall.SizeofNlMsghdr]byte)(unsafe.Pointer(req)))[:]\n\tnext := syscall.SizeofNlMsghdr\n\tcopy(b[0:next], hdr)\n\tfor _, data := range dataBytes {\n\t\tfor _, dataByte := range data {\n\t\t\tb[next] = dataByte\n\t\t\tnext = next + 1\n\t\t}\n\t}\n\t// Add the raw data if any\n\tif len(req.RawData) > 0 {\n\t\tcopy(b[next:length], req.RawData)\n\t}\n\treturn b\n}\n\n// AddData add data to request\nfunc (req *NetlinkRequest) AddData(data NetlinkRequestData) {\n\tif data != nil {\n\t\treq.Data = append(req.Data, data)\n\t}\n}\n\n// AddRawData adds raw bytes to the end of the NetlinkRequest object during serialization\nfunc (req *NetlinkRequest) AddRawData(data []byte) {\n\tif data != nil {\n\t\treq.RawData = append(req.RawData, data...)\n\t}\n}\n\n// Uint8Attr .\nfunc Uint8Attr(v uint8) []byte {\n\treturn []byte{byte(v)}\n}\n\n// Uint16Attr .\nfunc Uint16Attr(v uint16) []byte {\n\tnative := NativeEndian()\n\tbytes := make([]byte, 2)\n\tnative.PutUint16(bytes, v)\n\treturn bytes\n}\n\n// Uint32Attr .\nfunc Uint32Attr(v uint32) []byte {\n\tnative := NativeEndian()\n\tbytes := make([]byte, 4)\n\tnative.PutUint32(bytes, v)\n\treturn bytes\n}\n\n// ZeroTerminated .\nfunc ZeroTerminated(s string) []byte {\n\tbytes := make([]byte, len(s)+1)\n\tfor i := 0; i < len(s); i++ {\n\t\tbytes[i] = s[i]\n\t}\n\tbytes[len(s)] = 0\n\treturn bytes\n}\n\n// NonZeroTerminated .\nfunc NonZeroTerminated(s string) []byte {\n\tbytes := make([]byte, len(s))\n\tfor i := 0; i < len(s); i++ {\n\t\tbytes[i] = s[i]\n\t}\n\treturn bytes\n}\n\n// BytesToString .\nfunc BytesToString(b []byte) string {\n\tn := bytes.Index(b, []byte{0})\n\treturn string(b[:n])\n}\n```\ngo的代码，我自己改的已经完善了常用命令，以及接收内核反馈消息等。由于我修改的代码做了模块划分，涉及的文件比较多，这里就列出参考的源代码吧，想看更多的去参考的链接。反正这个源码也是参考libipset写的。(๑`･ᴗ･´๑)\n\n\n以上，如果有什么问题，欢迎随时交流。-(￢∀￢)σ","slug":"libipset源码分析","published":1,"updated":"2020-09-13T01:39:25.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insm000kh9uoqzb8evk9","content":"<p>由于语言需求，需要使用go实现libipset的功能，与内核通信，就简单的看了一下源码(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em><a href=\"http://ipset.netfilter.org/\" target=\"_blank\" rel=\"noopener\">ipset官网</a></em><br><em><a href=\"http://ipset.netfilter.org/libipset.man.html\" target=\"_blank\" rel=\"noopener\">libipset手册</a></em><br><em><a href=\"https://netfilter.org/projects/libmnl/\" target=\"_blank\" rel=\"noopener\">libmnl</a></em></p>\n<p><em>本文主要根据ipset 7.x版本来进行介绍的。</em></p>\n<a id=\"more\"></a>\n\n<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>ipset是 Linux 防火墙 iptables 的一个协助工具。 通过这个工具可以轻松愉快地屏蔽一组IP地址。–<a href=\"https://wiki.archlinux.org/index.php/Ipset_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\" target=\"_blank\" rel=\"noopener\">来自wiki</a><br>ipset主要解决的是iptables在屏蔽大量ip产生的效率低下问题。搞一张图看看效率差距：<br><img src=\"/2020/05/06/libipset源码分析/iptables-nfhipac-ipset.jpg\" alt=\"iptables和ipset性能对比\"><br>–<a href=\"http://people.netfilter.org/kadlec/nftest.pdf\" target=\"_blank\" rel=\"noopener\">测评来源</a><br>并且，iptables在进行规则插入和删除的时候，也只能一条条的进行，速度也是非常慢的。我自己在自己的设备上测试效果如下(time + 脚本测试的)：<br>| 添加Iptables数量 | 1    | 500    | 1000 |    2000 |    4000    | 10000 |<br>| ————- | ————- | ————- | ————- |———— | ————- | ————- | ————- |<br>| 花费时间 |0.002s    |2.831s    |4.115s|    10.725s    |33.365s|    2m55.954s|<br><strong>那么</strong>，如果你有需求使用iptables屏蔽大量的ip，就可以考虑使用ipset。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>看源码之前，首先需要了解ipset有什么用，简单给个示例来屏蔽一个ip：<br>你要有两台机器，可以是自己的虚拟机，在一台机器上配置ipset + iptables，另外一台机器去ping测试。<br>安装(centos)：<code>yum install ipset</code></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipset create hash_test hash:ip #创建一个集合</span><br><span class=\"line\">ipset add hash_test 192.168.1.120 #添加一个成员到集合</span><br><span class=\"line\">iptables -I INPUT -m set --match-set hash_test src -j DROP  #iptables配置匹配项</span><br></pre></td></tr></tbody></table></figure>\n\n<p>你也可以进行更多的尝试，参见<a href=\"http://ipset.netfilter.org/\" target=\"_blank\" rel=\"noopener\">官网</a><br>ipset的使用不是本文主要目的，简单给个示例就行了。</p>\n<h3 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h3><p>libipset属于用户态部分的代码，负责与内核通信，真正的ipset工作的地方是在内核的netfilter中。<br>我们就根据上面<code>ipset create hash_test hash:ip</code>命令来分析大概的流程。<br><img src=\"/2020/05/06/libipset源码分析/ipset_source_flow.png\" alt=\"libipset流程图\"><br>特殊说明在流程图里都有备注，顺便说明一下几个固定列表的位置：</p>\n<ul>\n<li>各种类型的类型列表，包含所支持的命令，以及需要的参数：ipset_<type_name>.c<br><img src=\"/2020/05/06/libipset源码分析/haship.jpg\" alt=\"haship\"></type_name></li>\n<li>错误码：errcode.c<br><img src=\"/2020/05/06/libipset源码分析/errcode.jpg\" alt=\"errcode\"></li>\n<li>输入命令参数列表(主要是-s这种类型的参数)：ipset.c<br><img src=\"/2020/05/06/libipset源码分析/ipset.jpg\" alt=\"ipset\"></li>\n<li>输入命令参数列表(主要是add这种类型的参数)：args.c<br><img src=\"/2020/05/06/libipset源码分析/args.jpg\" alt=\"args\"></li>\n<li>某个命令的消息协议：PROTOCOL<br><img src=\"/2020/05/06/libipset源码分析/protocol.jpg\" alt=\"protocol\"></li>\n</ul>\n<h3 id=\"消息格式\"><a href=\"#消息格式\" class=\"headerlink\" title=\"消息格式\"></a>消息格式</h3><p>ipset使用的消息是Netlink通信，在ipset用户态构造的sock参数：AF_NETLINK，SOCK_RAW，NETLINK_NETFILTER，sock具体用法自己去查。ipset用户态构造的sock需要进行bind才能使用，因为它不能像udp这种自动分配发送端的端口。<br>首先来看看netlink的消息格式(<a href=\"https://www.cnblogs.com/wenqiang/p/6306727.html\" target=\"_blank\" rel=\"noopener\">主要参考</a>)：<br><code>struct sockaddr_nl</code>结构:</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_nl</span> {</span></span><br><span class=\"line\">     <span class=\"keyword\">__kernel_sa_family_t</span>    nl_family;  <span class=\"comment\">/* AF_NETLINK （跟AF_INET对应）*/</span></span><br><span class=\"line\">     <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>  nl_pad;     <span class=\"comment\">/* zero */</span></span><br><span class=\"line\">     __u32       nl_pid;     <span class=\"comment\">/* port ID  （通信端口号）*/</span></span><br><span class=\"line\">     __u32       nl_groups;  <span class=\"comment\">/* multicast groups mask */</span></span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>struct nlmsghd</code> 结构：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* struct nlmsghd 是netlink消息头*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlmsghdr</span> {</span>   </span><br><span class=\"line\">    __u32       nlmsg_len;  <span class=\"comment\">/* Length of message including header */</span></span><br><span class=\"line\">    __u16       nlmsg_type; <span class=\"comment\">/* Message content */</span></span><br><span class=\"line\">    __u16       nlmsg_flags;    <span class=\"comment\">/* Additional flags */</span> </span><br><span class=\"line\">    __u32       nlmsg_seq;  <span class=\"comment\">/* Sequence number */</span></span><br><span class=\"line\">    __u32       nlmsg_pid;  <span class=\"comment\">/* Sending process port ID */</span></span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>通常这个头消息的构造，在ipset中是下面的代码(其中seq是一个自增检验数，pid通常设置0)：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">ipset_mnl_fill_hdr(struct ipset_handle *handle, <span class=\"keyword\">enum</span> ipset_cmd cmd,</span><br><span class=\"line\">\t\t   <span class=\"keyword\">void</span> *buffer, <span class=\"keyword\">size_t</span> len UNUSED, <span class=\"keyword\">uint8_t</span> envflags)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlmsghdr</span> *<span class=\"title\">nlh</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nfgenmsg</span> *<span class=\"title\">nfg</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tassert(handle);</span><br><span class=\"line\">\tassert(buffer);</span><br><span class=\"line\">\tassert(cmd &gt; IPSET_CMD_NONE &amp;&amp; cmd &lt; IPSET_MSG_MAX);</span><br><span class=\"line\"></span><br><span class=\"line\">\tnlh = mnl_nlmsg_put_header(buffer);</span><br><span class=\"line\">\tnlh-&gt;nlmsg_type = cmd | (NFNL_SUBSYS_IPSET &lt;&lt; <span class=\"number\">8</span>);</span><br><span class=\"line\">\tnlh-&gt;nlmsg_flags = cmdflags[cmd - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (envflags &amp; IPSET_ENV_EXIST)</span><br><span class=\"line\">\t\tnlh-&gt;nlmsg_flags &amp;=  ~NLM_F_EXCL;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这儿是扩展头，通常是固定的\\x02\\x00\\x00\\x00</span></span><br><span class=\"line\">\tnfg = mnl_nlmsg_put_extra_header(nlh, <span class=\"keyword\">sizeof</span>(struct nfgenmsg));</span><br><span class=\"line\">\tnfg-&gt;nfgen_family = AF_INET;</span><br><span class=\"line\">\tnfg-&gt;version = NFNETLINK_V0;</span><br><span class=\"line\">\tnfg-&gt;res_id = htons(<span class=\"number\">0</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>struct msghdr</code> 结构:</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span> {</span>                    <span class=\"comment\">/* Scatter/gather array items */</span></span><br><span class=\"line\">     <span class=\"keyword\">void</span>  *iov_base;              <span class=\"comment\">/* Starting address */</span></span><br><span class=\"line\">     <span class=\"keyword\">size_t</span> iov_len;               <span class=\"comment\">/* Number of bytes to transfer */</span></span><br><span class=\"line\"> };</span><br><span class=\"line\">  <span class=\"comment\">/* iov_base: iov_base指向数据包缓冲区，即参数buff，iov_len是buff的长度。msghdr中允许一次传递多个buff，</span></span><br><span class=\"line\"><span class=\"comment\">    以数组的形式组织在 msg_iov中，msg_iovlen就记录数组的长度 （即有多少个buff）</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msghdr</span> {</span></span><br><span class=\"line\">     <span class=\"keyword\">void</span>         *msg_name;       <span class=\"comment\">/* optional address */</span></span><br><span class=\"line\">     <span class=\"keyword\">socklen_t</span>     msg_namelen;    <span class=\"comment\">/* size of address */</span></span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span> *<span class=\"title\">msg_iov</span>;</span>        <span class=\"comment\">/* scatter/gather array */</span></span><br><span class=\"line\">     <span class=\"keyword\">size_t</span>        msg_iovlen;     <span class=\"comment\">/* # elements in msg_iov */</span></span><br><span class=\"line\">     <span class=\"keyword\">void</span>         *msg_control;    <span class=\"comment\">/* ancillary data, see below */</span></span><br><span class=\"line\">     <span class=\"keyword\">size_t</span>        msg_controllen; <span class=\"comment\">/* ancillary data buffer len */</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span>           msg_flags;      <span class=\"comment\">/* flags on received message */</span></span><br><span class=\"line\"> };</span><br><span class=\"line\"> <span class=\"comment\">/* msg_name： 数据的目的地址，网络包指向sockaddr_in, netlink则指向sockaddr_nl;</span></span><br><span class=\"line\"><span class=\"comment\">    msg_namelen: msg_name 所代表的地址长度</span></span><br><span class=\"line\"><span class=\"comment\">    msg_iov: 指向的是缓冲区数组</span></span><br><span class=\"line\"><span class=\"comment\">    msg_iovlen: 缓冲区数组长度</span></span><br><span class=\"line\"><span class=\"comment\">    msg_control: 辅助数据，控制信息(发送任何的控制信息)</span></span><br><span class=\"line\"><span class=\"comment\">    msg_controllen: 辅助信息长度</span></span><br><span class=\"line\"><span class=\"comment\">    msg_flags: 消息标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>这个结构体主要在ipset接收消息的时候使用。具体代码包含在libmnl库中，需要<a href=\"https://netfilter.org/projects/libmnl/downloads.html\" target=\"_blank\" rel=\"noopener\">下载源码</a>。然后就可以看到以下的接收消息的函数：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ssize_t</span> mnl_socket_recvfrom(<span class=\"keyword\">const</span> struct mnl_socket *nl, <span class=\"keyword\">void</span> *buf,</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">size_t</span> bufsiz)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"keyword\">ssize_t</span> ret;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_nl</span> <span class=\"title\">addr</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span> <span class=\"title\">iov</span> = {</span></span><br><span class=\"line\">\t\t.iov_base\t= buf,</span><br><span class=\"line\">\t\t.iov_len\t= bufsiz,</span><br><span class=\"line\">\t};</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msghdr</span> <span class=\"title\">msg</span> = {</span></span><br><span class=\"line\">\t\t.msg_name\t= &amp;addr,</span><br><span class=\"line\">\t\t.msg_namelen\t= <span class=\"keyword\">sizeof</span>(struct sockaddr_nl),</span><br><span class=\"line\">\t\t.msg_iov\t= &amp;iov,</span><br><span class=\"line\">\t\t.msg_iovlen\t= <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t.msg_control\t= <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t.msg_controllen\t= <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t.msg_flags\t= <span class=\"number\">0</span>,</span><br><span class=\"line\">\t};</span><br><span class=\"line\">\tret = recvmsg(nl-&gt;fd, &amp;msg, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (msg.msg_flags &amp; MSG_TRUNC) {</span><br><span class=\"line\">\t\terrno = ENOSPC;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (msg.msg_namelen != <span class=\"keyword\">sizeof</span>(struct sockaddr_nl)) {</span><br><span class=\"line\">\t\terrno = EINVAL;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上述的netlink消息数据结构，也就是ipset里使用的主要结构，而这些消息结构的关系如下：<br><img src=\"/2020/05/06/libipset源码分析/netlink%E6%95%B0%E6%8D%AE%E5%85%B3%E7%B3%BB.png\" alt=\"netlink数据结构之间的关系\"><br><em><a href=\"https://blog.csdn.net/zhao_h/article/details/80943226\" target=\"_blank\" rel=\"noopener\">图片来源</a></em><br>上述示例的就是ipset中使用到的主要消息结构了，更多细节，还是在源码中查看。</p>\n<h3 id=\"示例Demo\"><a href=\"#示例Demo\" class=\"headerlink\" title=\"示例Demo\"></a>示例Demo</h3><p>这里我们列出两个语言的demo，C和Go的。</p>\n<h4 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h4><p>c的相对简单，因为只需要调用libipset提供的接口就行。这里推荐写法和官方的ipset的main函数写法一致。<br><strong>官方main函数</strong>(这个函数只有在ipset 7版本中才有)</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;\t\t\t/* assert */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;\t\t\t/* fprintf */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;\t\t\t/* exit */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;config.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;libipset/ipset.h&gt;\t\t/* ipset library */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset</span> *<span class=\"title\">ipset</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Load set types */</span></span><br><span class=\"line\">\tipset_load_types();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Initialize ipset library */</span></span><br><span class=\"line\">\tipset = ipset_init();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ipset == <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Cannot initialize ipset, aborting.\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = ipset_parse_argv(ipset, argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">\tipset_fini(ipset);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>是不是简单到爆。<br><strong>第二种</strong>，是使用libipset中的session结构体(<a href=\"https://github.com/Lekensteyn/dnsallow/blob/master/ipset.c\" target=\"_blank\" rel=\"noopener\">参考来源</a>)：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdbool.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;libipset/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;libipset/session.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;libipset/data.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;   </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Setname X which can be used in \"ipset list X\". */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SETNAME_IPV4 <span class=\"meta-string\">\"ipset-ipv4\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SETNAME_IPV6 <span class=\"meta-string\">\"ipset-ipv6\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_state</span> {</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_session</span> *<span class=\"title\">session</span>;</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">address</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> family;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> {</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">ip4_addr</span>;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in6_addr</span> <span class=\"title\">ip6_addr</span>;</span></span><br><span class=\"line\">    };</span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">try_ipset_cmd</span><span class=\"params\">(struct ipset_session *session, <span class=\"keyword\">enum</span> ipset_cmd cmd,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *setname, <span class=\"keyword\">int</span> family, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *addr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_SETNAME, setname);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ipset_type_get(session, cmd)) {</span><br><span class=\"line\">\t        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Cannot find ipset %s: %s\\n\"</span>, setname,</span><br><span class=\"line\">\t\t\t\t\t                ipset_session_error(session));</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t    }</span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_OPT_FAMILY, &amp;family);</span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_OPT_IP, addr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ipset_cmd(session, cmd, <span class=\"comment\">/*lineno*/</span> <span class=\"number\">0</span>)) {</span><br><span class=\"line\">\t        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Failed to add to set %s: %s\\n\"</span>, setname,</span><br><span class=\"line\">\t\t\t\t\t                ipset_session_error(session));</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">try_ipset_create</span><span class=\"params\">(struct ipset_session *session, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *setname,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"keyword\">typename</span>, <span class=\"keyword\">int</span> family)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_type</span> *<span class=\"title\">type</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_SETNAME, setname);</span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_OPT_TYPENAME, <span class=\"keyword\">typename</span>);</span><br><span class=\"line\">    type = ipset_type_get(session, IPSET_CMD_CREATE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">\t        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Cannot find ipset type %s: %s\\n\"</span>, <span class=\"keyword\">typename</span>,</span><br><span class=\"line\">\t\t\t\t\t                ipset_session_error(session));</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t    }</span><br><span class=\"line\"></span><br><span class=\"line\">    timeout = <span class=\"number\">0</span>; <span class=\"comment\">/* timeout support, but default to infinity */</span></span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_OPT_TIMEOUT, &amp;timeout);</span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_OPT_TYPE, type);</span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_OPT_FAMILY, &amp;family);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ipset_cmd(session, IPSET_CMD_CREATE, <span class=\"comment\">/*lineno*/</span> <span class=\"number\">0</span>)) {</span><br><span class=\"line\">\t        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Failed to create ipset %s: %s\\n\"</span>, setname,</span><br><span class=\"line\">\t\t\t\t\t                ipset_session_error(session));</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct ipset_state *<span class=\"title\">ipset_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_state</span> *<span class=\"title\">state</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    state = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(*state));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!state)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ipset_load_types();</span><br><span class=\"line\"></span><br><span class=\"line\">    state-&gt;session = ipset_session_init(<span class=\"built_in\">printf</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!state-&gt;session) {</span><br><span class=\"line\">\t        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Cannot initialize ipset session.\\n\"</span>);</span><br><span class=\"line\">\t        <span class=\"keyword\">goto</span> err_session;</span><br><span class=\"line\">\t    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Return success on attempts to create a compatible ipset or attempts to</span></span><br><span class=\"line\"><span class=\"comment\">\t *      * add an existing rule. */</span></span><br><span class=\"line\">    ipset_envopt_parse(state-&gt;session, IPSET_ENV_EXIST, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!try_ipset_create(state-&gt;session, SETNAME_IPV4, <span class=\"string\">\"hash:ip\"</span>, NFPROTO_IPV4))</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> err_set;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!try_ipset_create(state-&gt;session, SETNAME_IPV6, <span class=\"string\">\"hash:ip\"</span>, NFPROTO_IPV6))</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> err_set;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> state;</span><br><span class=\"line\"></span><br><span class=\"line\">err_set:</span><br><span class=\"line\">err_session:</span><br><span class=\"line\">    ipset_session_fini(state-&gt;session);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(state);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ipset_add_ip</span><span class=\"params\">(struct ipset_state *state, struct address *addr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_session</span> *<span class=\"title\">session</span> = <span class=\"title\">state</span>-&gt;<span class=\"title\">session</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (addr-&gt;family) {</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> AF_INET:</span><br><span class=\"line\">\t        try_ipset_cmd(session, IPSET_CMD_ADD, SETNAME_IPV4, NFPROTO_IPV4, &amp;addr-&gt;ip4_addr);</span><br><span class=\"line\">\t        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> AF_INET6:</span><br><span class=\"line\">\t        try_ipset_cmd(session, IPSET_CMD_ADD, SETNAME_IPV6, NFPROTO_IPV6, &amp;addr-&gt;ip6_addr);</span><br><span class=\"line\">\t        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Unrecognized address family 0x%04x\\n\"</span>, addr-&gt;family);</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t    }</span><br><span class=\"line\">    ipset_session_report_reset(session);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ipset_fini</span><span class=\"params\">(struct ipset_state *state)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    ipset_session_fini(state-&gt;session);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(state);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//for test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">address</span> <span class=\"title\">addr</span>;</span></span><br><span class=\"line\">    addr.family = AF_INET;</span><br><span class=\"line\">    inet_aton(<span class=\"string\">\"192.168.1.10\"</span>, &amp;addr.ip4_addr);</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_state</span> *<span class=\"title\">state</span> = <span class=\"title\">ipset_init</span>();</span></span><br><span class=\"line\">    ipset_add_ip(state, &amp;addr);</span><br><span class=\"line\">    ipset_fini(state);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>编译</strong>(根据各自的环境调整)：</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -g -O2 -Wall -Werror -c ipset_test.c -o ipset_test.o</span><br><span class=\"line\">gcc -g -O2 -Wall -Werror ./ipset_test.o -o a.out -L/usr/lib64/ -lipset</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"GO\"><a href=\"#GO\" class=\"headerlink\" title=\"GO\"></a>GO</h4><p>go有三种方式来调用ipset，第一种是用执行命令的方式，第二种是使用cgo的方式，第三种是使用netlink通信的方式。这里简单给下第二种和第三种的demo：<br><strong>cgo：</strong><br>ipset.go:</p>\n<figure class=\"highlight go\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// #cgo LDFLAGS: -L${SRCDIR}/ -Wl,-rpath,${SRCDIR}/ -lcipset -L/usr/lib64/  -lipset</span></span><br><span class=\"line\"><span class=\"comment\">// #include &lt;stdlib.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// #include \"cipset.h\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"C\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"unsafe\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {</span><br><span class=\"line\">\tcip := C.CString(<span class=\"string\">\"10.92.2.100\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> C.free(unsafe.Pointer(cip))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> caddr C.struct_address</span><br><span class=\"line\">\tC.ip2addr(cip, &amp;caddr)</span><br><span class=\"line\">\t<span class=\"comment\">//caddr.family = C.AF_INET</span></span><br><span class=\"line\">\t<span class=\"comment\">//C.inet_aton(cip, caddr.ip4_addr)</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cstate *C.struct_ipset_state = C.ipset_init()</span><br><span class=\"line\">\tC.ipset_add_ip(cstate, &amp;caddr)</span><br><span class=\"line\">\tC.ipset_fini(cstate)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>cipset.h</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __cipset</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __cipset</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Setname X which can be used in \"ipset list X\". */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SETNAME_IPV4 <span class=\"meta-string\">\"ipset-ipv4\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SETNAME_IPV6 <span class=\"meta-string\">\"ipset-ipv6\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_state</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">address</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct ipset_state *<span class=\"title\">ipset_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ipset_add_ip</span><span class=\"params\">(struct ipset_state *state, struct address *addr)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ipset_fini</span><span class=\"params\">(struct ipset_state *state)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ip2addr</span><span class=\"params\">(<span class=\"keyword\">char</span> *ip, struct address *addr)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>cipset.c 和上面的C第二种示例代码一致，这里就不占空间了。</p>\n<p><strong>编译执行：</strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -g -O2 -Wall -Werror -rdynamic -fPIC -shared -o ./libcipset.so ./cipset.c  #动态库生成</span><br><span class=\"line\">go run ipset.go  #执行go程序</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>go-netlink</strong>(<a href=\"https://github.com/nadoo/glider/blob/master/ipset/ipset_linux.go\" target=\"_blank\" rel=\"noopener\">主要参考</a>)</p>\n<figure class=\"highlight go\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Apache License 2.0</span></span><br><span class=\"line\"><span class=\"comment\">// @mdlayher https://github.com/mdlayher/netlink</span></span><br><span class=\"line\"><span class=\"comment\">// Ref: https://github.com/vishvananda/netlink/blob/master/nl/nl_linux.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> ipset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"encoding/binary\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync/atomic\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"syscall\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"unsafe\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/nadoo/glider/common/log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/nadoo/glider/rule\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NFNL_SUBSYS_IPSET netfilter netlink message types</span></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/torvalds/linux/blob/9e66317d3c92ddaab330c125dfe9d06eee268aff/include/uapi/linux/netfilter/nfnetlink.h#L56</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> NFNL_SUBSYS_IPSET = <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IPSET_PROTOCOL The protocol version</span></span><br><span class=\"line\"><span class=\"comment\">// http://git.netfilter.org/ipset/tree/include/libipset/linux_ip_set.h</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> IPSET_PROTOCOL = <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IPSET_MAXNAMELEN The max length of strings including NUL: set and type identifiers</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> IPSET_MAXNAMELEN = <span class=\"number\">32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Message types and commands</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tIPSET_CMD_CREATE = <span class=\"number\">2</span></span><br><span class=\"line\">\tIPSET_CMD_FLUSH  = <span class=\"number\">4</span></span><br><span class=\"line\">\tIPSET_CMD_ADD    = <span class=\"number\">9</span></span><br><span class=\"line\">\tIPSET_CMD_DEL    = <span class=\"number\">10</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Attributes at command level</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tIPSET_ATTR_PROTOCOL = <span class=\"number\">1</span> <span class=\"comment\">/* 1: Protocol version */</span></span><br><span class=\"line\">\tIPSET_ATTR_SETNAME  = <span class=\"number\">2</span> <span class=\"comment\">/* 2: Name of the set */</span></span><br><span class=\"line\">\tIPSET_ATTR_TYPENAME = <span class=\"number\">3</span> <span class=\"comment\">/* 3: Typename */</span></span><br><span class=\"line\">\tIPSET_ATTR_REVISION = <span class=\"number\">4</span> <span class=\"comment\">/* 4: Settype revision */</span></span><br><span class=\"line\">\tIPSET_ATTR_FAMILY   = <span class=\"number\">5</span> <span class=\"comment\">/* 5: Settype family */</span></span><br><span class=\"line\">\tIPSET_ATTR_DATA     = <span class=\"number\">7</span> <span class=\"comment\">/* 7: Nested attributes */</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CADT specific attributes</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tIPSET_ATTR_IP   = <span class=\"number\">1</span></span><br><span class=\"line\">\tIPSET_ATTR_CIDR = <span class=\"number\">3</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IP specific attributes</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tIPSET_ATTR_IPADDR_IPV4 = <span class=\"number\">1</span></span><br><span class=\"line\">\tIPSET_ATTR_IPADDR_IPV6 = <span class=\"number\">2</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ATTR flags</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tNLA_F_NESTED        = (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">15</span>)</span><br><span class=\"line\">\tNLA_F_NET_BYTEORDER = (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">14</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextSeqNr <span class=\"keyword\">uint32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nativeEndian binary.ByteOrder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Manager struct</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Manager <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">\tfd  <span class=\"keyword\">int</span></span><br><span class=\"line\">\tlsa syscall.SockaddrNetlink</span><br><span class=\"line\"></span><br><span class=\"line\">\tdomainSet sync.Map</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewManager returns a Manager</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewManager</span><span class=\"params\">(rules []*rule.Config)</span> <span class=\"params\">(*Manager, error)</span></span> {</span><br><span class=\"line\">\tfd, err := syscall.Socket(syscall.AF_NETLINK, syscall.SOCK_RAW, syscall.NETLINK_NETFILTER)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"%s\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"comment\">// defer syscall.Close(fd)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlsa := syscall.SockaddrNetlink{</span><br><span class=\"line\">\t\tFamily: syscall.AF_NETLINK,</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = syscall.Bind(fd, &amp;lsa)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"%s\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tm := &amp;Manager{fd: fd, lsa: lsa}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// create ipset</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> rules {</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> r.IPSet != <span class=\"string\">\"\"</span> {</span><br><span class=\"line\">\t\t\tCreateSet(fd, lsa, r.IPSet)</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// init ipset</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> rules {</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> r.IPSet != <span class=\"string\">\"\"</span> {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, domain := <span class=\"keyword\">range</span> r.Domain {</span><br><span class=\"line\">\t\t\t\tm.domainSet.Store(domain, r.IPSet)</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, ip := <span class=\"keyword\">range</span> r.IP {</span><br><span class=\"line\">\t\t\t\tAddToSet(fd, lsa, r.IPSet, ip)</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, cidr := <span class=\"keyword\">range</span> r.CIDR {</span><br><span class=\"line\">\t\t\t\tAddToSet(fd, lsa, r.IPSet, cidr)</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m, <span class=\"literal\">nil</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AddDomainIP implements the DNSAnswerHandler function, used to update ipset according to domainSet rule</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Manager)</span> <span class=\"title\">AddDomainIP</span><span class=\"params\">(domain, ip <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> domain == <span class=\"string\">\"\"</span> || ip == <span class=\"string\">\"\"</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"please specify the domain and ip address\"</span>)</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tdomainParts := strings.Split(domain, <span class=\"string\">\".\"</span>)</span><br><span class=\"line\">\tlength := <span class=\"built_in\">len</span>(domainParts)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i-- {</span><br><span class=\"line\">\t\tdomain := strings.Join(domainParts[i:length], <span class=\"string\">\".\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// find in domainMap</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ipset, ok := m.domainSet.Load(domain); ok {</span><br><span class=\"line\">\t\t\tAddToSet(m.fd, m.lsa, ipset.(<span class=\"keyword\">string</span>), ip)</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CreateSet create a ipset</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CreateSet</span><span class=\"params\">(fd <span class=\"keyword\">int</span>, lsa syscall.SockaddrNetlink, setName <span class=\"keyword\">string</span>)</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> setName == <span class=\"string\">\"\"</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(setName) &gt; IPSET_MAXNAMELEN {</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"ipset: name too long\"</span>)</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.F(<span class=\"string\">\"ipset create %s hash:net\"</span>, setName)</span><br><span class=\"line\"></span><br><span class=\"line\">\treq := NewNetlinkRequest(IPSET_CMD_CREATE|(NFNL_SUBSYS_IPSET&lt;&lt;<span class=\"number\">8</span>), syscall.NLM_F_REQUEST)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> support AF_INET6</span></span><br><span class=\"line\">\treq.AddData(NewNfGenMsg(syscall.AF_INET, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_PROTOCOL, Uint8Attr(IPSET_PROTOCOL)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_SETNAME, ZeroTerminated(setName)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_TYPENAME, ZeroTerminated(<span class=\"string\">\"hash:net\"</span>)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_REVISION, Uint8Attr(<span class=\"number\">1</span>)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_FAMILY, Uint8Attr(<span class=\"number\">2</span>)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_DATA|NLA_F_NESTED, <span class=\"literal\">nil</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := syscall.Sendto(fd, req.Serialize(), <span class=\"number\">0</span>, &amp;lsa)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"%s\"</span>, err)</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tFlushSet(fd, lsa, setName)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// FlushSet flush a ipset</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FlushSet</span><span class=\"params\">(fd <span class=\"keyword\">int</span>, lsa syscall.SockaddrNetlink, setName <span class=\"keyword\">string</span>)</span></span> {</span><br><span class=\"line\">\tlog.F(<span class=\"string\">\"ipset flush %s\"</span>, setName)</span><br><span class=\"line\"></span><br><span class=\"line\">\treq := NewNetlinkRequest(IPSET_CMD_FLUSH|(NFNL_SUBSYS_IPSET&lt;&lt;<span class=\"number\">8</span>), syscall.NLM_F_REQUEST)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> support AF_INET6</span></span><br><span class=\"line\">\treq.AddData(NewNfGenMsg(syscall.AF_INET, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_PROTOCOL, Uint8Attr(IPSET_PROTOCOL)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_SETNAME, ZeroTerminated(setName)))</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := syscall.Sendto(fd, req.Serialize(), <span class=\"number\">0</span>, &amp;lsa)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"%s\"</span>, err)</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AddToSet adds an entry to ipset</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AddToSet</span><span class=\"params\">(fd <span class=\"keyword\">int</span>, lsa syscall.SockaddrNetlink, setName, entry <span class=\"keyword\">string</span>)</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> setName == <span class=\"string\">\"\"</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(setName) &gt; IPSET_MAXNAMELEN {</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"ipset: name too long\"</span>)</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.F(<span class=\"string\">\"ipset add %s %s\"</span>, setName, entry)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ip net.IP</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cidr *net.IPNet</span><br><span class=\"line\"></span><br><span class=\"line\">\tip, cidr, err := net.ParseCIDR(entry)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\tip = net.ParseIP(entry)</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ip == <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"ipset: parse %s error\"</span>, entry)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\treq := NewNetlinkRequest(IPSET_CMD_ADD|(NFNL_SUBSYS_IPSET&lt;&lt;<span class=\"number\">8</span>), syscall.NLM_F_REQUEST)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> support AF_INET6</span></span><br><span class=\"line\">\treq.AddData(NewNfGenMsg(syscall.AF_INET, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_PROTOCOL, Uint8Attr(IPSET_PROTOCOL)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_SETNAME, ZeroTerminated(setName)))</span><br><span class=\"line\"></span><br><span class=\"line\">\tattrNested := NewRtAttr(IPSET_ATTR_DATA|NLA_F_NESTED, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\tattrIP := NewRtAttrChild(attrNested, IPSET_ATTR_IP|NLA_F_NESTED, <span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> support ipV6</span></span><br><span class=\"line\">\tNewRtAttrChild(attrIP, IPSET_ATTR_IPADDR_IPV4|NLA_F_NET_BYTEORDER, ip.To4())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// for cidr prefix</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cidr != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\tcidrPrefix, _ := cidr.Mask.Size()</span><br><span class=\"line\">\t\tNewRtAttrChild(attrNested, IPSET_ATTR_CIDR, Uint8Attr(<span class=\"keyword\">uint8</span>(cidrPrefix)))</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tNewRtAttrChild(attrNested, <span class=\"number\">9</span>|NLA_F_NET_BYTEORDER, Uint32Attr(<span class=\"number\">0</span>))</span><br><span class=\"line\">\treq.AddData(attrNested)</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = syscall.Sendto(fd, req.Serialize(), <span class=\"number\">0</span>, &amp;lsa)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"%s\"</span>, err)</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NativeEndian get native endianness for the system</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NativeEndian</span><span class=\"params\">()</span> <span class=\"title\">binary</span>.<span class=\"title\">ByteOrder</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> nativeEndian == <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> x <span class=\"keyword\">uint32</span> = <span class=\"number\">0x01020304</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> *(*<span class=\"keyword\">byte</span>)(unsafe.Pointer(&amp;x)) == <span class=\"number\">0x01</span> {</span><br><span class=\"line\">\t\t\tnativeEndian = binary.BigEndian</span><br><span class=\"line\">\t\t} <span class=\"keyword\">else</span> {</span><br><span class=\"line\">\t\t\tnativeEndian = binary.LittleEndian</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> nativeEndian</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">rtaAlignOf</span><span class=\"params\">(attrlen <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (attrlen + syscall.RTA_ALIGNTO - <span class=\"number\">1</span>) &amp; ^(syscall.RTA_ALIGNTO - <span class=\"number\">1</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NetlinkRequestData .</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> NetlinkRequestData <span class=\"keyword\">interface</span> {</span><br><span class=\"line\">\tLen() <span class=\"keyword\">int</span></span><br><span class=\"line\">\tSerialize() []<span class=\"keyword\">byte</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NfGenMsg .</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> NfGenMsg <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">\tnfgenFamily <span class=\"keyword\">uint8</span></span><br><span class=\"line\">\tversion     <span class=\"keyword\">uint8</span></span><br><span class=\"line\">\tresID       <span class=\"keyword\">uint16</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewNfGenMsg .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewNfGenMsg</span><span class=\"params\">(nfgenFamily, version, resID <span class=\"keyword\">int</span>)</span> *<span class=\"title\">NfGenMsg</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;NfGenMsg{</span><br><span class=\"line\">\t\tnfgenFamily: <span class=\"keyword\">uint8</span>(nfgenFamily),</span><br><span class=\"line\">\t\tversion:     <span class=\"keyword\">uint8</span>(version),</span><br><span class=\"line\">\t\tresID:       <span class=\"keyword\">uint16</span>(resID),</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Len .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *NfGenMsg)</span> <span class=\"title\">Len</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rtaAlignOf(<span class=\"number\">4</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Serialize .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *NfGenMsg)</span> <span class=\"title\">Serialize</span><span class=\"params\">()</span> []<span class=\"title\">byte</span></span> {</span><br><span class=\"line\">\tnative := NativeEndian()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlength := m.Len()</span><br><span class=\"line\">\tbuf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, rtaAlignOf(length))</span><br><span class=\"line\">\tbuf[<span class=\"number\">0</span>] = m.nfgenFamily</span><br><span class=\"line\">\tbuf[<span class=\"number\">1</span>] = m.version</span><br><span class=\"line\">\tnative.PutUint16(buf[<span class=\"number\">2</span>:<span class=\"number\">4</span>], m.resID)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> buf</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// RtAttr Extend RtAttr to handle data and children</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> RtAttr <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">\tsyscall.RtAttr</span><br><span class=\"line\">\tData     []<span class=\"keyword\">byte</span></span><br><span class=\"line\">\tchildren []NetlinkRequestData</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewRtAttr Create a new Extended RtAttr object</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRtAttr</span><span class=\"params\">(attrType <span class=\"keyword\">int</span>, data []<span class=\"keyword\">byte</span>)</span> *<span class=\"title\">RtAttr</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;RtAttr{</span><br><span class=\"line\">\t\tRtAttr: syscall.RtAttr{</span><br><span class=\"line\">\t\t\tType: <span class=\"keyword\">uint16</span>(attrType),</span><br><span class=\"line\">\t\t},</span><br><span class=\"line\">\t\tchildren: []NetlinkRequestData{},</span><br><span class=\"line\">\t\tData:     data,</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewRtAttrChild Create a new RtAttr obj anc add it as a child of an existing object</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRtAttrChild</span><span class=\"params\">(parent *RtAttr, attrType <span class=\"keyword\">int</span>, data []<span class=\"keyword\">byte</span>)</span> *<span class=\"title\">RtAttr</span></span> {</span><br><span class=\"line\">\tattr := NewRtAttr(attrType, data)</span><br><span class=\"line\">\tparent.children = <span class=\"built_in\">append</span>(parent.children, attr)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> attr</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Len .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *RtAttr)</span> <span class=\"title\">Len</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(a.children) == <span class=\"number\">0</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (syscall.SizeofRtAttr + <span class=\"built_in\">len</span>(a.Data))</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tl := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, child := <span class=\"keyword\">range</span> a.children {</span><br><span class=\"line\">\t\tl += rtaAlignOf(child.Len())</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tl += syscall.SizeofRtAttr</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rtaAlignOf(l + <span class=\"built_in\">len</span>(a.Data))</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Serialize the RtAttr into a byte array</span></span><br><span class=\"line\"><span class=\"comment\">// This can't just unsafe.cast because it must iterate through children.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *RtAttr)</span> <span class=\"title\">Serialize</span><span class=\"params\">()</span> []<span class=\"title\">byte</span></span> {</span><br><span class=\"line\">\tnative := NativeEndian()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlength := a.Len()</span><br><span class=\"line\">\tbuf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, rtaAlignOf(length))</span><br><span class=\"line\"></span><br><span class=\"line\">\tnext := <span class=\"number\">4</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a.Data != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(buf[next:], a.Data)</span><br><span class=\"line\">\t\tnext += rtaAlignOf(<span class=\"built_in\">len</span>(a.Data))</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(a.children) &gt; <span class=\"number\">0</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, child := <span class=\"keyword\">range</span> a.children {</span><br><span class=\"line\">\t\t\tchildBuf := child.Serialize()</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">copy</span>(buf[next:], childBuf)</span><br><span class=\"line\">\t\t\tnext += rtaAlignOf(<span class=\"built_in\">len</span>(childBuf))</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> l := <span class=\"keyword\">uint16</span>(length); l != <span class=\"number\">0</span> {</span><br><span class=\"line\">\t\tnative.PutUint16(buf[<span class=\"number\">0</span>:<span class=\"number\">2</span>], l)</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tnative.PutUint16(buf[<span class=\"number\">2</span>:<span class=\"number\">4</span>], a.Type)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> buf</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NetlinkRequest .</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> NetlinkRequest <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">\tsyscall.NlMsghdr</span><br><span class=\"line\">\tData    []NetlinkRequestData</span><br><span class=\"line\">\tRawData []<span class=\"keyword\">byte</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewNetlinkRequest create a new netlink request from proto and flags</span></span><br><span class=\"line\"><span class=\"comment\">// Note the Len value will be inaccurate once data is added until</span></span><br><span class=\"line\"><span class=\"comment\">// the message is serialized</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewNetlinkRequest</span><span class=\"params\">(proto, flags <span class=\"keyword\">int</span>)</span> *<span class=\"title\">NetlinkRequest</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;NetlinkRequest{</span><br><span class=\"line\">\t\tNlMsghdr: syscall.NlMsghdr{</span><br><span class=\"line\">\t\t\tLen:   <span class=\"keyword\">uint32</span>(syscall.SizeofNlMsghdr),</span><br><span class=\"line\">\t\t\tType:  <span class=\"keyword\">uint16</span>(proto),</span><br><span class=\"line\">\t\t\tFlags: syscall.NLM_F_REQUEST | <span class=\"keyword\">uint16</span>(flags),</span><br><span class=\"line\">\t\t\tSeq:   atomic.AddUint32(&amp;nextSeqNr, <span class=\"number\">1</span>),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Pid:   uint32(os.Getpid()),</span></span><br><span class=\"line\">\t\t},</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Serialize the Netlink Request into a byte array</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(req *NetlinkRequest)</span> <span class=\"title\">Serialize</span><span class=\"params\">()</span> []<span class=\"title\">byte</span></span> {</span><br><span class=\"line\">\tlength := syscall.SizeofNlMsghdr</span><br><span class=\"line\">\tdataBytes := <span class=\"built_in\">make</span>([][]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(req.Data))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, data := <span class=\"keyword\">range</span> req.Data {</span><br><span class=\"line\">\t\tdataBytes[i] = data.Serialize()</span><br><span class=\"line\">\t\tlength = length + <span class=\"built_in\">len</span>(dataBytes[i])</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tlength += <span class=\"built_in\">len</span>(req.RawData)</span><br><span class=\"line\"></span><br><span class=\"line\">\treq.Len = <span class=\"keyword\">uint32</span>(length)</span><br><span class=\"line\">\tb := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, length)</span><br><span class=\"line\">\thdr := (*(*[syscall.SizeofNlMsghdr]<span class=\"keyword\">byte</span>)(unsafe.Pointer(req)))[:]</span><br><span class=\"line\">\tnext := syscall.SizeofNlMsghdr</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(b[<span class=\"number\">0</span>:next], hdr)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, data := <span class=\"keyword\">range</span> dataBytes {</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, dataByte := <span class=\"keyword\">range</span> data {</span><br><span class=\"line\">\t\t\tb[next] = dataByte</span><br><span class=\"line\">\t\t\tnext = next + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"comment\">// Add the raw data if any</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(req.RawData) &gt; <span class=\"number\">0</span> {</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(b[next:length], req.RawData)</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AddData add data to request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(req *NetlinkRequest)</span> <span class=\"title\">AddData</span><span class=\"params\">(data NetlinkRequestData)</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\treq.Data = <span class=\"built_in\">append</span>(req.Data, data)</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AddRawData adds raw bytes to the end of the NetlinkRequest object during serialization</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(req *NetlinkRequest)</span> <span class=\"title\">AddRawData</span><span class=\"params\">(data []<span class=\"keyword\">byte</span>)</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\treq.RawData = <span class=\"built_in\">append</span>(req.RawData, data...)</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Uint8Attr .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Uint8Attr</span><span class=\"params\">(v <span class=\"keyword\">uint8</span>)</span> []<span class=\"title\">byte</span></span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> []<span class=\"keyword\">byte</span>{<span class=\"keyword\">byte</span>(v)}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Uint16Attr .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Uint16Attr</span><span class=\"params\">(v <span class=\"keyword\">uint16</span>)</span> []<span class=\"title\">byte</span></span> {</span><br><span class=\"line\">\tnative := NativeEndian()</span><br><span class=\"line\">\tbytes := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\tnative.PutUint16(bytes, v)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bytes</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Uint32Attr .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Uint32Attr</span><span class=\"params\">(v <span class=\"keyword\">uint32</span>)</span> []<span class=\"title\">byte</span></span> {</span><br><span class=\"line\">\tnative := NativeEndian()</span><br><span class=\"line\">\tbytes := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">\tnative.PutUint32(bytes, v)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bytes</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ZeroTerminated .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ZeroTerminated</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> []<span class=\"title\">byte</span></span> {</span><br><span class=\"line\">\tbytes := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(s)+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(s); i++ {</span><br><span class=\"line\">\t\tbytes[i] = s[i]</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tbytes[<span class=\"built_in\">len</span>(s)] = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bytes</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NonZeroTerminated .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NonZeroTerminated</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> []<span class=\"title\">byte</span></span> {</span><br><span class=\"line\">\tbytes := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(s))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(s); i++ {</span><br><span class=\"line\">\t\tbytes[i] = s[i]</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bytes</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BytesToString .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BytesToString</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">string</span></span> {</span><br><span class=\"line\">\tn := bytes.Index(b, []<span class=\"keyword\">byte</span>{<span class=\"number\">0</span>})</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(b[:n])</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>go的代码，我自己改的已经完善了常用命令，以及接收内核反馈消息等。由于我修改的代码做了模块划分，涉及的文件比较多，这里就列出参考的源代码吧，想看更多的去参考的链接。反正这个源码也是参考libipset写的。(๑`･ᴗ･´๑)</p>\n<p>以上，如果有什么问题，欢迎随时交流。-(￢∀￢)σ</p>\n","site":{"data":{}},"excerpt":"<p>由于语言需求，需要使用go实现libipset的功能，与内核通信，就简单的看了一下源码(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em><a href=\"http://ipset.netfilter.org/\" target=\"_blank\" rel=\"noopener\">ipset官网</a></em><br><em><a href=\"http://ipset.netfilter.org/libipset.man.html\" target=\"_blank\" rel=\"noopener\">libipset手册</a></em><br><em><a href=\"https://netfilter.org/projects/libmnl/\" target=\"_blank\" rel=\"noopener\">libmnl</a></em></p>\n<p><em>本文主要根据ipset 7.x版本来进行介绍的。</em></p>","more":"<h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>ipset是 Linux 防火墙 iptables 的一个协助工具。 通过这个工具可以轻松愉快地屏蔽一组IP地址。–<a href=\"https://wiki.archlinux.org/index.php/Ipset_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\" target=\"_blank\" rel=\"noopener\">来自wiki</a><br>ipset主要解决的是iptables在屏蔽大量ip产生的效率低下问题。搞一张图看看效率差距：<br><img src=\"/2020/05/06/libipset源码分析/iptables-nfhipac-ipset.jpg\" alt=\"iptables和ipset性能对比\"><br>–<a href=\"http://people.netfilter.org/kadlec/nftest.pdf\" target=\"_blank\" rel=\"noopener\">测评来源</a><br>并且，iptables在进行规则插入和删除的时候，也只能一条条的进行，速度也是非常慢的。我自己在自己的设备上测试效果如下(time + 脚本测试的)：<br>| 添加Iptables数量 | 1    | 500    | 1000 |    2000 |    4000    | 10000 |<br>| ————- | ————- | ————- | ————- |———— | ————- | ————- | ————- |<br>| 花费时间 |0.002s    |2.831s    |4.115s|    10.725s    |33.365s|    2m55.954s|<br><strong>那么</strong>，如果你有需求使用iptables屏蔽大量的ip，就可以考虑使用ipset。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>看源码之前，首先需要了解ipset有什么用，简单给个示例来屏蔽一个ip：<br>你要有两台机器，可以是自己的虚拟机，在一台机器上配置ipset + iptables，另外一台机器去ping测试。<br>安装(centos)：<code>yum install ipset</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipset create hash_test hash:ip #创建一个集合</span><br><span class=\"line\">ipset add hash_test 192.168.1.120 #添加一个成员到集合</span><br><span class=\"line\">iptables -I INPUT -m set --match-set hash_test src -j DROP  #iptables配置匹配项</span><br></pre></td></tr></table></figure>\n\n<p>你也可以进行更多的尝试，参见<a href=\"http://ipset.netfilter.org/\" target=\"_blank\" rel=\"noopener\">官网</a><br>ipset的使用不是本文主要目的，简单给个示例就行了。</p>\n<h3 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h3><p>libipset属于用户态部分的代码，负责与内核通信，真正的ipset工作的地方是在内核的netfilter中。<br>我们就根据上面<code>ipset create hash_test hash:ip</code>命令来分析大概的流程。<br><img src=\"/2020/05/06/libipset源码分析/ipset_source_flow.png\" alt=\"libipset流程图\"><br>特殊说明在流程图里都有备注，顺便说明一下几个固定列表的位置：</p>\n<ul>\n<li>各种类型的类型列表，包含所支持的命令，以及需要的参数：ipset_<type_name>.c<br><img src=\"/2020/05/06/libipset源码分析/haship.jpg\" alt=\"haship\"></type_name></li>\n<li>错误码：errcode.c<br><img src=\"/2020/05/06/libipset源码分析/errcode.jpg\" alt=\"errcode\"></li>\n<li>输入命令参数列表(主要是-s这种类型的参数)：ipset.c<br><img src=\"/2020/05/06/libipset源码分析/ipset.jpg\" alt=\"ipset\"></li>\n<li>输入命令参数列表(主要是add这种类型的参数)：args.c<br><img src=\"/2020/05/06/libipset源码分析/args.jpg\" alt=\"args\"></li>\n<li>某个命令的消息协议：PROTOCOL<br><img src=\"/2020/05/06/libipset源码分析/protocol.jpg\" alt=\"protocol\"></li>\n</ul>\n<h3 id=\"消息格式\"><a href=\"#消息格式\" class=\"headerlink\" title=\"消息格式\"></a>消息格式</h3><p>ipset使用的消息是Netlink通信，在ipset用户态构造的sock参数：AF_NETLINK，SOCK_RAW，NETLINK_NETFILTER，sock具体用法自己去查。ipset用户态构造的sock需要进行bind才能使用，因为它不能像udp这种自动分配发送端的端口。<br>首先来看看netlink的消息格式(<a href=\"https://www.cnblogs.com/wenqiang/p/6306727.html\" target=\"_blank\" rel=\"noopener\">主要参考</a>)：<br><code>struct sockaddr_nl</code>结构:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_nl</span> &#123;</span></span><br><span class=\"line\">     <span class=\"keyword\">__kernel_sa_family_t</span>    nl_family;  <span class=\"comment\">/* AF_NETLINK （跟AF_INET对应）*/</span></span><br><span class=\"line\">     <span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span>  nl_pad;     <span class=\"comment\">/* zero */</span></span><br><span class=\"line\">     __u32       nl_pid;     <span class=\"comment\">/* port ID  （通信端口号）*/</span></span><br><span class=\"line\">     __u32       nl_groups;  <span class=\"comment\">/* multicast groups mask */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>struct nlmsghd</code> 结构：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* struct nlmsghd 是netlink消息头*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlmsghdr</span> &#123;</span>   </span><br><span class=\"line\">    __u32       nlmsg_len;  <span class=\"comment\">/* Length of message including header */</span></span><br><span class=\"line\">    __u16       nlmsg_type; <span class=\"comment\">/* Message content */</span></span><br><span class=\"line\">    __u16       nlmsg_flags;    <span class=\"comment\">/* Additional flags */</span> </span><br><span class=\"line\">    __u32       nlmsg_seq;  <span class=\"comment\">/* Sequence number */</span></span><br><span class=\"line\">    __u32       nlmsg_pid;  <span class=\"comment\">/* Sending process port ID */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>通常这个头消息的构造，在ipset中是下面的代码(其中seq是一个自增检验数，pid通常设置0)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">ipset_mnl_fill_hdr(struct ipset_handle *handle, <span class=\"keyword\">enum</span> ipset_cmd cmd,</span><br><span class=\"line\">\t\t   <span class=\"keyword\">void</span> *buffer, <span class=\"keyword\">size_t</span> len UNUSED, <span class=\"keyword\">uint8_t</span> envflags)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nlmsghdr</span> *<span class=\"title\">nlh</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nfgenmsg</span> *<span class=\"title\">nfg</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tassert(handle);</span><br><span class=\"line\">\tassert(buffer);</span><br><span class=\"line\">\tassert(cmd &gt; IPSET_CMD_NONE &amp;&amp; cmd &lt; IPSET_MSG_MAX);</span><br><span class=\"line\"></span><br><span class=\"line\">\tnlh = mnl_nlmsg_put_header(buffer);</span><br><span class=\"line\">\tnlh-&gt;nlmsg_type = cmd | (NFNL_SUBSYS_IPSET &lt;&lt; <span class=\"number\">8</span>);</span><br><span class=\"line\">\tnlh-&gt;nlmsg_flags = cmdflags[cmd - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (envflags &amp; IPSET_ENV_EXIST)</span><br><span class=\"line\">\t\tnlh-&gt;nlmsg_flags &amp;=  ~NLM_F_EXCL;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这儿是扩展头，通常是固定的\\x02\\x00\\x00\\x00</span></span><br><span class=\"line\">\tnfg = mnl_nlmsg_put_extra_header(nlh, <span class=\"keyword\">sizeof</span>(struct nfgenmsg));</span><br><span class=\"line\">\tnfg-&gt;nfgen_family = AF_INET;</span><br><span class=\"line\">\tnfg-&gt;version = NFNETLINK_V0;</span><br><span class=\"line\">\tnfg-&gt;res_id = htons(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>struct msghdr</code> 结构:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span> &#123;</span>                    <span class=\"comment\">/* Scatter/gather array items */</span></span><br><span class=\"line\">     <span class=\"keyword\">void</span>  *iov_base;              <span class=\"comment\">/* Starting address */</span></span><br><span class=\"line\">     <span class=\"keyword\">size_t</span> iov_len;               <span class=\"comment\">/* Number of bytes to transfer */</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\">  <span class=\"comment\">/* iov_base: iov_base指向数据包缓冲区，即参数buff，iov_len是buff的长度。msghdr中允许一次传递多个buff，</span></span><br><span class=\"line\"><span class=\"comment\">    以数组的形式组织在 msg_iov中，msg_iovlen就记录数组的长度 （即有多少个buff）</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msghdr</span> &#123;</span></span><br><span class=\"line\">     <span class=\"keyword\">void</span>         *msg_name;       <span class=\"comment\">/* optional address */</span></span><br><span class=\"line\">     <span class=\"keyword\">socklen_t</span>     msg_namelen;    <span class=\"comment\">/* size of address */</span></span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span> *<span class=\"title\">msg_iov</span>;</span>        <span class=\"comment\">/* scatter/gather array */</span></span><br><span class=\"line\">     <span class=\"keyword\">size_t</span>        msg_iovlen;     <span class=\"comment\">/* # elements in msg_iov */</span></span><br><span class=\"line\">     <span class=\"keyword\">void</span>         *msg_control;    <span class=\"comment\">/* ancillary data, see below */</span></span><br><span class=\"line\">     <span class=\"keyword\">size_t</span>        msg_controllen; <span class=\"comment\">/* ancillary data buffer len */</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span>           msg_flags;      <span class=\"comment\">/* flags on received message */</span></span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"comment\">/* msg_name： 数据的目的地址，网络包指向sockaddr_in, netlink则指向sockaddr_nl;</span></span><br><span class=\"line\"><span class=\"comment\">    msg_namelen: msg_name 所代表的地址长度</span></span><br><span class=\"line\"><span class=\"comment\">    msg_iov: 指向的是缓冲区数组</span></span><br><span class=\"line\"><span class=\"comment\">    msg_iovlen: 缓冲区数组长度</span></span><br><span class=\"line\"><span class=\"comment\">    msg_control: 辅助数据，控制信息(发送任何的控制信息)</span></span><br><span class=\"line\"><span class=\"comment\">    msg_controllen: 辅助信息长度</span></span><br><span class=\"line\"><span class=\"comment\">    msg_flags: 消息标识</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<p>这个结构体主要在ipset接收消息的时候使用。具体代码包含在libmnl库中，需要<a href=\"https://netfilter.org/projects/libmnl/downloads.html\" target=\"_blank\" rel=\"noopener\">下载源码</a>。然后就可以看到以下的接收消息的函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ssize_t</span> mnl_socket_recvfrom(<span class=\"keyword\">const</span> struct mnl_socket *nl, <span class=\"keyword\">void</span> *buf,</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">size_t</span> bufsiz)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">ssize_t</span> ret;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_nl</span> <span class=\"title\">addr</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iovec</span> <span class=\"title\">iov</span> = &#123;</span></span><br><span class=\"line\">\t\t.iov_base\t= buf,</span><br><span class=\"line\">\t\t.iov_len\t= bufsiz,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msghdr</span> <span class=\"title\">msg</span> = &#123;</span></span><br><span class=\"line\">\t\t.msg_name\t= &amp;addr,</span><br><span class=\"line\">\t\t.msg_namelen\t= <span class=\"keyword\">sizeof</span>(struct sockaddr_nl),</span><br><span class=\"line\">\t\t.msg_iov\t= &amp;iov,</span><br><span class=\"line\">\t\t.msg_iovlen\t= <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t.msg_control\t= <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t.msg_controllen\t= <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t.msg_flags\t= <span class=\"number\">0</span>,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tret = recvmsg(nl-&gt;fd, &amp;msg, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (msg.msg_flags &amp; MSG_TRUNC) &#123;</span><br><span class=\"line\">\t\terrno = ENOSPC;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (msg.msg_namelen != <span class=\"keyword\">sizeof</span>(struct sockaddr_nl)) &#123;</span><br><span class=\"line\">\t\terrno = EINVAL;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述的netlink消息数据结构，也就是ipset里使用的主要结构，而这些消息结构的关系如下：<br><img src=\"/2020/05/06/libipset源码分析/netlink%E6%95%B0%E6%8D%AE%E5%85%B3%E7%B3%BB.png\" alt=\"netlink数据结构之间的关系\"><br><em><a href=\"https://blog.csdn.net/zhao_h/article/details/80943226\" target=\"_blank\" rel=\"noopener\">图片来源</a></em><br>上述示例的就是ipset中使用到的主要消息结构了，更多细节，还是在源码中查看。</p>\n<h3 id=\"示例Demo\"><a href=\"#示例Demo\" class=\"headerlink\" title=\"示例Demo\"></a>示例Demo</h3><p>这里我们列出两个语言的demo，C和Go的。</p>\n<h4 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h4><p>c的相对简单，因为只需要调用libipset提供的接口就行。这里推荐写法和官方的ipset的main函数写法一致。<br><strong>官方main函数</strong>(这个函数只有在ipset 7版本中才有)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;\t\t\t/* assert */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;\t\t\t/* fprintf */</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;\t\t\t/* exit */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;config.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;libipset/ipset.h&gt;\t\t/* ipset library */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset</span> *<span class=\"title\">ipset</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Load set types */</span></span><br><span class=\"line\">\tipset_load_types();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Initialize ipset library */</span></span><br><span class=\"line\">\tipset = ipset_init();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ipset == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Cannot initialize ipset, aborting.\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = ipset_parse_argv(ipset, argc, argv);</span><br><span class=\"line\"></span><br><span class=\"line\">\tipset_fini(ipset);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>是不是简单到爆。<br><strong>第二种</strong>，是使用libipset中的session结构体(<a href=\"https://github.com/Lekensteyn/dnsallow/blob/master/ipset.c\" target=\"_blank\" rel=\"noopener\">参考来源</a>)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdbool.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;libipset/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;libipset/session.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;libipset/data.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;   </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Setname X which can be used in \"ipset list X\". */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SETNAME_IPV4 <span class=\"meta-string\">\"ipset-ipv4\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SETNAME_IPV6 <span class=\"meta-string\">\"ipset-ipv6\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_state</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_session</span> *<span class=\"title\">session</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">address</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> family;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">ip4_addr</span>;</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in6_addr</span> <span class=\"title\">ip6_addr</span>;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">try_ipset_cmd</span><span class=\"params\">(struct ipset_session *session, <span class=\"keyword\">enum</span> ipset_cmd cmd,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *setname, <span class=\"keyword\">int</span> family, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *addr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_SETNAME, setname);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ipset_type_get(session, cmd)) &#123;</span><br><span class=\"line\">\t        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Cannot find ipset %s: %s\\n\"</span>, setname,</span><br><span class=\"line\">\t\t\t\t\t                ipset_session_error(session));</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_OPT_FAMILY, &amp;family);</span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_OPT_IP, addr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ipset_cmd(session, cmd, <span class=\"comment\">/*lineno*/</span> <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">\t        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Failed to add to set %s: %s\\n\"</span>, setname,</span><br><span class=\"line\">\t\t\t\t\t                ipset_session_error(session));</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">try_ipset_create</span><span class=\"params\">(struct ipset_session *session, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *setname,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"keyword\">typename</span>, <span class=\"keyword\">int</span> family)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_type</span> *<span class=\"title\">type</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_SETNAME, setname);</span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_OPT_TYPENAME, <span class=\"keyword\">typename</span>);</span><br><span class=\"line\">    type = ipset_type_get(session, IPSET_CMD_CREATE);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Cannot find ipset type %s: %s\\n\"</span>, <span class=\"keyword\">typename</span>,</span><br><span class=\"line\">\t\t\t\t\t                ipset_session_error(session));</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    timeout = <span class=\"number\">0</span>; <span class=\"comment\">/* timeout support, but default to infinity */</span></span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_OPT_TIMEOUT, &amp;timeout);</span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_OPT_TYPE, type);</span><br><span class=\"line\">    ipset_session_data_set(session, IPSET_OPT_FAMILY, &amp;family);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ipset_cmd(session, IPSET_CMD_CREATE, <span class=\"comment\">/*lineno*/</span> <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">\t        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Failed to create ipset %s: %s\\n\"</span>, setname,</span><br><span class=\"line\">\t\t\t\t\t                ipset_session_error(session));</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct ipset_state *<span class=\"title\">ipset_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_state</span> *<span class=\"title\">state</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    state = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(*state));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!state)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ipset_load_types();</span><br><span class=\"line\"></span><br><span class=\"line\">    state-&gt;session = ipset_session_init(<span class=\"built_in\">printf</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!state-&gt;session) &#123;</span><br><span class=\"line\">\t        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Cannot initialize ipset session.\\n\"</span>);</span><br><span class=\"line\">\t        <span class=\"keyword\">goto</span> err_session;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Return success on attempts to create a compatible ipset or attempts to</span></span><br><span class=\"line\"><span class=\"comment\">\t *      * add an existing rule. */</span></span><br><span class=\"line\">    ipset_envopt_parse(state-&gt;session, IPSET_ENV_EXIST, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!try_ipset_create(state-&gt;session, SETNAME_IPV4, <span class=\"string\">\"hash:ip\"</span>, NFPROTO_IPV4))</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> err_set;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!try_ipset_create(state-&gt;session, SETNAME_IPV6, <span class=\"string\">\"hash:ip\"</span>, NFPROTO_IPV6))</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> err_set;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> state;</span><br><span class=\"line\"></span><br><span class=\"line\">err_set:</span><br><span class=\"line\">err_session:</span><br><span class=\"line\">    ipset_session_fini(state-&gt;session);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(state);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ipset_add_ip</span><span class=\"params\">(struct ipset_state *state, struct address *addr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_session</span> *<span class=\"title\">session</span> = <span class=\"title\">state</span>-&gt;<span class=\"title\">session</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (addr-&gt;family) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> AF_INET:</span><br><span class=\"line\">\t        try_ipset_cmd(session, IPSET_CMD_ADD, SETNAME_IPV4, NFPROTO_IPV4, &amp;addr-&gt;ip4_addr);</span><br><span class=\"line\">\t        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> AF_INET6:</span><br><span class=\"line\">\t        try_ipset_cmd(session, IPSET_CMD_ADD, SETNAME_IPV6, NFPROTO_IPV6, &amp;addr-&gt;ip6_addr);</span><br><span class=\"line\">\t        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Unrecognized address family 0x%04x\\n\"</span>, addr-&gt;family);</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">    ipset_session_report_reset(session);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ipset_fini</span><span class=\"params\">(struct ipset_state *state)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ipset_session_fini(state-&gt;session);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(state);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//for test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">address</span> <span class=\"title\">addr</span>;</span></span><br><span class=\"line\">    addr.family = AF_INET;</span><br><span class=\"line\">    inet_aton(<span class=\"string\">\"192.168.1.10\"</span>, &amp;addr.ip4_addr);</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_state</span> *<span class=\"title\">state</span> = <span class=\"title\">ipset_init</span>();</span></span><br><span class=\"line\">    ipset_add_ip(state, &amp;addr);</span><br><span class=\"line\">    ipset_fini(state);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>编译</strong>(根据各自的环境调整)：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -g -O2 -Wall -Werror -c ipset_test.c -o ipset_test.o</span><br><span class=\"line\">gcc -g -O2 -Wall -Werror ./ipset_test.o -o a.out -L/usr/lib64/ -lipset</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"GO\"><a href=\"#GO\" class=\"headerlink\" title=\"GO\"></a>GO</h4><p>go有三种方式来调用ipset，第一种是用执行命令的方式，第二种是使用cgo的方式，第三种是使用netlink通信的方式。这里简单给下第二种和第三种的demo：<br><strong>cgo：</strong><br>ipset.go:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// #cgo LDFLAGS: -L$&#123;SRCDIR&#125;/ -Wl,-rpath,$&#123;SRCDIR&#125;/ -lcipset -L/usr/lib64/  -lipset</span></span><br><span class=\"line\"><span class=\"comment\">// #include &lt;stdlib.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// #include \"cipset.h\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"C\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"unsafe\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcip := C.CString(<span class=\"string\">\"10.92.2.100\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> C.free(unsafe.Pointer(cip))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> caddr C.struct_address</span><br><span class=\"line\">\tC.ip2addr(cip, &amp;caddr)</span><br><span class=\"line\">\t<span class=\"comment\">//caddr.family = C.AF_INET</span></span><br><span class=\"line\">\t<span class=\"comment\">//C.inet_aton(cip, caddr.ip4_addr)</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cstate *C.struct_ipset_state = C.ipset_init()</span><br><span class=\"line\">\tC.ipset_add_ip(cstate, &amp;caddr)</span><br><span class=\"line\">\tC.ipset_fini(cstate)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>cipset.h</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __cipset</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __cipset</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Setname X which can be used in \"ipset list X\". */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SETNAME_IPV4 <span class=\"meta-string\">\"ipset-ipv4\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SETNAME_IPV6 <span class=\"meta-string\">\"ipset-ipv6\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipset_state</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">address</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct ipset_state *<span class=\"title\">ipset_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ipset_add_ip</span><span class=\"params\">(struct ipset_state *state, struct address *addr)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ipset_fini</span><span class=\"params\">(struct ipset_state *state)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ip2addr</span><span class=\"params\">(<span class=\"keyword\">char</span> *ip, struct address *addr)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>cipset.c 和上面的C第二种示例代码一致，这里就不占空间了。</p>\n<p><strong>编译执行：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -g -O2 -Wall -Werror -rdynamic -fPIC -shared -o ./libcipset.so ./cipset.c  #动态库生成</span><br><span class=\"line\">go run ipset.go  #执行go程序</span><br></pre></td></tr></table></figure>\n\n<p><strong>go-netlink</strong>(<a href=\"https://github.com/nadoo/glider/blob/master/ipset/ipset_linux.go\" target=\"_blank\" rel=\"noopener\">主要参考</a>)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Apache License 2.0</span></span><br><span class=\"line\"><span class=\"comment\">// @mdlayher https://github.com/mdlayher/netlink</span></span><br><span class=\"line\"><span class=\"comment\">// Ref: https://github.com/vishvananda/netlink/blob/master/nl/nl_linux.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> ipset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"encoding/binary\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"sync/atomic\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"syscall\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"unsafe\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/nadoo/glider/common/log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/nadoo/glider/rule\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NFNL_SUBSYS_IPSET netfilter netlink message types</span></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/torvalds/linux/blob/9e66317d3c92ddaab330c125dfe9d06eee268aff/include/uapi/linux/netfilter/nfnetlink.h#L56</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> NFNL_SUBSYS_IPSET = <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IPSET_PROTOCOL The protocol version</span></span><br><span class=\"line\"><span class=\"comment\">// http://git.netfilter.org/ipset/tree/include/libipset/linux_ip_set.h</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> IPSET_PROTOCOL = <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IPSET_MAXNAMELEN The max length of strings including NUL: set and type identifiers</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> IPSET_MAXNAMELEN = <span class=\"number\">32</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Message types and commands</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tIPSET_CMD_CREATE = <span class=\"number\">2</span></span><br><span class=\"line\">\tIPSET_CMD_FLUSH  = <span class=\"number\">4</span></span><br><span class=\"line\">\tIPSET_CMD_ADD    = <span class=\"number\">9</span></span><br><span class=\"line\">\tIPSET_CMD_DEL    = <span class=\"number\">10</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Attributes at command level</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tIPSET_ATTR_PROTOCOL = <span class=\"number\">1</span> <span class=\"comment\">/* 1: Protocol version */</span></span><br><span class=\"line\">\tIPSET_ATTR_SETNAME  = <span class=\"number\">2</span> <span class=\"comment\">/* 2: Name of the set */</span></span><br><span class=\"line\">\tIPSET_ATTR_TYPENAME = <span class=\"number\">3</span> <span class=\"comment\">/* 3: Typename */</span></span><br><span class=\"line\">\tIPSET_ATTR_REVISION = <span class=\"number\">4</span> <span class=\"comment\">/* 4: Settype revision */</span></span><br><span class=\"line\">\tIPSET_ATTR_FAMILY   = <span class=\"number\">5</span> <span class=\"comment\">/* 5: Settype family */</span></span><br><span class=\"line\">\tIPSET_ATTR_DATA     = <span class=\"number\">7</span> <span class=\"comment\">/* 7: Nested attributes */</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CADT specific attributes</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tIPSET_ATTR_IP   = <span class=\"number\">1</span></span><br><span class=\"line\">\tIPSET_ATTR_CIDR = <span class=\"number\">3</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IP specific attributes</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tIPSET_ATTR_IPADDR_IPV4 = <span class=\"number\">1</span></span><br><span class=\"line\">\tIPSET_ATTR_IPADDR_IPV6 = <span class=\"number\">2</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ATTR flags</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tNLA_F_NESTED        = (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">15</span>)</span><br><span class=\"line\">\tNLA_F_NET_BYTEORDER = (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">14</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> nextSeqNr <span class=\"keyword\">uint32</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nativeEndian binary.ByteOrder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Manager struct</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Manager <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tfd  <span class=\"keyword\">int</span></span><br><span class=\"line\">\tlsa syscall.SockaddrNetlink</span><br><span class=\"line\"></span><br><span class=\"line\">\tdomainSet sync.Map</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewManager returns a Manager</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewManager</span><span class=\"params\">(rules []*rule.Config)</span> <span class=\"params\">(*Manager, error)</span></span> &#123;</span><br><span class=\"line\">\tfd, err := syscall.Socket(syscall.AF_NETLINK, syscall.SOCK_RAW, syscall.NETLINK_NETFILTER)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"%s\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// defer syscall.Close(fd)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlsa := syscall.SockaddrNetlink&#123;</span><br><span class=\"line\">\t\tFamily: syscall.AF_NETLINK,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = syscall.Bind(fd, &amp;lsa)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"%s\"</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tm := &amp;Manager&#123;fd: fd, lsa: lsa&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// create ipset</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> rules &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> r.IPSet != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\tCreateSet(fd, lsa, r.IPSet)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// init ipset</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> rules &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> r.IPSet != <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, domain := <span class=\"keyword\">range</span> r.Domain &#123;</span><br><span class=\"line\">\t\t\t\tm.domainSet.Store(domain, r.IPSet)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, ip := <span class=\"keyword\">range</span> r.IP &#123;</span><br><span class=\"line\">\t\t\t\tAddToSet(fd, lsa, r.IPSet, ip)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _, cidr := <span class=\"keyword\">range</span> r.CIDR &#123;</span><br><span class=\"line\">\t\t\t\tAddToSet(fd, lsa, r.IPSet, cidr)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AddDomainIP implements the DNSAnswerHandler function, used to update ipset according to domainSet rule</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Manager)</span> <span class=\"title\">AddDomainIP</span><span class=\"params\">(domain, ip <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> domain == <span class=\"string\">\"\"</span> || ip == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> errors.New(<span class=\"string\">\"please specify the domain and ip address\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdomainParts := strings.Split(domain, <span class=\"string\">\".\"</span>)</span><br><span class=\"line\">\tlength := <span class=\"built_in\">len</span>(domainParts)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i-- &#123;</span><br><span class=\"line\">\t\tdomain := strings.Join(domainParts[i:length], <span class=\"string\">\".\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// find in domainMap</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ipset, ok := m.domainSet.Load(domain); ok &#123;</span><br><span class=\"line\">\t\t\tAddToSet(m.fd, m.lsa, ipset.(<span class=\"keyword\">string</span>), ip)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CreateSet create a ipset</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CreateSet</span><span class=\"params\">(fd <span class=\"keyword\">int</span>, lsa syscall.SockaddrNetlink, setName <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> setName == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(setName) &gt; IPSET_MAXNAMELEN &#123;</span><br><span class=\"line\">\t\tlog.Fatal(<span class=\"string\">\"ipset: name too long\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.F(<span class=\"string\">\"ipset create %s hash:net\"</span>, setName)</span><br><span class=\"line\"></span><br><span class=\"line\">\treq := NewNetlinkRequest(IPSET_CMD_CREATE|(NFNL_SUBSYS_IPSET&lt;&lt;<span class=\"number\">8</span>), syscall.NLM_F_REQUEST)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> support AF_INET6</span></span><br><span class=\"line\">\treq.AddData(NewNfGenMsg(syscall.AF_INET, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_PROTOCOL, Uint8Attr(IPSET_PROTOCOL)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_SETNAME, ZeroTerminated(setName)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_TYPENAME, ZeroTerminated(<span class=\"string\">\"hash:net\"</span>)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_REVISION, Uint8Attr(<span class=\"number\">1</span>)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_FAMILY, Uint8Attr(<span class=\"number\">2</span>)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_DATA|NLA_F_NESTED, <span class=\"literal\">nil</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := syscall.Sendto(fd, req.Serialize(), <span class=\"number\">0</span>, &amp;lsa)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"%s\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tFlushSet(fd, lsa, setName)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// FlushSet flush a ipset</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FlushSet</span><span class=\"params\">(fd <span class=\"keyword\">int</span>, lsa syscall.SockaddrNetlink, setName <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\tlog.F(<span class=\"string\">\"ipset flush %s\"</span>, setName)</span><br><span class=\"line\"></span><br><span class=\"line\">\treq := NewNetlinkRequest(IPSET_CMD_FLUSH|(NFNL_SUBSYS_IPSET&lt;&lt;<span class=\"number\">8</span>), syscall.NLM_F_REQUEST)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> support AF_INET6</span></span><br><span class=\"line\">\treq.AddData(NewNfGenMsg(syscall.AF_INET, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_PROTOCOL, Uint8Attr(IPSET_PROTOCOL)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_SETNAME, ZeroTerminated(setName)))</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := syscall.Sendto(fd, req.Serialize(), <span class=\"number\">0</span>, &amp;lsa)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"%s\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AddToSet adds an entry to ipset</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AddToSet</span><span class=\"params\">(fd <span class=\"keyword\">int</span>, lsa syscall.SockaddrNetlink, setName, entry <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> setName == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(setName) &gt; IPSET_MAXNAMELEN &#123;</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"ipset: name too long\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.F(<span class=\"string\">\"ipset add %s %s\"</span>, setName, entry)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ip net.IP</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cidr *net.IPNet</span><br><span class=\"line\"></span><br><span class=\"line\">\tip, cidr, err := net.ParseCIDR(entry)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tip = net.ParseIP(entry)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ip == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"ipset: parse %s error\"</span>, entry)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treq := NewNetlinkRequest(IPSET_CMD_ADD|(NFNL_SUBSYS_IPSET&lt;&lt;<span class=\"number\">8</span>), syscall.NLM_F_REQUEST)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> support AF_INET6</span></span><br><span class=\"line\">\treq.AddData(NewNfGenMsg(syscall.AF_INET, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_PROTOCOL, Uint8Attr(IPSET_PROTOCOL)))</span><br><span class=\"line\">\treq.AddData(NewRtAttr(IPSET_ATTR_SETNAME, ZeroTerminated(setName)))</span><br><span class=\"line\"></span><br><span class=\"line\">\tattrNested := NewRtAttr(IPSET_ATTR_DATA|NLA_F_NESTED, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\tattrIP := NewRtAttrChild(attrNested, IPSET_ATTR_IP|NLA_F_NESTED, <span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> support ipV6</span></span><br><span class=\"line\">\tNewRtAttrChild(attrIP, IPSET_ATTR_IPADDR_IPV4|NLA_F_NET_BYTEORDER, ip.To4())</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// for cidr prefix</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cidr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tcidrPrefix, _ := cidr.Mask.Size()</span><br><span class=\"line\">\t\tNewRtAttrChild(attrNested, IPSET_ATTR_CIDR, Uint8Attr(<span class=\"keyword\">uint8</span>(cidrPrefix)))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tNewRtAttrChild(attrNested, <span class=\"number\">9</span>|NLA_F_NET_BYTEORDER, Uint32Attr(<span class=\"number\">0</span>))</span><br><span class=\"line\">\treq.AddData(attrNested)</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = syscall.Sendto(fd, req.Serialize(), <span class=\"number\">0</span>, &amp;lsa)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.F(<span class=\"string\">\"%s\"</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NativeEndian get native endianness for the system</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NativeEndian</span><span class=\"params\">()</span> <span class=\"title\">binary</span>.<span class=\"title\">ByteOrder</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> nativeEndian == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> x <span class=\"keyword\">uint32</span> = <span class=\"number\">0x01020304</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> *(*<span class=\"keyword\">byte</span>)(unsafe.Pointer(&amp;x)) == <span class=\"number\">0x01</span> &#123;</span><br><span class=\"line\">\t\t\tnativeEndian = binary.BigEndian</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tnativeEndian = binary.LittleEndian</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> nativeEndian</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">rtaAlignOf</span><span class=\"params\">(attrlen <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (attrlen + syscall.RTA_ALIGNTO - <span class=\"number\">1</span>) &amp; ^(syscall.RTA_ALIGNTO - <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NetlinkRequestData .</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> NetlinkRequestData <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tLen() <span class=\"keyword\">int</span></span><br><span class=\"line\">\tSerialize() []<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NfGenMsg .</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> NfGenMsg <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tnfgenFamily <span class=\"keyword\">uint8</span></span><br><span class=\"line\">\tversion     <span class=\"keyword\">uint8</span></span><br><span class=\"line\">\tresID       <span class=\"keyword\">uint16</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewNfGenMsg .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewNfGenMsg</span><span class=\"params\">(nfgenFamily, version, resID <span class=\"keyword\">int</span>)</span> *<span class=\"title\">NfGenMsg</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;NfGenMsg&#123;</span><br><span class=\"line\">\t\tnfgenFamily: <span class=\"keyword\">uint8</span>(nfgenFamily),</span><br><span class=\"line\">\t\tversion:     <span class=\"keyword\">uint8</span>(version),</span><br><span class=\"line\">\t\tresID:       <span class=\"keyword\">uint16</span>(resID),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Len .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *NfGenMsg)</span> <span class=\"title\">Len</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rtaAlignOf(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Serialize .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *NfGenMsg)</span> <span class=\"title\">Serialize</span><span class=\"params\">()</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\tnative := NativeEndian()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlength := m.Len()</span><br><span class=\"line\">\tbuf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, rtaAlignOf(length))</span><br><span class=\"line\">\tbuf[<span class=\"number\">0</span>] = m.nfgenFamily</span><br><span class=\"line\">\tbuf[<span class=\"number\">1</span>] = m.version</span><br><span class=\"line\">\tnative.PutUint16(buf[<span class=\"number\">2</span>:<span class=\"number\">4</span>], m.resID)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> buf</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// RtAttr Extend RtAttr to handle data and children</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> RtAttr <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsyscall.RtAttr</span><br><span class=\"line\">\tData     []<span class=\"keyword\">byte</span></span><br><span class=\"line\">\tchildren []NetlinkRequestData</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewRtAttr Create a new Extended RtAttr object</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRtAttr</span><span class=\"params\">(attrType <span class=\"keyword\">int</span>, data []<span class=\"keyword\">byte</span>)</span> *<span class=\"title\">RtAttr</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;RtAttr&#123;</span><br><span class=\"line\">\t\tRtAttr: syscall.RtAttr&#123;</span><br><span class=\"line\">\t\t\tType: <span class=\"keyword\">uint16</span>(attrType),</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tchildren: []NetlinkRequestData&#123;&#125;,</span><br><span class=\"line\">\t\tData:     data,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewRtAttrChild Create a new RtAttr obj anc add it as a child of an existing object</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRtAttrChild</span><span class=\"params\">(parent *RtAttr, attrType <span class=\"keyword\">int</span>, data []<span class=\"keyword\">byte</span>)</span> *<span class=\"title\">RtAttr</span></span> &#123;</span><br><span class=\"line\">\tattr := NewRtAttr(attrType, data)</span><br><span class=\"line\">\tparent.children = <span class=\"built_in\">append</span>(parent.children, attr)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> attr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Len .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *RtAttr)</span> <span class=\"title\">Len</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(a.children) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (syscall.SizeofRtAttr + <span class=\"built_in\">len</span>(a.Data))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tl := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, child := <span class=\"keyword\">range</span> a.children &#123;</span><br><span class=\"line\">\t\tl += rtaAlignOf(child.Len())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tl += syscall.SizeofRtAttr</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rtaAlignOf(l + <span class=\"built_in\">len</span>(a.Data))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Serialize the RtAttr into a byte array</span></span><br><span class=\"line\"><span class=\"comment\">// This can't just unsafe.cast because it must iterate through children.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *RtAttr)</span> <span class=\"title\">Serialize</span><span class=\"params\">()</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\tnative := NativeEndian()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlength := a.Len()</span><br><span class=\"line\">\tbuf := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, rtaAlignOf(length))</span><br><span class=\"line\"></span><br><span class=\"line\">\tnext := <span class=\"number\">4</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a.Data != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(buf[next:], a.Data)</span><br><span class=\"line\">\t\tnext += rtaAlignOf(<span class=\"built_in\">len</span>(a.Data))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(a.children) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, child := <span class=\"keyword\">range</span> a.children &#123;</span><br><span class=\"line\">\t\t\tchildBuf := child.Serialize()</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">copy</span>(buf[next:], childBuf)</span><br><span class=\"line\">\t\t\tnext += rtaAlignOf(<span class=\"built_in\">len</span>(childBuf))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> l := <span class=\"keyword\">uint16</span>(length); l != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tnative.PutUint16(buf[<span class=\"number\">0</span>:<span class=\"number\">2</span>], l)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnative.PutUint16(buf[<span class=\"number\">2</span>:<span class=\"number\">4</span>], a.Type)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> buf</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NetlinkRequest .</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> NetlinkRequest <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsyscall.NlMsghdr</span><br><span class=\"line\">\tData    []NetlinkRequestData</span><br><span class=\"line\">\tRawData []<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewNetlinkRequest create a new netlink request from proto and flags</span></span><br><span class=\"line\"><span class=\"comment\">// Note the Len value will be inaccurate once data is added until</span></span><br><span class=\"line\"><span class=\"comment\">// the message is serialized</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewNetlinkRequest</span><span class=\"params\">(proto, flags <span class=\"keyword\">int</span>)</span> *<span class=\"title\">NetlinkRequest</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;NetlinkRequest&#123;</span><br><span class=\"line\">\t\tNlMsghdr: syscall.NlMsghdr&#123;</span><br><span class=\"line\">\t\t\tLen:   <span class=\"keyword\">uint32</span>(syscall.SizeofNlMsghdr),</span><br><span class=\"line\">\t\t\tType:  <span class=\"keyword\">uint16</span>(proto),</span><br><span class=\"line\">\t\t\tFlags: syscall.NLM_F_REQUEST | <span class=\"keyword\">uint16</span>(flags),</span><br><span class=\"line\">\t\t\tSeq:   atomic.AddUint32(&amp;nextSeqNr, <span class=\"number\">1</span>),</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Pid:   uint32(os.Getpid()),</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Serialize the Netlink Request into a byte array</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(req *NetlinkRequest)</span> <span class=\"title\">Serialize</span><span class=\"params\">()</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\tlength := syscall.SizeofNlMsghdr</span><br><span class=\"line\">\tdataBytes := <span class=\"built_in\">make</span>([][]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(req.Data))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, data := <span class=\"keyword\">range</span> req.Data &#123;</span><br><span class=\"line\">\t\tdataBytes[i] = data.Serialize()</span><br><span class=\"line\">\t\tlength = length + <span class=\"built_in\">len</span>(dataBytes[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlength += <span class=\"built_in\">len</span>(req.RawData)</span><br><span class=\"line\"></span><br><span class=\"line\">\treq.Len = <span class=\"keyword\">uint32</span>(length)</span><br><span class=\"line\">\tb := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, length)</span><br><span class=\"line\">\thdr := (*(*[syscall.SizeofNlMsghdr]<span class=\"keyword\">byte</span>)(unsafe.Pointer(req)))[:]</span><br><span class=\"line\">\tnext := syscall.SizeofNlMsghdr</span><br><span class=\"line\">\t<span class=\"built_in\">copy</span>(b[<span class=\"number\">0</span>:next], hdr)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, data := <span class=\"keyword\">range</span> dataBytes &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, dataByte := <span class=\"keyword\">range</span> data &#123;</span><br><span class=\"line\">\t\t\tb[next] = dataByte</span><br><span class=\"line\">\t\t\tnext = next + <span class=\"number\">1</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Add the raw data if any</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(req.RawData) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(b[next:length], req.RawData)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AddData add data to request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(req *NetlinkRequest)</span> <span class=\"title\">AddData</span><span class=\"params\">(data NetlinkRequestData)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\treq.Data = <span class=\"built_in\">append</span>(req.Data, data)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AddRawData adds raw bytes to the end of the NetlinkRequest object during serialization</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(req *NetlinkRequest)</span> <span class=\"title\">AddRawData</span><span class=\"params\">(data []<span class=\"keyword\">byte</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> data != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\treq.RawData = <span class=\"built_in\">append</span>(req.RawData, data...)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Uint8Attr .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Uint8Attr</span><span class=\"params\">(v <span class=\"keyword\">uint8</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> []<span class=\"keyword\">byte</span>&#123;<span class=\"keyword\">byte</span>(v)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Uint16Attr .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Uint16Attr</span><span class=\"params\">(v <span class=\"keyword\">uint16</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\tnative := NativeEndian()</span><br><span class=\"line\">\tbytes := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\tnative.PutUint16(bytes, v)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bytes</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Uint32Attr .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Uint32Attr</span><span class=\"params\">(v <span class=\"keyword\">uint32</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\tnative := NativeEndian()</span><br><span class=\"line\">\tbytes := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">\tnative.PutUint32(bytes, v)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bytes</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ZeroTerminated .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ZeroTerminated</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\tbytes := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(s)+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(s); i++ &#123;</span><br><span class=\"line\">\t\tbytes[i] = s[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbytes[<span class=\"built_in\">len</span>(s)] = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bytes</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NonZeroTerminated .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NonZeroTerminated</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\tbytes := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(s))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(s); i++ &#123;</span><br><span class=\"line\">\t\tbytes[i] = s[i]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bytes</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BytesToString .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BytesToString</span><span class=\"params\">(b []<span class=\"keyword\">byte</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tn := bytes.Index(b, []<span class=\"keyword\">byte</span>&#123;<span class=\"number\">0</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(b[:n])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>go的代码，我自己改的已经完善了常用命令，以及接收内核反馈消息等。由于我修改的代码做了模块划分，涉及的文件比较多，这里就列出参考的源代码吧，想看更多的去参考的链接。反正这个源码也是参考libipset写的。(๑`･ᴗ･´๑)</p>\n<p>以上，如果有什么问题，欢迎随时交流。-(￢∀￢)σ</p>"},{"title":"•ᴗ•颜文字•ᴗ•","date":"2020-04-30T03:34:21.000Z","_content":"\n啦啦啦啦(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n（ '▿ ' ）\n\n(•̀⌄•́)\n\n｡◕‿◕｡\n\nヾ(❀╹◡╹)ﾉ~\n\n（*＾ワ＾*）\n\nヾ(●´∇｀●)ﾉ哇～\n\nʘᴗʘ\n\n•ᴗ•\n\n´◡`\n\n´･ᴗ･`\n\n∩_∩\n\n﹋o﹋\n\n(｡◝ᴗ◜｡)\n\n(๑`･ᴗ･´๑)\n\n^o^\n\n~\\(≧▽≦)/~\n\n-(￢∀￢)σ\n\n(ꈍᴗꈍ)\n\n---\n(ー_ー)!!\n\n┐(´-｀)┌\n\n→_→\n\n-_-||\n\n▼_▼ \n\n╭(╯ε╰)╮\n\n---\n┑(￣Д ￣)┍\n\n〣( ºΔº )〣\n\n(⊙o⊙)\n\n(╯‵□′)╯︵┻━┻\n\nヽ(‘⌒´メ)ノ\n\n╰_╯╬\n","source":"_posts/•ᴗ•颜文字•ᴗ•.md","raw":"---\ntitle: •ᴗ•颜文字•ᴗ•\ndate: 2020-04-30 11:34:21\ncategories: 其他\ntags:\n---\n\n啦啦啦啦(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n（ '▿ ' ）\n\n(•̀⌄•́)\n\n｡◕‿◕｡\n\nヾ(❀╹◡╹)ﾉ~\n\n（*＾ワ＾*）\n\nヾ(●´∇｀●)ﾉ哇～\n\nʘᴗʘ\n\n•ᴗ•\n\n´◡`\n\n´･ᴗ･`\n\n∩_∩\n\n﹋o﹋\n\n(｡◝ᴗ◜｡)\n\n(๑`･ᴗ･´๑)\n\n^o^\n\n~\\(≧▽≦)/~\n\n-(￢∀￢)σ\n\n(ꈍᴗꈍ)\n\n---\n(ー_ー)!!\n\n┐(´-｀)┌\n\n→_→\n\n-_-||\n\n▼_▼ \n\n╭(╯ε╰)╮\n\n---\n┑(￣Д ￣)┍\n\n〣( ºΔº )〣\n\n(⊙o⊙)\n\n(╯‵□′)╯︵┻━┻\n\nヽ(‘⌒´メ)ノ\n\n╰_╯╬\n","slug":"•ᴗ•颜文字•ᴗ•","published":1,"updated":"2020-09-13T01:39:25.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insn000ph9uo7pqyx486","content":"<p>啦啦啦啦(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n<p>（ ‘▿ ‘ ）</p>\n<p>(•̀⌄•́)</p>\n<p>｡◕‿◕｡</p>\n<p>ヾ(❀╹◡╹)ﾉ~</p>\n<p>（<em>＾ワ＾</em>）</p>\n<p>ヾ(●´∇｀●)ﾉ哇～</p>\n<p>ʘᴗʘ</p>\n<p>•ᴗ•</p>\n<p>´◡`</p>\n<p>´･ᴗ･`</p>\n<p>∩_∩</p>\n<p>﹋o﹋</p>\n<p>(｡◝ᴗ◜｡)</p>\n<p>(๑`･ᴗ･´๑)</p>\n<p>^o^</p>\n<p><del>(≧▽≦)/</del></p>\n<p>-(￢∀￢)σ</p>\n<p>(ꈍᴗꈍ)</p>\n<hr>\n<p>(ー_ー)!!</p>\n<p>┐(´-｀)┌</p>\n<p>→_→</p>\n<p>-_-||</p>\n<p>▼_▼ </p>\n<p>╭(╯ε╰)╮</p>\n<hr>\n<p>┑(￣Д ￣)┍</p>\n<p>〣( ºΔº )〣</p>\n<p>(⊙o⊙)</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n<p>ヽ(‘⌒´メ)ノ</p>\n<p>╰_╯╬</p>\n","site":{"data":{}},"excerpt":"<p>啦啦啦啦(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<p>（ ‘▿ ‘ ）</p>\n<p>(•̀⌄•́)</p>\n<p>｡◕‿◕｡</p>\n<p>ヾ(❀╹◡╹)ﾉ~</p>\n<p>（<em>＾ワ＾</em>）</p>\n<p>ヾ(●´∇｀●)ﾉ哇～</p>\n<p>ʘᴗʘ</p>\n<p>•ᴗ•</p>\n<p>´◡`</p>\n<p>´･ᴗ･`</p>\n<p>∩_∩</p>\n<p>﹋o﹋</p>\n<p>(｡◝ᴗ◜｡)</p>\n<p>(๑`･ᴗ･´๑)</p>\n<p>^o^</p>\n<p><del>(≧▽≦)/</del></p>\n<p>-(￢∀￢)σ</p>\n<p>(ꈍᴗꈍ)</p>\n<hr>\n<p>(ー_ー)!!</p>\n<p>┐(´-｀)┌</p>\n<p>→_→</p>\n<p>-_-||</p>\n<p>▼_▼ </p>\n<p>╭(╯ε╰)╮</p>\n<hr>\n<p>┑(￣Д ￣)┍</p>\n<p>〣( ºΔº )〣</p>\n<p>(⊙o⊙)</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n<p>ヽ(‘⌒´メ)ノ</p>\n<p>╰_╯╬</p>"},{"title":"《C语言缺陷与陷阱》读书笔记","date":"2020-05-15T09:42:11.000Z","_content":"\n\n虽然这本书已经有些古老了，但是还好，C语言相对来说也挺古老，并且近些年的变化还不算大。虽然其中描述的有些问题，现在已经不存在，或者说编译器已经将其禁止，但是依旧有很多可以学到的技巧。(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n*以下内容都是根据书中的章节目录，并且根据自己的缺陷进行记录的。*\n*如果有兴趣，推荐先阅读原著，再看笔记。*\n\n<!-- more -->\n\n### 前言\n心智模式(mental model)：被解释为‘’人们深植心中，对于周遭世界如何运作的看法和行为‘’。《心灵的新科学》中认为，人们的心智模式决定了人们如何认识周遭世界。《列子》一书中有个典型故事，说有个人遗失了一把斧头，他怀疑是邻居孩子偷的，暗中观察他的行为，怎么看怎么像偷斧子的人；后来他在自己家中找到了遗失的斧头，再碰到邻居的孩子时，怎么看也不像会是偷他斧头的人了。\n\n你是否愿意购买一个返修率很高的厂家所生产的汽车？如果厂家声明他已经做出了改进，你的态度是否会改变？用户为你找出程序中的Bug，你真正损失的是什么？\n\n### 第一章\n**词法分析**\n词法分析中的“贪心法”：尽可能长的读取字符将其作为一个符号。\n\n### 第二章\n**理解函数声明**\n`int *a `中a表示为一个int指针，相应的\n`(int *)` 表示“int指针”的强制类型转换。\n同理：\nfloat (\\*h)() 表示h是一个指向返回值为浮点数的函数指针，那么，\n(float (\\*)()) 表示“指向返回值为浮点数的函数指针”的强制类型转换。\n那么：\n`( * (void (*) () )0 ) ();`含义是什么？\n首先，`(void (*) () )`表示 “返回值为void型的函数指针”的强制转换。而强制转换的对象是0，意味着0这个地址被强制转换为了一个函数指针，而最开始的\\*表示指向函数指针所代表的地址，也就是0地址，综合起来：\n调用地址为0处的函数。\n普通调用方式：\n`fun();`\n实际上为`(*fun)();`的简写，fun实质还是一个函数指针。\n\n上述定义，我们也可以使用`typedef`来得到：\n```c\ntypedef void (*funcptr) (); \n(* (funcptr)0) ();\n```\n这里可以说明一下：`typedef`的实际功能就是为一个类型声明一个别名。在第一行代码中，我们可以理解为`funcptr=void(*)()`。那么，在第二行代码中，`funcptr`是个强制转换，只有类型，没有实际声明变量。将`funcptr`进行替换，就能得到实际的类型声明：\n`(* (void(*)())0) ();`\n书中还提到了第二种关于signal的声明 `void(*signal(int, void(*)(int)))();`等效于：\n```c\ntypedef void (*HANDLER)(int);\nHANDLER signal(int, HANDLER);\n```\n这儿`signal(int, HANDLER)`是一个`HANDLER`变量，先将其带入到`typedef`中：`void (*signal(int, HANDLER))(int);`，再将signal内部HANDLER变量声明`HANDLER=void(*)(int)`进行替换：`void (*signal(int, void(*)(int)))(int);`\n\n### 第三章\n**指针与数组**\n`int (*ap)[31]`含义是：声明了`*ap`是一个拥有31个整数元素的数组，因此ap就是指向这样一个数组的指针。注意，这里只是声明了一个指针ap，后面的`[31]`是在表示这个指针的类型。更加通俗：假如声明`int A[31]`,那么`A=(*ap)`,即`ap=&A`.所有操作将`A`和`(*ap)`进行等效替换就行了。\n```c\nchar *hello;\nchar hello[];\n```\n这两种声明第一种是一个指向char类型的指针，第二种是代表指向一个char数组的指针。明显第一种范围更广。如果使用中都是代表一个char数组指针的时候，二者是等效的，在参数传递中混用编译器也不会报错。主要是看哪种更能表现出自己的意图。例如：\n```c\nmain(int argc, char *argv[]){\n}\nmain(int argc, char **argv){\n}\n```\n两种写法都等效，唯一不同就在第一种更加强调`argv`是某一字符串的起始地址。而通常我们也是更关心某个传入参数，而不是某个参数中的某个字符。\n\n### 第五章\n**使用errno检测错误**\n用处是检测最后一次系统错误。当调用某个与系统相关的函数，返回的是错误值时，可以调用此函数。(猜测：库函数中应该都会有错误码)\n**库函数signal**\n函数声明形式：\n```c\n#include <signal.h>\nsignal(signal type, handle function);\n```\n这个函数时非常有用的，特别是针对出现段错误的情况。当出现段错误时，会发出`SIGSEGV`信号给程序，而程序中一开始调用了`signal`后，它将会接收对应信号量并使用相应的`function`来处理。我们在处理函数中使用`backtrace`及相关的函数即可将发生段错误时的函数堆栈信息打印出来，即可追溯到对应的错误函数。\n下面是[参考其他人](\nhttps://blog.csdn.net/astrotycoon/article/details/8142588)后进行了相应修改的代码：\n```c\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <execinfo.h>\n#include <signal.h>\n#include <unistd.h>\n#include <string.h>\n \nvoid dump(int sig)\n{\n    void* array[128];\n    size_t arr_size, i;\n    char **strings = NULL;\n    signal(SIGSEGV, SIG_IGN);\n    //signal(other signal type, SIG_IGN);\n    \n    arr_size = backtrace (array, sizeof(array)/sizeof(array[0]));\n    strings = backtrace_symbols (array, arr_size);\n    printf(\"Signal:[%s], PID:(%d), Stack trace:\\n\", strsignal(sig), getpid());  \n    if (strings) {\n        for (i = 0; i < arr_size; i++) {\n            printf( \"%ld: %s\\n\", i + 1, strings[i]);\n        }\n        free (strings);\n    }\n    raise(sig);\n}\nvoid func_c()\n{\n    char *segement = NULL;\n    printf(\"%s\\n\",segement);\n}\n \nvoid func_b()\n{\n    func_c();\n}\n \nvoid func_a()\n{\n    func_b();\n}\n \nint main(int argc, const char *argv[])\n{\n    if (signal(SIGSEGV, dump) == SIG_ERR)\n        perror(\"can't catch SIGSEGV\");\n    func_a();\n    return 0;\n}\n```\n编译命令：\n`gcc -g -rdynamic signal.c -o a.out`\n这里需要注意，添加-O2进行优化后，可能导致backtrace_symbols输出不了函数名。其最终结果如下：\n```c\nSignal:[Segmentation fault], PID:(4248), Stack trace:\n1: ./a.out(dump+0x3d) [0x400afa]\n2: /lib64/libc.so.6(+0x35270) [0x7f20db113270]\n3: /lib64/libc.so.6(+0x86c31) [0x7f20db164c31]\n4: /lib64/libc.so.6(_IO_puts+0xc) [0x7f20db14af2c]\n5: ./a.out(func_c+0x1c) [0x400bd5]\n6: ./a.out(func_b+0xe) [0x400be5]\n7: ./a.out(func_a+0xe) [0x400bf5]\n8: ./a.out(main+0x38) [0x400c2f]\n9: /lib64/libc.so.6(__libc_start_main+0xf5) [0x7f20db0ffc05]\n10: ./a.out() [0x4009f9]\nSegmentation fault (core dumped)\n```\n这里可以非常明显的看到，是执行a.out时其中func_c函数出错，而其错误是由于IO输出导致的。简直不要太明显。\n如果添加了优化选项，代码结构会改变，不方便定位。\n添加-O2选项后的输出：\n```c\nSignal:[Segmentation fault], PID:(4367), Stack trace:\n1: ./a.out(dump+0x2c) [0x400b1c]\n2: /lib64/libc.so.6(+0x35270) [0x7fd5b3951270]\n3: /lib64/libc.so.6(+0x86c31) [0x7fd5b39a2c31]\n4: /lib64/libc.so.6(_IO_puts+0xc) [0x7fd5b3988f2c]\n5: ./a.out(main+0x20) [0x4009f0]\n6: /lib64/libc.so.6(__libc_start_main+0xf5) [0x7fd5b393dc05]\n7: ./a.out() [0x400a2c]\nSegmentation fault (core dumped)\n```\n我们可以把可执行文件编程汇编代码，看看发生了啥\n`objdump -d a.out > a.s`\na.s中对应的出错位置就是在[0x4009f0]地址处，而这个地址也实实在在的在main函数中：\n![优化后汇编代码](《C陷阱与缺陷》读书笔记/优化后汇编代码.png)\n优化过程中删减了中间两层的函数调用。厉害。也正是因为这样，导致在函数跟踪的时候，只能到看到main函数。\n而没有优化过的代码，就和原始结构一样：\n![原始汇编代码](《C陷阱与缺陷》读书笔记/原始汇编代码.png)\n\n### 第六章\n\n简单一句话概括，define功能就是做宏替换，它啥功能也没有，就是简简单单的字符替换。\n### 第七章\n主要讲的是移植性问题，虽然C最初开发的目的就是为了可移植性。但是后续不断的发展，导致C上层库出现了偏差，最显而易见的就是windows和linux的C代码兼容性很差，特别是系统调用级别的，基本是两套api了。\n其中还讲到了关于内存重复利用问题，也就是realloc函数。主要用途还是用于原有的空间不够，进行扩展。这样是比你free掉之前的空间，然后重新malloc要快。并且realloc时，是可以拷贝数据到新的地方的。当然，realloc的空间小于之前的空间，那么会产生截断。总之，realloc时需要有很多注意事项，如果不是对空间利用率有较高的要求，可以不用使用。\n### 第八章\n建议，尽量在写代码的时候，多想，特别是结构。代码写完后多检查，测试。\n尽量覆盖异常问题，但避免过多的防御式编程。\n### 总结\n这本书还是相当的老了，很多书中的问题，在现在来看已经不是问题。但是还是有些地方的提出的注意事项，值得参考和学习。加上全书不长，可以快速一看，然后发现自己缺失的点即可。\n2020.5.7","source":"_posts/《C语言缺陷与陷阱》读书笔记.md","raw":"---\ntitle: 《C语言缺陷与陷阱》读书笔记\ndate: 2020-05-15 17:42:11\ncategories: 笔记\ntags: [C]\n---\n\n\n虽然这本书已经有些古老了，但是还好，C语言相对来说也挺古老，并且近些年的变化还不算大。虽然其中描述的有些问题，现在已经不存在，或者说编译器已经将其禁止，但是依旧有很多可以学到的技巧。(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n*以下内容都是根据书中的章节目录，并且根据自己的缺陷进行记录的。*\n*如果有兴趣，推荐先阅读原著，再看笔记。*\n\n<!-- more -->\n\n### 前言\n心智模式(mental model)：被解释为‘’人们深植心中，对于周遭世界如何运作的看法和行为‘’。《心灵的新科学》中认为，人们的心智模式决定了人们如何认识周遭世界。《列子》一书中有个典型故事，说有个人遗失了一把斧头，他怀疑是邻居孩子偷的，暗中观察他的行为，怎么看怎么像偷斧子的人；后来他在自己家中找到了遗失的斧头，再碰到邻居的孩子时，怎么看也不像会是偷他斧头的人了。\n\n你是否愿意购买一个返修率很高的厂家所生产的汽车？如果厂家声明他已经做出了改进，你的态度是否会改变？用户为你找出程序中的Bug，你真正损失的是什么？\n\n### 第一章\n**词法分析**\n词法分析中的“贪心法”：尽可能长的读取字符将其作为一个符号。\n\n### 第二章\n**理解函数声明**\n`int *a `中a表示为一个int指针，相应的\n`(int *)` 表示“int指针”的强制类型转换。\n同理：\nfloat (\\*h)() 表示h是一个指向返回值为浮点数的函数指针，那么，\n(float (\\*)()) 表示“指向返回值为浮点数的函数指针”的强制类型转换。\n那么：\n`( * (void (*) () )0 ) ();`含义是什么？\n首先，`(void (*) () )`表示 “返回值为void型的函数指针”的强制转换。而强制转换的对象是0，意味着0这个地址被强制转换为了一个函数指针，而最开始的\\*表示指向函数指针所代表的地址，也就是0地址，综合起来：\n调用地址为0处的函数。\n普通调用方式：\n`fun();`\n实际上为`(*fun)();`的简写，fun实质还是一个函数指针。\n\n上述定义，我们也可以使用`typedef`来得到：\n```c\ntypedef void (*funcptr) (); \n(* (funcptr)0) ();\n```\n这里可以说明一下：`typedef`的实际功能就是为一个类型声明一个别名。在第一行代码中，我们可以理解为`funcptr=void(*)()`。那么，在第二行代码中，`funcptr`是个强制转换，只有类型，没有实际声明变量。将`funcptr`进行替换，就能得到实际的类型声明：\n`(* (void(*)())0) ();`\n书中还提到了第二种关于signal的声明 `void(*signal(int, void(*)(int)))();`等效于：\n```c\ntypedef void (*HANDLER)(int);\nHANDLER signal(int, HANDLER);\n```\n这儿`signal(int, HANDLER)`是一个`HANDLER`变量，先将其带入到`typedef`中：`void (*signal(int, HANDLER))(int);`，再将signal内部HANDLER变量声明`HANDLER=void(*)(int)`进行替换：`void (*signal(int, void(*)(int)))(int);`\n\n### 第三章\n**指针与数组**\n`int (*ap)[31]`含义是：声明了`*ap`是一个拥有31个整数元素的数组，因此ap就是指向这样一个数组的指针。注意，这里只是声明了一个指针ap，后面的`[31]`是在表示这个指针的类型。更加通俗：假如声明`int A[31]`,那么`A=(*ap)`,即`ap=&A`.所有操作将`A`和`(*ap)`进行等效替换就行了。\n```c\nchar *hello;\nchar hello[];\n```\n这两种声明第一种是一个指向char类型的指针，第二种是代表指向一个char数组的指针。明显第一种范围更广。如果使用中都是代表一个char数组指针的时候，二者是等效的，在参数传递中混用编译器也不会报错。主要是看哪种更能表现出自己的意图。例如：\n```c\nmain(int argc, char *argv[]){\n}\nmain(int argc, char **argv){\n}\n```\n两种写法都等效，唯一不同就在第一种更加强调`argv`是某一字符串的起始地址。而通常我们也是更关心某个传入参数，而不是某个参数中的某个字符。\n\n### 第五章\n**使用errno检测错误**\n用处是检测最后一次系统错误。当调用某个与系统相关的函数，返回的是错误值时，可以调用此函数。(猜测：库函数中应该都会有错误码)\n**库函数signal**\n函数声明形式：\n```c\n#include <signal.h>\nsignal(signal type, handle function);\n```\n这个函数时非常有用的，特别是针对出现段错误的情况。当出现段错误时，会发出`SIGSEGV`信号给程序，而程序中一开始调用了`signal`后，它将会接收对应信号量并使用相应的`function`来处理。我们在处理函数中使用`backtrace`及相关的函数即可将发生段错误时的函数堆栈信息打印出来，即可追溯到对应的错误函数。\n下面是[参考其他人](\nhttps://blog.csdn.net/astrotycoon/article/details/8142588)后进行了相应修改的代码：\n```c\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <execinfo.h>\n#include <signal.h>\n#include <unistd.h>\n#include <string.h>\n \nvoid dump(int sig)\n{\n    void* array[128];\n    size_t arr_size, i;\n    char **strings = NULL;\n    signal(SIGSEGV, SIG_IGN);\n    //signal(other signal type, SIG_IGN);\n    \n    arr_size = backtrace (array, sizeof(array)/sizeof(array[0]));\n    strings = backtrace_symbols (array, arr_size);\n    printf(\"Signal:[%s], PID:(%d), Stack trace:\\n\", strsignal(sig), getpid());  \n    if (strings) {\n        for (i = 0; i < arr_size; i++) {\n            printf( \"%ld: %s\\n\", i + 1, strings[i]);\n        }\n        free (strings);\n    }\n    raise(sig);\n}\nvoid func_c()\n{\n    char *segement = NULL;\n    printf(\"%s\\n\",segement);\n}\n \nvoid func_b()\n{\n    func_c();\n}\n \nvoid func_a()\n{\n    func_b();\n}\n \nint main(int argc, const char *argv[])\n{\n    if (signal(SIGSEGV, dump) == SIG_ERR)\n        perror(\"can't catch SIGSEGV\");\n    func_a();\n    return 0;\n}\n```\n编译命令：\n`gcc -g -rdynamic signal.c -o a.out`\n这里需要注意，添加-O2进行优化后，可能导致backtrace_symbols输出不了函数名。其最终结果如下：\n```c\nSignal:[Segmentation fault], PID:(4248), Stack trace:\n1: ./a.out(dump+0x3d) [0x400afa]\n2: /lib64/libc.so.6(+0x35270) [0x7f20db113270]\n3: /lib64/libc.so.6(+0x86c31) [0x7f20db164c31]\n4: /lib64/libc.so.6(_IO_puts+0xc) [0x7f20db14af2c]\n5: ./a.out(func_c+0x1c) [0x400bd5]\n6: ./a.out(func_b+0xe) [0x400be5]\n7: ./a.out(func_a+0xe) [0x400bf5]\n8: ./a.out(main+0x38) [0x400c2f]\n9: /lib64/libc.so.6(__libc_start_main+0xf5) [0x7f20db0ffc05]\n10: ./a.out() [0x4009f9]\nSegmentation fault (core dumped)\n```\n这里可以非常明显的看到，是执行a.out时其中func_c函数出错，而其错误是由于IO输出导致的。简直不要太明显。\n如果添加了优化选项，代码结构会改变，不方便定位。\n添加-O2选项后的输出：\n```c\nSignal:[Segmentation fault], PID:(4367), Stack trace:\n1: ./a.out(dump+0x2c) [0x400b1c]\n2: /lib64/libc.so.6(+0x35270) [0x7fd5b3951270]\n3: /lib64/libc.so.6(+0x86c31) [0x7fd5b39a2c31]\n4: /lib64/libc.so.6(_IO_puts+0xc) [0x7fd5b3988f2c]\n5: ./a.out(main+0x20) [0x4009f0]\n6: /lib64/libc.so.6(__libc_start_main+0xf5) [0x7fd5b393dc05]\n7: ./a.out() [0x400a2c]\nSegmentation fault (core dumped)\n```\n我们可以把可执行文件编程汇编代码，看看发生了啥\n`objdump -d a.out > a.s`\na.s中对应的出错位置就是在[0x4009f0]地址处，而这个地址也实实在在的在main函数中：\n![优化后汇编代码](《C陷阱与缺陷》读书笔记/优化后汇编代码.png)\n优化过程中删减了中间两层的函数调用。厉害。也正是因为这样，导致在函数跟踪的时候，只能到看到main函数。\n而没有优化过的代码，就和原始结构一样：\n![原始汇编代码](《C陷阱与缺陷》读书笔记/原始汇编代码.png)\n\n### 第六章\n\n简单一句话概括，define功能就是做宏替换，它啥功能也没有，就是简简单单的字符替换。\n### 第七章\n主要讲的是移植性问题，虽然C最初开发的目的就是为了可移植性。但是后续不断的发展，导致C上层库出现了偏差，最显而易见的就是windows和linux的C代码兼容性很差，特别是系统调用级别的，基本是两套api了。\n其中还讲到了关于内存重复利用问题，也就是realloc函数。主要用途还是用于原有的空间不够，进行扩展。这样是比你free掉之前的空间，然后重新malloc要快。并且realloc时，是可以拷贝数据到新的地方的。当然，realloc的空间小于之前的空间，那么会产生截断。总之，realloc时需要有很多注意事项，如果不是对空间利用率有较高的要求，可以不用使用。\n### 第八章\n建议，尽量在写代码的时候，多想，特别是结构。代码写完后多检查，测试。\n尽量覆盖异常问题，但避免过多的防御式编程。\n### 总结\n这本书还是相当的老了，很多书中的问题，在现在来看已经不是问题。但是还是有些地方的提出的注意事项，值得参考和学习。加上全书不长，可以快速一看，然后发现自己缺失的点即可。\n2020.5.7","slug":"《C语言缺陷与陷阱》读书笔记","published":1,"updated":"2020-09-13T01:39:25.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insu000qh9uonz82bhvv","content":"<p>虽然这本书已经有些古老了，但是还好，C语言相对来说也挺古老，并且近些年的变化还不算大。虽然其中描述的有些问题，现在已经不存在，或者说编译器已经将其禁止，但是依旧有很多可以学到的技巧。(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em>以下内容都是根据书中的章节目录，并且根据自己的缺陷进行记录的。</em><br><em>如果有兴趣，推荐先阅读原著，再看笔记。</em></p>\n<a id=\"more\"></a>\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>心智模式(mental model)：被解释为‘’人们深植心中，对于周遭世界如何运作的看法和行为‘’。《心灵的新科学》中认为，人们的心智模式决定了人们如何认识周遭世界。《列子》一书中有个典型故事，说有个人遗失了一把斧头，他怀疑是邻居孩子偷的，暗中观察他的行为，怎么看怎么像偷斧子的人；后来他在自己家中找到了遗失的斧头，再碰到邻居的孩子时，怎么看也不像会是偷他斧头的人了。</p>\n<p>你是否愿意购买一个返修率很高的厂家所生产的汽车？如果厂家声明他已经做出了改进，你的态度是否会改变？用户为你找出程序中的Bug，你真正损失的是什么？</p>\n<h3 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h3><p><strong>词法分析</strong><br>词法分析中的“贪心法”：尽可能长的读取字符将其作为一个符号。</p>\n<h3 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h3><p><strong>理解函数声明</strong><br><code>int *a </code>中a表示为一个int指针，相应的<br><code>(int *)</code> 表示“int指针”的强制类型转换。<br>同理：<br>float (*h)() 表示h是一个指向返回值为浮点数的函数指针，那么，<br>(float (*)()) 表示“指向返回值为浮点数的函数指针”的强制类型转换。<br>那么：<br><code>( * (void (*) () )0 ) ();</code>含义是什么？<br>首先，<code>(void (*) () )</code>表示 “返回值为void型的函数指针”的强制转换。而强制转换的对象是0，意味着0这个地址被强制转换为了一个函数指针，而最开始的*表示指向函数指针所代表的地址，也就是0地址，综合起来：<br>调用地址为0处的函数。<br>普通调用方式：<br><code>fun();</code><br>实际上为<code>(*fun)();</code>的简写，fun实质还是一个函数指针。</p>\n<p>上述定义，我们也可以使用<code>typedef</code>来得到：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*funcptr)</span> <span class=\"params\">()</span></span>; </span><br><span class=\"line\">(* (funcptr)<span class=\"number\">0</span>) ();</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这里可以说明一下：<code>typedef</code>的实际功能就是为一个类型声明一个别名。在第一行代码中，我们可以理解为<code>funcptr=void(*)()</code>。那么，在第二行代码中，<code>funcptr</code>是个强制转换，只有类型，没有实际声明变量。将<code>funcptr</code>进行替换，就能得到实际的类型声明：<br><code>(* (void(*)())0) ();</code><br>书中还提到了第二种关于signal的声明 <code>void(*signal(int, void(*)(int)))();</code>等效于：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*HANDLER)</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">HANDLER <span class=\"title\">signal</span><span class=\"params\">(<span class=\"keyword\">int</span>, HANDLER)</span></span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这儿<code>signal(int, HANDLER)</code>是一个<code>HANDLER</code>变量，先将其带入到<code>typedef</code>中：<code>void (*signal(int, HANDLER))(int);</code>，再将signal内部HANDLER变量声明<code>HANDLER=void(*)(int)</code>进行替换：<code>void (*signal(int, void(*)(int)))(int);</code></p>\n<h3 id=\"第三章\"><a href=\"#第三章\" class=\"headerlink\" title=\"第三章\"></a>第三章</h3><p><strong>指针与数组</strong><br><code>int (*ap)[31]</code>含义是：声明了<code>*ap</code>是一个拥有31个整数元素的数组，因此ap就是指向这样一个数组的指针。注意，这里只是声明了一个指针ap，后面的<code>[31]</code>是在表示这个指针的类型。更加通俗：假如声明<code>int A[31]</code>,那么<code>A=(*ap)</code>,即<code>ap=&amp;A</code>.所有操作将<code>A</code>和<code>(*ap)</code>进行等效替换就行了。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *hello;</span><br><span class=\"line\"><span class=\"keyword\">char</span> hello[];</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这两种声明第一种是一个指向char类型的指针，第二种是代表指向一个char数组的指针。明显第一种范围更广。如果使用中都是代表一个char数组指针的时候，二者是等效的，在参数传递中混用编译器也不会报错。主要是看哪种更能表现出自己的意图。例如：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[]){</span><br><span class=\"line\">}</span><br><span class=\"line\">main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv){</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>两种写法都等效，唯一不同就在第一种更加强调<code>argv</code>是某一字符串的起始地址。而通常我们也是更关心某个传入参数，而不是某个参数中的某个字符。</p>\n<h3 id=\"第五章\"><a href=\"#第五章\" class=\"headerlink\" title=\"第五章\"></a>第五章</h3><p><strong>使用errno检测错误</strong><br>用处是检测最后一次系统错误。当调用某个与系统相关的函数，返回的是错误值时，可以调用此函数。(猜测：库函数中应该都会有错误码)<br><strong>库函数signal</strong><br>函数声明形式：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\">signal(signal type, handle function);</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这个函数时非常有用的，特别是针对出现段错误的情况。当出现段错误时，会发出<code>SIGSEGV</code>信号给程序，而程序中一开始调用了<code>signal</code>后，它将会接收对应信号量并使用相应的<code>function</code>来处理。我们在处理函数中使用<code>backtrace</code>及相关的函数即可将发生段错误时的函数堆栈信息打印出来，即可追溯到对应的错误函数。<br>下面是<a href=\"https://blog.csdn.net/astrotycoon/article/details/8142588\" target=\"_blank\" rel=\"noopener\">参考其他人</a>后进行了相应修改的代码：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&nbsp;<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&nbsp;<span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&nbsp;<span class=\"meta-string\">&lt;stddef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&nbsp;<span class=\"meta-string\">&lt;execinfo.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&nbsp;<span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&nbsp;<span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>&nbsp;<span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\">&nbsp;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>&nbsp;<span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span>&nbsp;sig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">void</span>*&nbsp;<span class=\"built_in\">array</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">size_t</span>&nbsp;arr_size,&nbsp;i;</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">char</span>&nbsp;**strings&nbsp;=&nbsp;<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;signal(SIGSEGV,&nbsp;SIG_IGN);</span><br><span class=\"line\">    <span class=\"comment\">//signal(other signal type,&nbsp;SIG_IGN);</span></span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;arr_size&nbsp;=&nbsp;backtrace&nbsp;(<span class=\"built_in\">array</span>,&nbsp;<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>)/<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>[<span class=\"number\">0</span>]));</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;strings&nbsp;=&nbsp;backtrace_symbols&nbsp;(<span class=\"built_in\">array</span>,&nbsp;arr_size);</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"built_in\">printf</span>(<span class=\"string\">\"Signal:[%s],&nbsp;PID:(%d),&nbsp;Stack&nbsp;trace:\\n\"</span>,&nbsp;strsignal(sig),&nbsp;getpid());&nbsp;&nbsp;</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>&nbsp;(strings)&nbsp;{</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">for</span>&nbsp;(i&nbsp;=&nbsp;<span class=\"number\">0</span>;&nbsp;i&nbsp;&lt;&nbsp;arr_size;&nbsp;i++)&nbsp;{</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"built_in\">printf</span>(&nbsp;<span class=\"string\">\"%ld:&nbsp;%s\\n\"</span>,&nbsp;i&nbsp;+&nbsp;<span class=\"number\">1</span>,&nbsp;strings[i]);</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"built_in\">free</span>&nbsp;(strings);</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;}</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;raise(sig);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>&nbsp;<span class=\"title\">func_c</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">char</span>&nbsp;*segement&nbsp;=&nbsp;<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,segement);</span><br><span class=\"line\">}</span><br><span class=\"line\">&nbsp;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>&nbsp;<span class=\"title\">func_b</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;func_c();</span><br><span class=\"line\">}</span><br><span class=\"line\">&nbsp;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>&nbsp;<span class=\"title\">func_a</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;func_b();</span><br><span class=\"line\">}</span><br><span class=\"line\">&nbsp;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>&nbsp;<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span>&nbsp;argc,&nbsp;<span class=\"keyword\">const</span>&nbsp;<span class=\"keyword\">char</span>&nbsp;*argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">if</span>&nbsp;(signal(SIGSEGV,&nbsp;dump)&nbsp;==&nbsp;SIG_ERR)</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perror(<span class=\"string\">\"can't&nbsp;catch&nbsp;SIGSEGV\"</span>);</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;func_a();</span><br><span class=\"line\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\">return</span>&nbsp;<span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>编译命令：<br><code>gcc -g -rdynamic signal.c -o a.out</code><br>这里需要注意，添加-O2进行优化后，可能导致backtrace_symbols输出不了函数名。其最终结果如下：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Signal:[Segmentation fault], PID:(<span class=\"number\">4248</span>), Stack trace:</span><br><span class=\"line\"><span class=\"number\">1</span>: ./a.out(dump+<span class=\"number\">0x3d</span>) [<span class=\"number\">0x400afa</span>]</span><br><span class=\"line\"><span class=\"number\">2</span>: /lib64/libc.so<span class=\"number\">.6</span>(+<span class=\"number\">0x35270</span>) [<span class=\"number\">0x7f20db113270</span>]</span><br><span class=\"line\"><span class=\"number\">3</span>: /lib64/libc.so<span class=\"number\">.6</span>(+<span class=\"number\">0x86c31</span>) [<span class=\"number\">0x7f20db164c31</span>]</span><br><span class=\"line\"><span class=\"number\">4</span>: /lib64/libc.so<span class=\"number\">.6</span>(_IO_puts+<span class=\"number\">0xc</span>) [<span class=\"number\">0x7f20db14af2c</span>]</span><br><span class=\"line\"><span class=\"number\">5</span>: ./a.out(func_c+<span class=\"number\">0x1c</span>) [<span class=\"number\">0x400bd5</span>]</span><br><span class=\"line\"><span class=\"number\">6</span>: ./a.out(func_b+<span class=\"number\">0xe</span>) [<span class=\"number\">0x400be5</span>]</span><br><span class=\"line\"><span class=\"number\">7</span>: ./a.out(func_a+<span class=\"number\">0xe</span>) [<span class=\"number\">0x400bf5</span>]</span><br><span class=\"line\"><span class=\"number\">8</span>: ./a.out(main+<span class=\"number\">0x38</span>) [<span class=\"number\">0x400c2f</span>]</span><br><span class=\"line\"><span class=\"number\">9</span>: /lib64/libc.so<span class=\"number\">.6</span>(__libc_start_main+<span class=\"number\">0xf5</span>) [<span class=\"number\">0x7f20db0ffc05</span>]</span><br><span class=\"line\"><span class=\"number\">10</span>: ./a.out() [<span class=\"number\">0x4009f9</span>]</span><br><span class=\"line\"><span class=\"function\">Segmentation <span class=\"title\">fault</span> <span class=\"params\">(core dumped)</span></span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>这里可以非常明显的看到，是执行a.out时其中func_c函数出错，而其错误是由于IO输出导致的。简直不要太明显。<br>如果添加了优化选项，代码结构会改变，不方便定位。<br>添加-O2选项后的输出：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Signal:[Segmentation fault], PID:(<span class=\"number\">4367</span>), Stack trace:</span><br><span class=\"line\"><span class=\"number\">1</span>: ./a.out(dump+<span class=\"number\">0x2c</span>) [<span class=\"number\">0x400b1c</span>]</span><br><span class=\"line\"><span class=\"number\">2</span>: /lib64/libc.so<span class=\"number\">.6</span>(+<span class=\"number\">0x35270</span>) [<span class=\"number\">0x7fd5b3951270</span>]</span><br><span class=\"line\"><span class=\"number\">3</span>: /lib64/libc.so<span class=\"number\">.6</span>(+<span class=\"number\">0x86c31</span>) [<span class=\"number\">0x7fd5b39a2c31</span>]</span><br><span class=\"line\"><span class=\"number\">4</span>: /lib64/libc.so<span class=\"number\">.6</span>(_IO_puts+<span class=\"number\">0xc</span>) [<span class=\"number\">0x7fd5b3988f2c</span>]</span><br><span class=\"line\"><span class=\"number\">5</span>: ./a.out(main+<span class=\"number\">0x20</span>) [<span class=\"number\">0x4009f0</span>]</span><br><span class=\"line\"><span class=\"number\">6</span>: /lib64/libc.so<span class=\"number\">.6</span>(__libc_start_main+<span class=\"number\">0xf5</span>) [<span class=\"number\">0x7fd5b393dc05</span>]</span><br><span class=\"line\"><span class=\"number\">7</span>: ./a.out() [<span class=\"number\">0x400a2c</span>]</span><br><span class=\"line\"><span class=\"function\">Segmentation <span class=\"title\">fault</span> <span class=\"params\">(core dumped)</span></span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>我们可以把可执行文件编程汇编代码，看看发生了啥<br><code>objdump -d a.out &gt; a.s</code><br>a.s中对应的出错位置就是在[0x4009f0]地址处，而这个地址也实实在在的在main函数中：<br><img src=\"/2020/05/15/《C语言缺陷与陷阱》读书笔记/%E4%BC%98%E5%8C%96%E5%90%8E%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81.png\" alt=\"优化后汇编代码\"><br>优化过程中删减了中间两层的函数调用。厉害。也正是因为这样，导致在函数跟踪的时候，只能到看到main函数。<br>而没有优化过的代码，就和原始结构一样：<br><img src=\"/2020/05/15/《C语言缺陷与陷阱》读书笔记/%E5%8E%9F%E5%A7%8B%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81.png\" alt=\"原始汇编代码\"></p>\n<h3 id=\"第六章\"><a href=\"#第六章\" class=\"headerlink\" title=\"第六章\"></a>第六章</h3><p>简单一句话概括，define功能就是做宏替换，它啥功能也没有，就是简简单单的字符替换。</p>\n<h3 id=\"第七章\"><a href=\"#第七章\" class=\"headerlink\" title=\"第七章\"></a>第七章</h3><p>主要讲的是移植性问题，虽然C最初开发的目的就是为了可移植性。但是后续不断的发展，导致C上层库出现了偏差，最显而易见的就是windows和linux的C代码兼容性很差，特别是系统调用级别的，基本是两套api了。<br>其中还讲到了关于内存重复利用问题，也就是realloc函数。主要用途还是用于原有的空间不够，进行扩展。这样是比你free掉之前的空间，然后重新malloc要快。并且realloc时，是可以拷贝数据到新的地方的。当然，realloc的空间小于之前的空间，那么会产生截断。总之，realloc时需要有很多注意事项，如果不是对空间利用率有较高的要求，可以不用使用。</p>\n<h3 id=\"第八章\"><a href=\"#第八章\" class=\"headerlink\" title=\"第八章\"></a>第八章</h3><p>建议，尽量在写代码的时候，多想，特别是结构。代码写完后多检查，测试。<br>尽量覆盖异常问题，但避免过多的防御式编程。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这本书还是相当的老了，很多书中的问题，在现在来看已经不是问题。但是还是有些地方的提出的注意事项，值得参考和学习。加上全书不长，可以快速一看，然后发现自己缺失的点即可。<br>2020.5.7</p>\n","site":{"data":{}},"excerpt":"<p>虽然这本书已经有些古老了，但是还好，C语言相对来说也挺古老，并且近些年的变化还不算大。虽然其中描述的有些问题，现在已经不存在，或者说编译器已经将其禁止，但是依旧有很多可以学到的技巧。(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em>以下内容都是根据书中的章节目录，并且根据自己的缺陷进行记录的。</em><br><em>如果有兴趣，推荐先阅读原著，再看笔记。</em></p>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>心智模式(mental model)：被解释为‘’人们深植心中，对于周遭世界如何运作的看法和行为‘’。《心灵的新科学》中认为，人们的心智模式决定了人们如何认识周遭世界。《列子》一书中有个典型故事，说有个人遗失了一把斧头，他怀疑是邻居孩子偷的，暗中观察他的行为，怎么看怎么像偷斧子的人；后来他在自己家中找到了遗失的斧头，再碰到邻居的孩子时，怎么看也不像会是偷他斧头的人了。</p>\n<p>你是否愿意购买一个返修率很高的厂家所生产的汽车？如果厂家声明他已经做出了改进，你的态度是否会改变？用户为你找出程序中的Bug，你真正损失的是什么？</p>\n<h3 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h3><p><strong>词法分析</strong><br>词法分析中的“贪心法”：尽可能长的读取字符将其作为一个符号。</p>\n<h3 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h3><p><strong>理解函数声明</strong><br><code>int *a </code>中a表示为一个int指针，相应的<br><code>(int *)</code> 表示“int指针”的强制类型转换。<br>同理：<br>float (*h)() 表示h是一个指向返回值为浮点数的函数指针，那么，<br>(float (*)()) 表示“指向返回值为浮点数的函数指针”的强制类型转换。<br>那么：<br><code>( * (void (*) () )0 ) ();</code>含义是什么？<br>首先，<code>(void (*) () )</code>表示 “返回值为void型的函数指针”的强制转换。而强制转换的对象是0，意味着0这个地址被强制转换为了一个函数指针，而最开始的*表示指向函数指针所代表的地址，也就是0地址，综合起来：<br>调用地址为0处的函数。<br>普通调用方式：<br><code>fun();</code><br>实际上为<code>(*fun)();</code>的简写，fun实质还是一个函数指针。</p>\n<p>上述定义，我们也可以使用<code>typedef</code>来得到：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*funcptr)</span> <span class=\"params\">()</span></span>; </span><br><span class=\"line\">(* (funcptr)<span class=\"number\">0</span>) ();</span><br></pre></td></tr></table></figure>\n\n<p>这里可以说明一下：<code>typedef</code>的实际功能就是为一个类型声明一个别名。在第一行代码中，我们可以理解为<code>funcptr=void(*)()</code>。那么，在第二行代码中，<code>funcptr</code>是个强制转换，只有类型，没有实际声明变量。将<code>funcptr</code>进行替换，就能得到实际的类型声明：<br><code>(* (void(*)())0) ();</code><br>书中还提到了第二种关于signal的声明 <code>void(*signal(int, void(*)(int)))();</code>等效于：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*HANDLER)</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">HANDLER <span class=\"title\">signal</span><span class=\"params\">(<span class=\"keyword\">int</span>, HANDLER)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>这儿<code>signal(int, HANDLER)</code>是一个<code>HANDLER</code>变量，先将其带入到<code>typedef</code>中：<code>void (*signal(int, HANDLER))(int);</code>，再将signal内部HANDLER变量声明<code>HANDLER=void(*)(int)</code>进行替换：<code>void (*signal(int, void(*)(int)))(int);</code></p>\n<h3 id=\"第三章\"><a href=\"#第三章\" class=\"headerlink\" title=\"第三章\"></a>第三章</h3><p><strong>指针与数组</strong><br><code>int (*ap)[31]</code>含义是：声明了<code>*ap</code>是一个拥有31个整数元素的数组，因此ap就是指向这样一个数组的指针。注意，这里只是声明了一个指针ap，后面的<code>[31]</code>是在表示这个指针的类型。更加通俗：假如声明<code>int A[31]</code>,那么<code>A=(*ap)</code>,即<code>ap=&amp;A</code>.所有操作将<code>A</code>和<code>(*ap)</code>进行等效替换就行了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *hello;</span><br><span class=\"line\"><span class=\"keyword\">char</span> hello[];</span><br></pre></td></tr></table></figure>\n\n<p>这两种声明第一种是一个指向char类型的指针，第二种是代表指向一个char数组的指针。明显第一种范围更广。如果使用中都是代表一个char数组指针的时候，二者是等效的，在参数传递中混用编译器也不会报错。主要是看哪种更能表现出自己的意图。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两种写法都等效，唯一不同就在第一种更加强调<code>argv</code>是某一字符串的起始地址。而通常我们也是更关心某个传入参数，而不是某个参数中的某个字符。</p>\n<h3 id=\"第五章\"><a href=\"#第五章\" class=\"headerlink\" title=\"第五章\"></a>第五章</h3><p><strong>使用errno检测错误</strong><br>用处是检测最后一次系统错误。当调用某个与系统相关的函数，返回的是错误值时，可以调用此函数。(猜测：库函数中应该都会有错误码)<br><strong>库函数signal</strong><br>函数声明形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\">signal(signal type, handle function);</span><br></pre></td></tr></table></figure>\n\n<p>这个函数时非常有用的，特别是针对出现段错误的情况。当出现段错误时，会发出<code>SIGSEGV</code>信号给程序，而程序中一开始调用了<code>signal</code>后，它将会接收对应信号量并使用相应的<code>function</code>来处理。我们在处理函数中使用<code>backtrace</code>及相关的函数即可将发生段错误时的函数堆栈信息打印出来，即可追溯到对应的错误函数。<br>下面是<a href=\"https://blog.csdn.net/astrotycoon/article/details/8142588\" target=\"_blank\" rel=\"noopener\">参考其他人</a>后进行了相应修改的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stddef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;execinfo.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span>* <span class=\"built_in\">array</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> arr_size, i;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> **strings = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    signal(SIGSEGV, SIG_IGN);</span><br><span class=\"line\">    <span class=\"comment\">//signal(other signal type, SIG_IGN);</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    arr_size = backtrace (<span class=\"built_in\">array</span>, <span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>)/<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    strings = backtrace_symbols (<span class=\"built_in\">array</span>, arr_size);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Signal:[%s], PID:(%d), Stack trace:\\n\"</span>, strsignal(sig), getpid());  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strings) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; arr_size; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>( <span class=\"string\">\"%ld: %s\\n\"</span>, i + <span class=\"number\">1</span>, strings[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">free</span> (strings);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    raise(sig);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func_c</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *segement = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,segement);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func_b</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    func_c();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func_a</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    func_b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (signal(SIGSEGV, dump) == SIG_ERR)</span><br><span class=\"line\">        perror(<span class=\"string\">\"can't catch SIGSEGV\"</span>);</span><br><span class=\"line\">    func_a();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译命令：<br><code>gcc -g -rdynamic signal.c -o a.out</code><br>这里需要注意，添加-O2进行优化后，可能导致backtrace_symbols输出不了函数名。其最终结果如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Signal:[Segmentation fault], PID:(<span class=\"number\">4248</span>), Stack trace:</span><br><span class=\"line\"><span class=\"number\">1</span>: ./a.out(dump+<span class=\"number\">0x3d</span>) [<span class=\"number\">0x400afa</span>]</span><br><span class=\"line\"><span class=\"number\">2</span>: /lib64/libc.so<span class=\"number\">.6</span>(+<span class=\"number\">0x35270</span>) [<span class=\"number\">0x7f20db113270</span>]</span><br><span class=\"line\"><span class=\"number\">3</span>: /lib64/libc.so<span class=\"number\">.6</span>(+<span class=\"number\">0x86c31</span>) [<span class=\"number\">0x7f20db164c31</span>]</span><br><span class=\"line\"><span class=\"number\">4</span>: /lib64/libc.so<span class=\"number\">.6</span>(_IO_puts+<span class=\"number\">0xc</span>) [<span class=\"number\">0x7f20db14af2c</span>]</span><br><span class=\"line\"><span class=\"number\">5</span>: ./a.out(func_c+<span class=\"number\">0x1c</span>) [<span class=\"number\">0x400bd5</span>]</span><br><span class=\"line\"><span class=\"number\">6</span>: ./a.out(func_b+<span class=\"number\">0xe</span>) [<span class=\"number\">0x400be5</span>]</span><br><span class=\"line\"><span class=\"number\">7</span>: ./a.out(func_a+<span class=\"number\">0xe</span>) [<span class=\"number\">0x400bf5</span>]</span><br><span class=\"line\"><span class=\"number\">8</span>: ./a.out(main+<span class=\"number\">0x38</span>) [<span class=\"number\">0x400c2f</span>]</span><br><span class=\"line\"><span class=\"number\">9</span>: /lib64/libc.so<span class=\"number\">.6</span>(__libc_start_main+<span class=\"number\">0xf5</span>) [<span class=\"number\">0x7f20db0ffc05</span>]</span><br><span class=\"line\"><span class=\"number\">10</span>: ./a.out() [<span class=\"number\">0x4009f9</span>]</span><br><span class=\"line\"><span class=\"function\">Segmentation <span class=\"title\">fault</span> <span class=\"params\">(core dumped)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>这里可以非常明显的看到，是执行a.out时其中func_c函数出错，而其错误是由于IO输出导致的。简直不要太明显。<br>如果添加了优化选项，代码结构会改变，不方便定位。<br>添加-O2选项后的输出：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Signal:[Segmentation fault], PID:(<span class=\"number\">4367</span>), Stack trace:</span><br><span class=\"line\"><span class=\"number\">1</span>: ./a.out(dump+<span class=\"number\">0x2c</span>) [<span class=\"number\">0x400b1c</span>]</span><br><span class=\"line\"><span class=\"number\">2</span>: /lib64/libc.so<span class=\"number\">.6</span>(+<span class=\"number\">0x35270</span>) [<span class=\"number\">0x7fd5b3951270</span>]</span><br><span class=\"line\"><span class=\"number\">3</span>: /lib64/libc.so<span class=\"number\">.6</span>(+<span class=\"number\">0x86c31</span>) [<span class=\"number\">0x7fd5b39a2c31</span>]</span><br><span class=\"line\"><span class=\"number\">4</span>: /lib64/libc.so<span class=\"number\">.6</span>(_IO_puts+<span class=\"number\">0xc</span>) [<span class=\"number\">0x7fd5b3988f2c</span>]</span><br><span class=\"line\"><span class=\"number\">5</span>: ./a.out(main+<span class=\"number\">0x20</span>) [<span class=\"number\">0x4009f0</span>]</span><br><span class=\"line\"><span class=\"number\">6</span>: /lib64/libc.so<span class=\"number\">.6</span>(__libc_start_main+<span class=\"number\">0xf5</span>) [<span class=\"number\">0x7fd5b393dc05</span>]</span><br><span class=\"line\"><span class=\"number\">7</span>: ./a.out() [<span class=\"number\">0x400a2c</span>]</span><br><span class=\"line\"><span class=\"function\">Segmentation <span class=\"title\">fault</span> <span class=\"params\">(core dumped)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以把可执行文件编程汇编代码，看看发生了啥<br><code>objdump -d a.out &gt; a.s</code><br>a.s中对应的出错位置就是在[0x4009f0]地址处，而这个地址也实实在在的在main函数中：<br><img src=\"/2020/05/15/《C语言缺陷与陷阱》读书笔记/%E4%BC%98%E5%8C%96%E5%90%8E%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81.png\" alt=\"优化后汇编代码\"><br>优化过程中删减了中间两层的函数调用。厉害。也正是因为这样，导致在函数跟踪的时候，只能到看到main函数。<br>而没有优化过的代码，就和原始结构一样：<br><img src=\"/2020/05/15/《C语言缺陷与陷阱》读书笔记/%E5%8E%9F%E5%A7%8B%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81.png\" alt=\"原始汇编代码\"></p>\n<h3 id=\"第六章\"><a href=\"#第六章\" class=\"headerlink\" title=\"第六章\"></a>第六章</h3><p>简单一句话概括，define功能就是做宏替换，它啥功能也没有，就是简简单单的字符替换。</p>\n<h3 id=\"第七章\"><a href=\"#第七章\" class=\"headerlink\" title=\"第七章\"></a>第七章</h3><p>主要讲的是移植性问题，虽然C最初开发的目的就是为了可移植性。但是后续不断的发展，导致C上层库出现了偏差，最显而易见的就是windows和linux的C代码兼容性很差，特别是系统调用级别的，基本是两套api了。<br>其中还讲到了关于内存重复利用问题，也就是realloc函数。主要用途还是用于原有的空间不够，进行扩展。这样是比你free掉之前的空间，然后重新malloc要快。并且realloc时，是可以拷贝数据到新的地方的。当然，realloc的空间小于之前的空间，那么会产生截断。总之，realloc时需要有很多注意事项，如果不是对空间利用率有较高的要求，可以不用使用。</p>\n<h3 id=\"第八章\"><a href=\"#第八章\" class=\"headerlink\" title=\"第八章\"></a>第八章</h3><p>建议，尽量在写代码的时候，多想，特别是结构。代码写完后多检查，测试。<br>尽量覆盖异常问题，但避免过多的防御式编程。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这本书还是相当的老了，很多书中的问题，在现在来看已经不是问题。但是还是有些地方的提出的注意事项，值得参考和学习。加上全书不长，可以快速一看，然后发现自己缺失的点即可。<br>2020.5.7</p>"},{"_content":"","source":"_posts/《mysql必知必会》读书笔记.md","raw":"","slug":"《mysql必知必会》读书笔记","published":1,"date":"2021-01-25T03:30:58.540Z","updated":"2021-01-25T03:30:58.540Z","_id":"ckkc0insv000uh9uod8qvdsvi","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"《怪诞行为学：可预测的非理性》读书笔记","date":"2021-01-13T09:03:06.000Z","_content":"\n很有趣的一本书(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n*只是简单的记录书中的发现，或者有趣的事*\n\n<!-- more -->\n\n### 相对论的真相：为什么我们喜欢比较和攀比？\n* 多数人只有到了具体情境才知道自己真正想要的是什么。\n* 我们对事物的印象都是通过比较而得到的。\n    直观的表现如下：\n    ![](./《怪诞行为学：可预测的非理性》读书笔记/page28.jpg)\n* 我们不但喜欢将事物与事物进行比较，而且喜欢比较容易比较的——避免比较不容易比较的事物。\n* 富有的人嫉妒比他更富有的人\n* 要让人渴望做一件事，只需要让做这件事的机会难得即可\n* “幼鹅效应”与“锚定”\n* 任意锚的初次形成之后仍会长久存在，伴随我们左右。\n* 羊群效应：基于其他人推断的好坏来决定自己是否效仿。自己也可能成为自己的羊群。是基于前面的推断。\n* “任意一致性”很大程度上决定了我们的消费习惯\n* 我们对价格的敏感度很大程度上取决于我们过去对价格的记忆，以及我们想与过去保持一致的欲望。","source":"_posts/《怪诞行为学：可预测的非理性》读书笔记.md","raw":"---\ntitle: 《怪诞行为学：可预测的非理性》读书笔记\ndate: 2021-01-13 17:03:06\ncategories: 笔记\ntags: \n---\n\n很有趣的一本书(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n*只是简单的记录书中的发现，或者有趣的事*\n\n<!-- more -->\n\n### 相对论的真相：为什么我们喜欢比较和攀比？\n* 多数人只有到了具体情境才知道自己真正想要的是什么。\n* 我们对事物的印象都是通过比较而得到的。\n    直观的表现如下：\n    ![](./《怪诞行为学：可预测的非理性》读书笔记/page28.jpg)\n* 我们不但喜欢将事物与事物进行比较，而且喜欢比较容易比较的——避免比较不容易比较的事物。\n* 富有的人嫉妒比他更富有的人\n* 要让人渴望做一件事，只需要让做这件事的机会难得即可\n* “幼鹅效应”与“锚定”\n* 任意锚的初次形成之后仍会长久存在，伴随我们左右。\n* 羊群效应：基于其他人推断的好坏来决定自己是否效仿。自己也可能成为自己的羊群。是基于前面的推断。\n* “任意一致性”很大程度上决定了我们的消费习惯\n* 我们对价格的敏感度很大程度上取决于我们过去对价格的记忆，以及我们想与过去保持一致的欲望。","slug":"《怪诞行为学：可预测的非理性》读书笔记","published":1,"updated":"2021-01-15T12:11:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insw000wh9uoez7c29k1","content":"<p>很有趣的一本书(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em>只是简单的记录书中的发现，或者有趣的事</em></p>\n<a id=\"more\"></a>\n\n<h3 id=\"相对论的真相：为什么我们喜欢比较和攀比？\"><a href=\"#相对论的真相：为什么我们喜欢比较和攀比？\" class=\"headerlink\" title=\"相对论的真相：为什么我们喜欢比较和攀比？\"></a>相对论的真相：为什么我们喜欢比较和攀比？</h3><ul>\n<li>多数人只有到了具体情境才知道自己真正想要的是什么。</li>\n<li>我们对事物的印象都是通过比较而得到的。<br>  直观的表现如下：<br>  <img src=\"/2021/01/13/《怪诞行为学：可预测的非理性》读书笔记/page28.jpg\"></li>\n<li>我们不但喜欢将事物与事物进行比较，而且喜欢比较容易比较的——避免比较不容易比较的事物。</li>\n<li>富有的人嫉妒比他更富有的人</li>\n<li>要让人渴望做一件事，只需要让做这件事的机会难得即可</li>\n<li>“幼鹅效应”与“锚定”</li>\n<li>任意锚的初次形成之后仍会长久存在，伴随我们左右。</li>\n<li>羊群效应：基于其他人推断的好坏来决定自己是否效仿。自己也可能成为自己的羊群。是基于前面的推断。</li>\n<li>“任意一致性”很大程度上决定了我们的消费习惯</li>\n<li>我们对价格的敏感度很大程度上取决于我们过去对价格的记忆，以及我们想与过去保持一致的欲望。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>很有趣的一本书(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em>只是简单的记录书中的发现，或者有趣的事</em></p>","more":"<h3 id=\"相对论的真相：为什么我们喜欢比较和攀比？\"><a href=\"#相对论的真相：为什么我们喜欢比较和攀比？\" class=\"headerlink\" title=\"相对论的真相：为什么我们喜欢比较和攀比？\"></a>相对论的真相：为什么我们喜欢比较和攀比？</h3><ul>\n<li>多数人只有到了具体情境才知道自己真正想要的是什么。</li>\n<li>我们对事物的印象都是通过比较而得到的。<br>  直观的表现如下：<br>  <img src=\"/2021/01/13/《怪诞行为学：可预测的非理性》读书笔记/page28.jpg\"></li>\n<li>我们不但喜欢将事物与事物进行比较，而且喜欢比较容易比较的——避免比较不容易比较的事物。</li>\n<li>富有的人嫉妒比他更富有的人</li>\n<li>要让人渴望做一件事，只需要让做这件事的机会难得即可</li>\n<li>“幼鹅效应”与“锚定”</li>\n<li>任意锚的初次形成之后仍会长久存在，伴随我们左右。</li>\n<li>羊群效应：基于其他人推断的好坏来决定自己是否效仿。自己也可能成为自己的羊群。是基于前面的推断。</li>\n<li>“任意一致性”很大程度上决定了我们的消费习惯</li>\n<li>我们对价格的敏感度很大程度上取决于我们过去对价格的记忆，以及我们想与过去保持一致的欲望。</li>\n</ul>"},{"title":"《高性能mysql第三版》读书笔记","date":"2020-10-27T08:28:40.000Z","_content":"\n学习一下mysql还是很有必要的(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n*以下内容都是根据书中的章节目录，并且根据自己的缺陷进行记录的。*\n\n<!-- more -->\n\n### 第一章  mysql架构和历史\n**架构逻辑**：\nmysql将查询处理及其他系统任务和数据存储/提取进行分离\n![](《高性能mysql第三版》读书笔记/mysql架构图.jpg)\n*[图片来源](https://www.yinxiang.com/everhub/note/39051186-8641-4d49-852b-256cf80d3a22)*\n存储引擎部分，仅仅是响应上层服务器请求，相互之间不会进行通信。\n服务器会验证客户端密码或者证书，并且在认证通过后查询该客户端的权限。\n**并发控制**：\n读写锁作为实现原理，锁的粒度作为性能的考量(锁的开销和安全性的平衡)，mysql提供了表锁和行级锁\n**事务**：\nmysql中的一个原子性sql查询，或者独立工作单元\n原子性，一致性，隔离性，持久性。\n隔离级别：未提交读，提交读，可重复读，可串行读。\n死锁：检测，死锁的循环依赖。解决，最少行级排他锁回滚。\n事务日志：先将数据进行内存拷贝，再将需要进行的I/O读写操作写入到日志，由后台根据日志进行数据写入。如果数据本身还未写入磁盘，系统崩溃，相应的存储引擎也有相应的数据恢复策略。(怎么搞的？？)\nmysql中默认自动提交，将每一次查询都当做一个事务提交。\n事务是由存储引擎实现，如果使用多种存储引擎(事务型和非事务型)，会变得不可靠。\n\n**多版本并发控制(mvcc)**：\n","source":"_posts/《高性能mysql第三版》读书笔记.md","raw":"---\ntitle: 《高性能mysql第三版》读书笔记\ndate: 2020-10-27 16:28:40\ncategories: 笔记\ntags: [mysql]\n---\n\n学习一下mysql还是很有必要的(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n*以下内容都是根据书中的章节目录，并且根据自己的缺陷进行记录的。*\n\n<!-- more -->\n\n### 第一章  mysql架构和历史\n**架构逻辑**：\nmysql将查询处理及其他系统任务和数据存储/提取进行分离\n![](《高性能mysql第三版》读书笔记/mysql架构图.jpg)\n*[图片来源](https://www.yinxiang.com/everhub/note/39051186-8641-4d49-852b-256cf80d3a22)*\n存储引擎部分，仅仅是响应上层服务器请求，相互之间不会进行通信。\n服务器会验证客户端密码或者证书，并且在认证通过后查询该客户端的权限。\n**并发控制**：\n读写锁作为实现原理，锁的粒度作为性能的考量(锁的开销和安全性的平衡)，mysql提供了表锁和行级锁\n**事务**：\nmysql中的一个原子性sql查询，或者独立工作单元\n原子性，一致性，隔离性，持久性。\n隔离级别：未提交读，提交读，可重复读，可串行读。\n死锁：检测，死锁的循环依赖。解决，最少行级排他锁回滚。\n事务日志：先将数据进行内存拷贝，再将需要进行的I/O读写操作写入到日志，由后台根据日志进行数据写入。如果数据本身还未写入磁盘，系统崩溃，相应的存储引擎也有相应的数据恢复策略。(怎么搞的？？)\nmysql中默认自动提交，将每一次查询都当做一个事务提交。\n事务是由存储引擎实现，如果使用多种存储引擎(事务型和非事务型)，会变得不可靠。\n\n**多版本并发控制(mvcc)**：\n","slug":"《高性能mysql第三版》读书笔记","published":1,"updated":"2020-11-05T08:10:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insy0010h9uoctjjy1qm","content":"<p>学习一下mysql还是很有必要的(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em>以下内容都是根据书中的章节目录，并且根据自己的缺陷进行记录的。</em></p>\n<a id=\"more\"></a>\n\n<h3 id=\"第一章-mysql架构和历史\"><a href=\"#第一章-mysql架构和历史\" class=\"headerlink\" title=\"第一章  mysql架构和历史\"></a>第一章  mysql架构和历史</h3><p><strong>架构逻辑</strong>：<br>mysql将查询处理及其他系统任务和数据存储/提取进行分离<br><img src=\"/2020/10/27/《高性能mysql第三版》读书笔记/mysql%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg\"><br><em><a href=\"https://www.yinxiang.com/everhub/note/39051186-8641-4d49-852b-256cf80d3a22\" target=\"_blank\" rel=\"noopener\">图片来源</a></em><br>存储引擎部分，仅仅是响应上层服务器请求，相互之间不会进行通信。<br>服务器会验证客户端密码或者证书，并且在认证通过后查询该客户端的权限。<br><strong>并发控制</strong>：<br>读写锁作为实现原理，锁的粒度作为性能的考量(锁的开销和安全性的平衡)，mysql提供了表锁和行级锁<br><strong>事务</strong>：<br>mysql中的一个原子性sql查询，或者独立工作单元<br>原子性，一致性，隔离性，持久性。<br>隔离级别：未提交读，提交读，可重复读，可串行读。<br>死锁：检测，死锁的循环依赖。解决，最少行级排他锁回滚。<br>事务日志：先将数据进行内存拷贝，再将需要进行的I/O读写操作写入到日志，由后台根据日志进行数据写入。如果数据本身还未写入磁盘，系统崩溃，相应的存储引擎也有相应的数据恢复策略。(怎么搞的？？)<br>mysql中默认自动提交，将每一次查询都当做一个事务提交。<br>事务是由存储引擎实现，如果使用多种存储引擎(事务型和非事务型)，会变得不可靠。</p>\n<p>**多版本并发控制(mvcc)**：</p>\n","site":{"data":{}},"excerpt":"<p>学习一下mysql还是很有必要的(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<p><em>以下内容都是根据书中的章节目录，并且根据自己的缺陷进行记录的。</em></p>","more":"<h3 id=\"第一章-mysql架构和历史\"><a href=\"#第一章-mysql架构和历史\" class=\"headerlink\" title=\"第一章  mysql架构和历史\"></a>第一章  mysql架构和历史</h3><p><strong>架构逻辑</strong>：<br>mysql将查询处理及其他系统任务和数据存储/提取进行分离<br><img src=\"/2020/10/27/《高性能mysql第三版》读书笔记/mysql%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg\"><br><em><a href=\"https://www.yinxiang.com/everhub/note/39051186-8641-4d49-852b-256cf80d3a22\" target=\"_blank\" rel=\"noopener\">图片来源</a></em><br>存储引擎部分，仅仅是响应上层服务器请求，相互之间不会进行通信。<br>服务器会验证客户端密码或者证书，并且在认证通过后查询该客户端的权限。<br><strong>并发控制</strong>：<br>读写锁作为实现原理，锁的粒度作为性能的考量(锁的开销和安全性的平衡)，mysql提供了表锁和行级锁<br><strong>事务</strong>：<br>mysql中的一个原子性sql查询，或者独立工作单元<br>原子性，一致性，隔离性，持久性。<br>隔离级别：未提交读，提交读，可重复读，可串行读。<br>死锁：检测，死锁的循环依赖。解决，最少行级排他锁回滚。<br>事务日志：先将数据进行内存拷贝，再将需要进行的I/O读写操作写入到日志，由后台根据日志进行数据写入。如果数据本身还未写入磁盘，系统崩溃，相应的存储引擎也有相应的数据恢复策略。(怎么搞的？？)<br>mysql中默认自动提交，将每一次查询都当做一个事务提交。<br>事务是由存储引擎实现，如果使用多种存储引擎(事务型和非事务型)，会变得不可靠。</p>\n<p>**多版本并发控制(mvcc)**：</p>"},{"title":"关于如何写文档","date":"2020-09-14T03:12:33.000Z","_content":"\n技术文档如何写的清晰明了？ 头大。(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n\n<!-- more -->\n\n上一个我比较喜欢的技术文档书写风格[示例](https://www.ibm.com/developerworks/cn/linux/l-cn-kernelmodules/?ca=drs)\n\n**题目：** 表述你文档核心内容\n**概述：** 做基础背景介绍或目的介绍(默认阅读相关内容的人有相关行业背景)\n**内容：** 按照一定逻辑进行叙述(大->小、流程顺序、时间顺序、依赖操作顺序)\n**其他：** 引用和备注","source":"_posts/关于如何写文档.md","raw":"---\ntitle: 关于如何写文档\ndate: 2020-09-14 11:12:33\ncategories: 技术杂谈\ntags: 工具\n---\n\n技术文档如何写的清晰明了？ 头大。(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n\n<!-- more -->\n\n上一个我比较喜欢的技术文档书写风格[示例](https://www.ibm.com/developerworks/cn/linux/l-cn-kernelmodules/?ca=drs)\n\n**题目：** 表述你文档核心内容\n**概述：** 做基础背景介绍或目的介绍(默认阅读相关内容的人有相关行业背景)\n**内容：** 按照一定逻辑进行叙述(大->小、流程顺序、时间顺序、依赖操作顺序)\n**其他：** 引用和备注","slug":"关于如何写文档","published":1,"updated":"2020-09-14T03:21:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0insz0012h9uopsccrkpq","content":"<p>技术文档如何写的清晰明了？ 头大。(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n<p>上一个我比较喜欢的技术文档书写风格<a href=\"https://www.ibm.com/developerworks/cn/linux/l-cn-kernelmodules/?ca=drs\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><strong>题目：</strong> 表述你文档核心内容<br><strong>概述：</strong> 做基础背景介绍或目的介绍(默认阅读相关内容的人有相关行业背景)<br><strong>内容：</strong> 按照一定逻辑进行叙述(大-&gt;小、流程顺序、时间顺序、依赖操作顺序)<br><strong>其他：</strong> 引用和备注</p>\n","site":{"data":{}},"excerpt":"<p>技术文档如何写的清晰明了？ 头大。(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<p>上一个我比较喜欢的技术文档书写风格<a href=\"https://www.ibm.com/developerworks/cn/linux/l-cn-kernelmodules/?ca=drs\" target=\"_blank\" rel=\"noopener\">示例</a></p>\n<p><strong>题目：</strong> 表述你文档核心内容<br><strong>概述：</strong> 做基础背景介绍或目的介绍(默认阅读相关内容的人有相关行业背景)<br><strong>内容：</strong> 按照一定逻辑进行叙述(大-&gt;小、流程顺序、时间顺序、依赖操作顺序)<br><strong>其他：</strong> 引用和备注</p>"},{"title":"如何进行http压测","date":"2020-12-25T10:09:41.000Z","_content":"\n测试新手上线 (•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n\n<!-- more -->\n\n\n## 如何进行http压测\n\n### 准备\n首先要准备2台设备，客户端，压测设备。如果是网关类型，需要增加后面的测试桩。\n其次，我们需要选择压测工具，这里我使用的是`wrk`，由于io复用能在单机上产生很高的并发量。\n\n### 目的\n压测目的：\n1. 了解自身项目在某种环境下的最大承受业务。\n2. 进行性能问题排查和优化。\n\n**TODO：**\n1. 选定固定的运行环境(网络，运行系统，平台，压测工具，客户端)\n2. 准备基准测试项目和待测试项目\n3. 进行基准测试，并确定环境配置正常\n4. 进行待测试项目测试\n5. 分析总结\n\n### 基准\n开始测试之前，我们需要测试对标的基准。通常可以在相应服务器上搭建一个nginx简单服务，进行压测得到基准参考数据。当然也可以找官方压测数据。\n示例：\n`wrk -t 16 -c 1000 -d 60s --script=proxy_http.lua --latency http://192.168.1.11:5556/test10k.html`\n```\nRunning 1m test @ http://192.168.1.11:5556/test0k.html\n  16 threads and 1000 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     6.69ms    6.67ms 430.69ms   99.61%\n    Req/Sec     9.52k   825.25    25.95k    91.53%\n  Latency Distribution\n     50%    6.39ms\n     75%    6.88ms\n     90%    7.45ms\n     99%   10.20ms\n  9100687 requests in 1.00m, 2.13GB read\nRequests/sec: 151455.19\nTransfer/sec:     36.25MB\n```\n基准测试一般都需要考虑到平台环境和网络环境，测试出的结果是否是正常值。如果有较大偏差，则需要考虑是否有其他因素影响测试结果。\n**影响测试结果的一些情况：**\n1. linux文件/socket数目限制\n   可以通过以下配置查看\n    ```\n    ubuntu:~$ ulimit -a\n    core file size          (blocks, -c) 0\n    data seg size           (kbytes, -d) unlimited\n    scheduling priority             (-e) 20\n    file size               (blocks, -f) unlimited\n    pending signals                 (-i) 16382\n    max locked memory       (kbytes, -l) 64\n    max memory size         (kbytes, -m) unlimited\n    open files                      (-n) 1024  #打开文件数目限制\n    pipe size            (512 bytes, -p) 8\n    POSIX message queues     (bytes, -q) 819200\n    real-time priority              (-r) 0\n    stack size              (kbytes, -s) 8192\n    cpu time               (seconds, -t) unlimited\n    max user processes              (-u) unlimited\n    virtual memory          (kbytes, -v) unlimited\n    file locks                      (-x) unlimited\n    ```\n    修改打开文件数目限制(临时)：`ulimit -n 2048`\n    永久设置方法([参考](https://blog.csdn.net/fdipzone/article/details/34588803))：\n    >`vim /etc/security/limits.conf`在最后加入:\n    >```\n    >* soft nofile 4096\n    >* hard nofile 4096\n    >```\n    >最前的 * 表示所有用户，可根据需要设置某一用户，例如:\n    >```\n    >fdipzone soft nofile 8192\n    >fdipzone hard nofile 8192\n    >```\n    >改完后注销一下就能生效。\n\n    查看某一进程打开进程数：`lsof -p pid | wc -l`\n    查看系统打开进程数：`lsof | wc -l`\n\n2. 网络因素\n   如果网络有其他人一起在用，可能出现网络波动，导致测试结果波动，或者`wrk`出现timeout。实际测试时，可以考虑单独直连网线。\n3. 大量timeout占用socket\n   可以通过`ss -ta | grep TIME-WAIT`命令查看是否有大量的time_wait。如果存在大量time_wait可通过配置` /etc/sysctl.conf`文件修改：\n   ```\n    # Controls the use of TCP syncookies\n    net.ipv4.tcp_syncookies = 1\n\n    # The TIME-WAIT sockets for new connections can be reused\n    net.ipv4.tcp_tw_reuse = 1\n\n    # Enable fast recycling of TIME-WAIT sockets status\n    net.ipv4.tcp_tw_recycle = 1\n\n    # Decrease the time default value for tcp_fin_timeout connection\n    net.ipv4.tcp_fin_timeout = 30\n   ```\n   然后执行 `/sbin/sysctl -p` 让参数生效\n4. 系统IO\n   大量的系统IO会使程序性能降低很多，当然类似的mysql频繁读写也会(这里不谈)。\n   `iotop`查看系统IO情况。\n   如果存在一些大量占用IO的情况，可通过`lsof -p <pid>`(或者`iostat `、`pidstat`都能达到相同效果)来确定进程关联的文件，是否有文件在进行大量读写操作。\n   如果上述没有找到可以文件，也可以通过`strace -p <pid>`来观察进程和系统的交互，来确定程序在哪里进行了大量IO操作。[strace使用参考](https://www.linuxidc.com/Linux/2018-01/150654.htm)\n5. 其他\n\n可根据项目重视的点来测试基准数据，并统计整理。\n测试基准数据记录，除了基准的QPS，还要包括内存利用率，CPU利用率，网络带宽利用率，IO利用率这些基本情况。[Linux查看网络流量](https://tlanyan.me/linux-traffic-commands/)\n\n### 压测\n首先要**确保环境的一致性**，保证变量的单一性，不论环境，网络，系统配置都需要保持 一致。\n简单示例结果：\n|\t|http+0k\t|http+nk\t|https+0k\t|https+nk\t|\n|---|---|---|---|---|---|\n|基准|\tQPS:151455.19<br>CPU:93.6%<br>NET:125MB/s<br>IO:100KB/s<br>MEM:20%\t|...\t|...\t|...\t|\n|project|\tQPS:142234.19<br>CPU:97.8%<br>NET:122MB/s<br>IO:128KB/s<br>MEM:40%\t|...\t|...\t|...\t|\n|结论|\t...\t|...\t|...\t|...\t|","source":"_posts/如何进行http压测.md","raw":"---\ntitle: 如何进行http压测\ndate: 2020-12-25 18:09:41\ncategories: 技术杂谈\ntags:\n---\n\n测试新手上线 (•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n\n<!-- more -->\n\n\n## 如何进行http压测\n\n### 准备\n首先要准备2台设备，客户端，压测设备。如果是网关类型，需要增加后面的测试桩。\n其次，我们需要选择压测工具，这里我使用的是`wrk`，由于io复用能在单机上产生很高的并发量。\n\n### 目的\n压测目的：\n1. 了解自身项目在某种环境下的最大承受业务。\n2. 进行性能问题排查和优化。\n\n**TODO：**\n1. 选定固定的运行环境(网络，运行系统，平台，压测工具，客户端)\n2. 准备基准测试项目和待测试项目\n3. 进行基准测试，并确定环境配置正常\n4. 进行待测试项目测试\n5. 分析总结\n\n### 基准\n开始测试之前，我们需要测试对标的基准。通常可以在相应服务器上搭建一个nginx简单服务，进行压测得到基准参考数据。当然也可以找官方压测数据。\n示例：\n`wrk -t 16 -c 1000 -d 60s --script=proxy_http.lua --latency http://192.168.1.11:5556/test10k.html`\n```\nRunning 1m test @ http://192.168.1.11:5556/test0k.html\n  16 threads and 1000 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency     6.69ms    6.67ms 430.69ms   99.61%\n    Req/Sec     9.52k   825.25    25.95k    91.53%\n  Latency Distribution\n     50%    6.39ms\n     75%    6.88ms\n     90%    7.45ms\n     99%   10.20ms\n  9100687 requests in 1.00m, 2.13GB read\nRequests/sec: 151455.19\nTransfer/sec:     36.25MB\n```\n基准测试一般都需要考虑到平台环境和网络环境，测试出的结果是否是正常值。如果有较大偏差，则需要考虑是否有其他因素影响测试结果。\n**影响测试结果的一些情况：**\n1. linux文件/socket数目限制\n   可以通过以下配置查看\n    ```\n    ubuntu:~$ ulimit -a\n    core file size          (blocks, -c) 0\n    data seg size           (kbytes, -d) unlimited\n    scheduling priority             (-e) 20\n    file size               (blocks, -f) unlimited\n    pending signals                 (-i) 16382\n    max locked memory       (kbytes, -l) 64\n    max memory size         (kbytes, -m) unlimited\n    open files                      (-n) 1024  #打开文件数目限制\n    pipe size            (512 bytes, -p) 8\n    POSIX message queues     (bytes, -q) 819200\n    real-time priority              (-r) 0\n    stack size              (kbytes, -s) 8192\n    cpu time               (seconds, -t) unlimited\n    max user processes              (-u) unlimited\n    virtual memory          (kbytes, -v) unlimited\n    file locks                      (-x) unlimited\n    ```\n    修改打开文件数目限制(临时)：`ulimit -n 2048`\n    永久设置方法([参考](https://blog.csdn.net/fdipzone/article/details/34588803))：\n    >`vim /etc/security/limits.conf`在最后加入:\n    >```\n    >* soft nofile 4096\n    >* hard nofile 4096\n    >```\n    >最前的 * 表示所有用户，可根据需要设置某一用户，例如:\n    >```\n    >fdipzone soft nofile 8192\n    >fdipzone hard nofile 8192\n    >```\n    >改完后注销一下就能生效。\n\n    查看某一进程打开进程数：`lsof -p pid | wc -l`\n    查看系统打开进程数：`lsof | wc -l`\n\n2. 网络因素\n   如果网络有其他人一起在用，可能出现网络波动，导致测试结果波动，或者`wrk`出现timeout。实际测试时，可以考虑单独直连网线。\n3. 大量timeout占用socket\n   可以通过`ss -ta | grep TIME-WAIT`命令查看是否有大量的time_wait。如果存在大量time_wait可通过配置` /etc/sysctl.conf`文件修改：\n   ```\n    # Controls the use of TCP syncookies\n    net.ipv4.tcp_syncookies = 1\n\n    # The TIME-WAIT sockets for new connections can be reused\n    net.ipv4.tcp_tw_reuse = 1\n\n    # Enable fast recycling of TIME-WAIT sockets status\n    net.ipv4.tcp_tw_recycle = 1\n\n    # Decrease the time default value for tcp_fin_timeout connection\n    net.ipv4.tcp_fin_timeout = 30\n   ```\n   然后执行 `/sbin/sysctl -p` 让参数生效\n4. 系统IO\n   大量的系统IO会使程序性能降低很多，当然类似的mysql频繁读写也会(这里不谈)。\n   `iotop`查看系统IO情况。\n   如果存在一些大量占用IO的情况，可通过`lsof -p <pid>`(或者`iostat `、`pidstat`都能达到相同效果)来确定进程关联的文件，是否有文件在进行大量读写操作。\n   如果上述没有找到可以文件，也可以通过`strace -p <pid>`来观察进程和系统的交互，来确定程序在哪里进行了大量IO操作。[strace使用参考](https://www.linuxidc.com/Linux/2018-01/150654.htm)\n5. 其他\n\n可根据项目重视的点来测试基准数据，并统计整理。\n测试基准数据记录，除了基准的QPS，还要包括内存利用率，CPU利用率，网络带宽利用率，IO利用率这些基本情况。[Linux查看网络流量](https://tlanyan.me/linux-traffic-commands/)\n\n### 压测\n首先要**确保环境的一致性**，保证变量的单一性，不论环境，网络，系统配置都需要保持 一致。\n简单示例结果：\n|\t|http+0k\t|http+nk\t|https+0k\t|https+nk\t|\n|---|---|---|---|---|---|\n|基准|\tQPS:151455.19<br>CPU:93.6%<br>NET:125MB/s<br>IO:100KB/s<br>MEM:20%\t|...\t|...\t|...\t|\n|project|\tQPS:142234.19<br>CPU:97.8%<br>NET:122MB/s<br>IO:128KB/s<br>MEM:40%\t|...\t|...\t|...\t|\n|结论|\t...\t|...\t|...\t|...\t|","slug":"如何进行http压测","published":1,"updated":"2020-12-25T10:21:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0int00016h9uoy11ozrmg","content":"<p>测试新手上线 (•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n\n<h2 id=\"如何进行http压测\"><a href=\"#如何进行http压测\" class=\"headerlink\" title=\"如何进行http压测\"></a>如何进行http压测</h2><h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>首先要准备2台设备，客户端，压测设备。如果是网关类型，需要增加后面的测试桩。<br>其次，我们需要选择压测工具，这里我使用的是<code>wrk</code>，由于io复用能在单机上产生很高的并发量。</p>\n<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>压测目的：</p>\n<ol>\n<li>了解自身项目在某种环境下的最大承受业务。</li>\n<li>进行性能问题排查和优化。</li>\n</ol>\n<p><strong>TODO：</strong></p>\n<ol>\n<li>选定固定的运行环境(网络，运行系统，平台，压测工具，客户端)</li>\n<li>准备基准测试项目和待测试项目</li>\n<li>进行基准测试，并确定环境配置正常</li>\n<li>进行待测试项目测试</li>\n<li>分析总结</li>\n</ol>\n<h3 id=\"基准\"><a href=\"#基准\" class=\"headerlink\" title=\"基准\"></a>基准</h3><p>开始测试之前，我们需要测试对标的基准。通常可以在相应服务器上搭建一个nginx简单服务，进行压测得到基准参考数据。当然也可以找官方压测数据。<br>示例：<br><code>wrk -t 16 -c 1000 -d 60s --script=proxy_http.lua --latency http://192.168.1.11:5556/test10k.html</code></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Running 1m test @ http://192.168.1.11:5556/test0k.html</span><br><span class=\"line\">  16 threads and 1000 connections</span><br><span class=\"line\">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class=\"line\">    Latency     6.69ms    6.67ms 430.69ms   99.61%</span><br><span class=\"line\">    Req/Sec     9.52k   825.25    25.95k    91.53%</span><br><span class=\"line\">  Latency Distribution</span><br><span class=\"line\">     50%    6.39ms</span><br><span class=\"line\">     75%    6.88ms</span><br><span class=\"line\">     90%    7.45ms</span><br><span class=\"line\">     99%   10.20ms</span><br><span class=\"line\">  9100687 requests in 1.00m, 2.13GB read</span><br><span class=\"line\">Requests/sec: 151455.19</span><br><span class=\"line\">Transfer/sec:     36.25MB</span><br></pre></td></tr></tbody></table></figure>\n\n<p>基准测试一般都需要考虑到平台环境和网络环境，测试出的结果是否是正常值。如果有较大偏差，则需要考虑是否有其他因素影响测试结果。<br><strong>影响测试结果的一些情况：</strong></p>\n<ol>\n<li><p>linux文件/socket数目限制<br>可以通过以下配置查看</p>\n <figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu:~$ ulimit -a</span><br><span class=\"line\">core file size          (blocks, -c) 0</span><br><span class=\"line\">data seg size           (kbytes, -d) unlimited</span><br><span class=\"line\">scheduling priority             (-e) 20</span><br><span class=\"line\">file size               (blocks, -f) unlimited</span><br><span class=\"line\">pending signals                 (-i) 16382</span><br><span class=\"line\">max locked memory       (kbytes, -l) 64</span><br><span class=\"line\">max memory size         (kbytes, -m) unlimited</span><br><span class=\"line\">open files                      (-n) 1024  #打开文件数目限制</span><br><span class=\"line\">pipe size            (512 bytes, -p) 8</span><br><span class=\"line\">POSIX message queues     (bytes, -q) 819200</span><br><span class=\"line\">real-time priority              (-r) 0</span><br><span class=\"line\">stack size              (kbytes, -s) 8192</span><br><span class=\"line\">cpu time               (seconds, -t) unlimited</span><br><span class=\"line\">max user processes              (-u) unlimited</span><br><span class=\"line\">virtual memory          (kbytes, -v) unlimited</span><br><span class=\"line\">file locks                      (-x) unlimited</span><br></pre></td></tr></tbody></table></figure>\n\n<p> 修改打开文件数目限制(临时)：<code>ulimit -n 2048</code><br> 永久设置方法(<a href=\"https://blog.csdn.net/fdipzone/article/details/34588803\" target=\"_blank\" rel=\"noopener\">参考</a>)：</p>\n<blockquote>\n<p><code>vim /etc/security/limits.conf</code>在最后加入:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;* soft nofile 4096</span><br><span class=\"line\">&gt;* hard nofile 4096</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></tbody></table></figure>\n</blockquote>\n<blockquote>\n<p>最前的 * 表示所有用户，可根据需要设置某一用户，例如:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;fdipzone soft nofile 8192</span><br><span class=\"line\">&gt;fdipzone hard nofile 8192</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></tbody></table></figure>\n</blockquote>\n<blockquote>\n<p>改完后注销一下就能生效。</p>\n</blockquote>\n<p> 查看某一进程打开进程数：<code>lsof -p pid | wc -l</code><br> 查看系统打开进程数：<code>lsof | wc -l</code></p>\n</li>\n<li><p>网络因素<br>如果网络有其他人一起在用，可能出现网络波动，导致测试结果波动，或者<code>wrk</code>出现timeout。实际测试时，可以考虑单独直连网线。</p>\n</li>\n<li><p>大量timeout占用socket<br>可以通过<code>ss -ta | grep TIME-WAIT</code>命令查看是否有大量的time_wait。如果存在大量time_wait可通过配置<code> /etc/sysctl.conf</code>文件修改：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Controls the use of TCP syncookies</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\"></span><br><span class=\"line\"># The TIME-WAIT sockets for new connections can be reused</span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable fast recycling of TIME-WAIT sockets status</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Decrease the time default value for tcp_fin_timeout connection</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 30</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然后执行 <code>/sbin/sysctl -p</code> 让参数生效</p>\n</li>\n<li><p>系统IO<br>大量的系统IO会使程序性能降低很多，当然类似的mysql频繁读写也会(这里不谈)。<br><code>iotop</code>查看系统IO情况。<br>如果存在一些大量占用IO的情况，可通过<code>lsof -p &lt;pid&gt;</code>(或者<code>iostat </code>、<code>pidstat</code>都能达到相同效果)来确定进程关联的文件，是否有文件在进行大量读写操作。<br>如果上述没有找到可以文件，也可以通过<code>strace -p &lt;pid&gt;</code>来观察进程和系统的交互，来确定程序在哪里进行了大量IO操作。<a href=\"https://www.linuxidc.com/Linux/2018-01/150654.htm\" target=\"_blank\" rel=\"noopener\">strace使用参考</a></p>\n</li>\n<li><p>其他</p>\n</li>\n</ol>\n<p>可根据项目重视的点来测试基准数据，并统计整理。<br>测试基准数据记录，除了基准的QPS，还要包括内存利用率，CPU利用率，网络带宽利用率，IO利用率这些基本情况。<a href=\"https://tlanyan.me/linux-traffic-commands/\" target=\"_blank\" rel=\"noopener\">Linux查看网络流量</a></p>\n<h3 id=\"压测\"><a href=\"#压测\" class=\"headerlink\" title=\"压测\"></a>压测</h3><p>首先要<strong>确保环境的一致性</strong>，保证变量的单一性，不论环境，网络，系统配置都需要保持 一致。<br>简单示例结果：<br>|    |http+0k    |http+nk    |https+0k    |https+nk    |<br>|—|—|—|—|—|—|<br>|基准|    QPS:151455.19<br>CPU:93.6%<br>NET:125MB/s<br>IO:100KB/s<br>MEM:20%    |…    |…    |…    |<br>|project|    QPS:142234.19<br>CPU:97.8%<br>NET:122MB/s<br>IO:128KB/s<br>MEM:40%    |…    |…    |…    |<br>|结论|    …    |…    |…    |…    |</p>\n","site":{"data":{}},"excerpt":"<p>测试新手上线 (•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<h2 id=\"如何进行http压测\"><a href=\"#如何进行http压测\" class=\"headerlink\" title=\"如何进行http压测\"></a>如何进行http压测</h2><h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>首先要准备2台设备，客户端，压测设备。如果是网关类型，需要增加后面的测试桩。<br>其次，我们需要选择压测工具，这里我使用的是<code>wrk</code>，由于io复用能在单机上产生很高的并发量。</p>\n<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>压测目的：</p>\n<ol>\n<li>了解自身项目在某种环境下的最大承受业务。</li>\n<li>进行性能问题排查和优化。</li>\n</ol>\n<p><strong>TODO：</strong></p>\n<ol>\n<li>选定固定的运行环境(网络，运行系统，平台，压测工具，客户端)</li>\n<li>准备基准测试项目和待测试项目</li>\n<li>进行基准测试，并确定环境配置正常</li>\n<li>进行待测试项目测试</li>\n<li>分析总结</li>\n</ol>\n<h3 id=\"基准\"><a href=\"#基准\" class=\"headerlink\" title=\"基准\"></a>基准</h3><p>开始测试之前，我们需要测试对标的基准。通常可以在相应服务器上搭建一个nginx简单服务，进行压测得到基准参考数据。当然也可以找官方压测数据。<br>示例：<br><code>wrk -t 16 -c 1000 -d 60s --script=proxy_http.lua --latency http://192.168.1.11:5556/test10k.html</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Running 1m test @ http://192.168.1.11:5556/test0k.html</span><br><span class=\"line\">  16 threads and 1000 connections</span><br><span class=\"line\">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class=\"line\">    Latency     6.69ms    6.67ms 430.69ms   99.61%</span><br><span class=\"line\">    Req/Sec     9.52k   825.25    25.95k    91.53%</span><br><span class=\"line\">  Latency Distribution</span><br><span class=\"line\">     50%    6.39ms</span><br><span class=\"line\">     75%    6.88ms</span><br><span class=\"line\">     90%    7.45ms</span><br><span class=\"line\">     99%   10.20ms</span><br><span class=\"line\">  9100687 requests in 1.00m, 2.13GB read</span><br><span class=\"line\">Requests/sec: 151455.19</span><br><span class=\"line\">Transfer/sec:     36.25MB</span><br></pre></td></tr></table></figure>\n\n<p>基准测试一般都需要考虑到平台环境和网络环境，测试出的结果是否是正常值。如果有较大偏差，则需要考虑是否有其他因素影响测试结果。<br><strong>影响测试结果的一些情况：</strong></p>\n<ol>\n<li><p>linux文件/socket数目限制<br>可以通过以下配置查看</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu:~$ ulimit -a</span><br><span class=\"line\">core file size          (blocks, -c) 0</span><br><span class=\"line\">data seg size           (kbytes, -d) unlimited</span><br><span class=\"line\">scheduling priority             (-e) 20</span><br><span class=\"line\">file size               (blocks, -f) unlimited</span><br><span class=\"line\">pending signals                 (-i) 16382</span><br><span class=\"line\">max locked memory       (kbytes, -l) 64</span><br><span class=\"line\">max memory size         (kbytes, -m) unlimited</span><br><span class=\"line\">open files                      (-n) 1024  #打开文件数目限制</span><br><span class=\"line\">pipe size            (512 bytes, -p) 8</span><br><span class=\"line\">POSIX message queues     (bytes, -q) 819200</span><br><span class=\"line\">real-time priority              (-r) 0</span><br><span class=\"line\">stack size              (kbytes, -s) 8192</span><br><span class=\"line\">cpu time               (seconds, -t) unlimited</span><br><span class=\"line\">max user processes              (-u) unlimited</span><br><span class=\"line\">virtual memory          (kbytes, -v) unlimited</span><br><span class=\"line\">file locks                      (-x) unlimited</span><br></pre></td></tr></table></figure>\n\n<p> 修改打开文件数目限制(临时)：<code>ulimit -n 2048</code><br> 永久设置方法(<a href=\"https://blog.csdn.net/fdipzone/article/details/34588803\" target=\"_blank\" rel=\"noopener\">参考</a>)：</p>\n<blockquote>\n<p><code>vim /etc/security/limits.conf</code>在最后加入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;* soft nofile 4096</span><br><span class=\"line\">&gt;* hard nofile 4096</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>最前的 * 表示所有用户，可根据需要设置某一用户，例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;fdipzone soft nofile 8192</span><br><span class=\"line\">&gt;fdipzone hard nofile 8192</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>改完后注销一下就能生效。</p>\n</blockquote>\n<p> 查看某一进程打开进程数：<code>lsof -p pid | wc -l</code><br> 查看系统打开进程数：<code>lsof | wc -l</code></p>\n</li>\n<li><p>网络因素<br>如果网络有其他人一起在用，可能出现网络波动，导致测试结果波动，或者<code>wrk</code>出现timeout。实际测试时，可以考虑单独直连网线。</p>\n</li>\n<li><p>大量timeout占用socket<br>可以通过<code>ss -ta | grep TIME-WAIT</code>命令查看是否有大量的time_wait。如果存在大量time_wait可通过配置<code> /etc/sysctl.conf</code>文件修改：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Controls the use of TCP syncookies</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\"></span><br><span class=\"line\"># The TIME-WAIT sockets for new connections can be reused</span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable fast recycling of TIME-WAIT sockets status</span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Decrease the time default value for tcp_fin_timeout connection</span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 30</span><br></pre></td></tr></table></figure>\n\n<p>然后执行 <code>/sbin/sysctl -p</code> 让参数生效</p>\n</li>\n<li><p>系统IO<br>大量的系统IO会使程序性能降低很多，当然类似的mysql频繁读写也会(这里不谈)。<br><code>iotop</code>查看系统IO情况。<br>如果存在一些大量占用IO的情况，可通过<code>lsof -p &lt;pid&gt;</code>(或者<code>iostat </code>、<code>pidstat</code>都能达到相同效果)来确定进程关联的文件，是否有文件在进行大量读写操作。<br>如果上述没有找到可以文件，也可以通过<code>strace -p &lt;pid&gt;</code>来观察进程和系统的交互，来确定程序在哪里进行了大量IO操作。<a href=\"https://www.linuxidc.com/Linux/2018-01/150654.htm\" target=\"_blank\" rel=\"noopener\">strace使用参考</a></p>\n</li>\n<li><p>其他</p>\n</li>\n</ol>\n<p>可根据项目重视的点来测试基准数据，并统计整理。<br>测试基准数据记录，除了基准的QPS，还要包括内存利用率，CPU利用率，网络带宽利用率，IO利用率这些基本情况。<a href=\"https://tlanyan.me/linux-traffic-commands/\" target=\"_blank\" rel=\"noopener\">Linux查看网络流量</a></p>\n<h3 id=\"压测\"><a href=\"#压测\" class=\"headerlink\" title=\"压测\"></a>压测</h3><p>首先要<strong>确保环境的一致性</strong>，保证变量的单一性，不论环境，网络，系统配置都需要保持 一致。<br>简单示例结果：<br>|    |http+0k    |http+nk    |https+0k    |https+nk    |<br>|—|—|—|—|—|—|<br>|基准|    QPS:151455.19<br>CPU:93.6%<br>NET:125MB/s<br>IO:100KB/s<br>MEM:20%    |…    |…    |…    |<br>|project|    QPS:142234.19<br>CPU:97.8%<br>NET:122MB/s<br>IO:128KB/s<br>MEM:40%    |…    |…    |…    |<br>|结论|    …    |…    |…    |…    |</p>"},{"title":"学习和学习方法 问题和解决问题","date":"2019-07-23T07:19:51.000Z","_content":"\n我并不是什么大佬，只是写些东西给自己看。觉得好的分享，不好的警醒(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n\n* * *\n\n<!-- more -->\n\n### 学习和学习方法\n学习是一生的必修课，这个毫无疑问。\n但是，人生毕竟只有那么长一点点，时间有限，学习什么，怎么学就显得至关重要了。个人觉得自己的学习效率并不高，比起好些应试大佬来说，简直菜。所以就开始胡说八道了。   \n\n针对**学习什么**，首先来说说自己的看法，我对自己比较感兴趣的事情学习的比较快，数学，物理，生物等学科，以至于到现在我依旧记得当时高中学习的知识。但是对于自己不感兴趣的事情，学习效率极差，比如英语，对，我就是个典型偏科的同学。当然我这儿没有任何帮你解决偏科的方法。个人认为，自己不感兴趣的事情，干嘛那么费劲去学，效率不高，还心情不好，最后会打击信心。如果那个东西是必要的，那么学到基本够用就行。如果说你因为前景打算从事这方面的工作，我只能说，祝你好运[微笑]！所以总体来说，学习什么，根据你喜欢什么而定，如果你现在还不明确，那么多接触些东西，总有你喜欢的。至于你不喜欢的，还是那句话，够用就行。怎么算够用，看你自己咯，想考北大，英语140够用•ᴗ•\n\n针对**学习效率**，个人觉得最好的学习，就是应用。如果你能够将书本上学习的东西，应用到实际中，对于学习到的知识就会有非常深刻的理解和提升。原因在于，你学习的时候重点在于记忆和理解，将某个东西搬到你脑子里。而在应用过程中，你需要考虑你所学东西的深层次的原理，考虑这种方式是否适用，是否有更好的解决。当你成功应用了某个案例，就拥有了较好的学习效果。而将这个方法抽象出来，学习过程即为：**记忆->思考** 的一个循环过程。\n针对这一个过程，记忆是为了获取已有的东西，而思考是为了联系所记忆的东西，以及产生新的东西。比如你学习写代码，你必须先去看demo，编写hello world测试环境。了解语言特性和基本函数功能。这个过程是学习已有的东西。接下来你会设计一个自己想实现的功能，思考如何调用函数，如何管理内存，如何设计逻辑。这个就是思考产生的新事物。当然在这个过程中依旧有更加细化的记忆和思考在其中。可能你觉得我说的不对，比如在英语学习中，大多都是进行记忆，记得多，你就学的好。好吧，我是英语菜鸡，不讨论它。就说中文的学习，汉子、发音和语法都是需要记忆的，但是实际组成句子，理解句子，哪些优美哪些劣质，这都是需要思考的。这也是为啥大家都会写字，但不是每人都能成作家的原因。\n**记忆->思考** 过程是循环的，侧重点根据不同的阶段和不同的学科进行改变。当你是初学者，或者文科类专业，记忆过程占据比重较大，思考的过程更多在于知识的链接整理。而如果你是老手，或者大文豪。现有的某方面的知识摄取差不多了，更多就在于思考产生新的东西。（当然某方面的老手，也是其他方面的菜鸟）。\n学习方法：**记忆->思考**\n这个过程最重要的是：**专注**\n最高的学习效率：**专注**的重复**记忆->思考**\n\n### 问题和解决问题\n**问题**多吗？多！解决问题难吗？难！\n我也是这么觉得的，我现在最大的问题是：穷（正经脸）\n首先，有问题是好事，不管在生活还是在专业中。有问题证明你对生活还有向往，对事物还有好奇。如果你觉得都没问题，那么惨了，我很担心你，你一定要找我好好聊聊。（一个不愁钱的人，赶紧抱大腿）。可能你会说，我才接触某个专业领域，眼前一抹黑，提不出什么问题。那很正常，有人说过，知识就像一个圆，里面是已知的，外面是未知的。所以，你知道的越多，问题也就越多。如果才接触某个领域，提不出问题，很正常。并且提不出问题这本身就是一个问题了，怎么解决，后面在讨论。如果是一个集体，那么提问题会比较多，这时候就需要进行抽象汇总了，将其中的重点整理出来，才能从根本上发现问题。\n**怎么解决问题**？首先，你要想解决这个问题。不要觉得太难。如果一个问题太难，比如我穷。那么就把这个大问题分成小问题，比如今年赚10万（有点像王总先赚它一个亿的口气），好像就没那么难了。先解决畏难情绪。等到了具体实施的时候，再讲某个大问题分解到具体小问题，比如每月赚1万。一直分解到你自我可控范围，比如每天不迟到。所有问题，就算世界大战这种问题都能这么解决。而其中的关键在于如何分析问题，分解问题，如果你分析不到问题关键点，那么分解问题后，实施完成也解决不了最后的大问题。比如我穷，分解后小问题是我一年过得不开心，分解后是每个月不开心，那么最后每天要开心，就需要买买买。最后还是穷。哈哈~\\(≧▽≦)/~\n问题来源：**你想干点啥**\n过程中的重点是：**别怕**+**学习**\n解决问题方法：**分析和分解**\n\n\n\n\n\n\n**学习是一生的伴侣，问题是过客，解决问题则是交谈的乐趣了。**\n\n* * *\n","source":"_posts/学习和学习方法-问题和解决问题.md","raw":"---\ntitle: 学习和学习方法 问题和解决问题\ndate: 2019-07-23 15:19:51\ncategories: 随笔\ntags: \n---\n\n我并不是什么大佬，只是写些东西给自己看。觉得好的分享，不好的警醒(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n\n* * *\n\n<!-- more -->\n\n### 学习和学习方法\n学习是一生的必修课，这个毫无疑问。\n但是，人生毕竟只有那么长一点点，时间有限，学习什么，怎么学就显得至关重要了。个人觉得自己的学习效率并不高，比起好些应试大佬来说，简直菜。所以就开始胡说八道了。   \n\n针对**学习什么**，首先来说说自己的看法，我对自己比较感兴趣的事情学习的比较快，数学，物理，生物等学科，以至于到现在我依旧记得当时高中学习的知识。但是对于自己不感兴趣的事情，学习效率极差，比如英语，对，我就是个典型偏科的同学。当然我这儿没有任何帮你解决偏科的方法。个人认为，自己不感兴趣的事情，干嘛那么费劲去学，效率不高，还心情不好，最后会打击信心。如果那个东西是必要的，那么学到基本够用就行。如果说你因为前景打算从事这方面的工作，我只能说，祝你好运[微笑]！所以总体来说，学习什么，根据你喜欢什么而定，如果你现在还不明确，那么多接触些东西，总有你喜欢的。至于你不喜欢的，还是那句话，够用就行。怎么算够用，看你自己咯，想考北大，英语140够用•ᴗ•\n\n针对**学习效率**，个人觉得最好的学习，就是应用。如果你能够将书本上学习的东西，应用到实际中，对于学习到的知识就会有非常深刻的理解和提升。原因在于，你学习的时候重点在于记忆和理解，将某个东西搬到你脑子里。而在应用过程中，你需要考虑你所学东西的深层次的原理，考虑这种方式是否适用，是否有更好的解决。当你成功应用了某个案例，就拥有了较好的学习效果。而将这个方法抽象出来，学习过程即为：**记忆->思考** 的一个循环过程。\n针对这一个过程，记忆是为了获取已有的东西，而思考是为了联系所记忆的东西，以及产生新的东西。比如你学习写代码，你必须先去看demo，编写hello world测试环境。了解语言特性和基本函数功能。这个过程是学习已有的东西。接下来你会设计一个自己想实现的功能，思考如何调用函数，如何管理内存，如何设计逻辑。这个就是思考产生的新事物。当然在这个过程中依旧有更加细化的记忆和思考在其中。可能你觉得我说的不对，比如在英语学习中，大多都是进行记忆，记得多，你就学的好。好吧，我是英语菜鸡，不讨论它。就说中文的学习，汉子、发音和语法都是需要记忆的，但是实际组成句子，理解句子，哪些优美哪些劣质，这都是需要思考的。这也是为啥大家都会写字，但不是每人都能成作家的原因。\n**记忆->思考** 过程是循环的，侧重点根据不同的阶段和不同的学科进行改变。当你是初学者，或者文科类专业，记忆过程占据比重较大，思考的过程更多在于知识的链接整理。而如果你是老手，或者大文豪。现有的某方面的知识摄取差不多了，更多就在于思考产生新的东西。（当然某方面的老手，也是其他方面的菜鸟）。\n学习方法：**记忆->思考**\n这个过程最重要的是：**专注**\n最高的学习效率：**专注**的重复**记忆->思考**\n\n### 问题和解决问题\n**问题**多吗？多！解决问题难吗？难！\n我也是这么觉得的，我现在最大的问题是：穷（正经脸）\n首先，有问题是好事，不管在生活还是在专业中。有问题证明你对生活还有向往，对事物还有好奇。如果你觉得都没问题，那么惨了，我很担心你，你一定要找我好好聊聊。（一个不愁钱的人，赶紧抱大腿）。可能你会说，我才接触某个专业领域，眼前一抹黑，提不出什么问题。那很正常，有人说过，知识就像一个圆，里面是已知的，外面是未知的。所以，你知道的越多，问题也就越多。如果才接触某个领域，提不出问题，很正常。并且提不出问题这本身就是一个问题了，怎么解决，后面在讨论。如果是一个集体，那么提问题会比较多，这时候就需要进行抽象汇总了，将其中的重点整理出来，才能从根本上发现问题。\n**怎么解决问题**？首先，你要想解决这个问题。不要觉得太难。如果一个问题太难，比如我穷。那么就把这个大问题分成小问题，比如今年赚10万（有点像王总先赚它一个亿的口气），好像就没那么难了。先解决畏难情绪。等到了具体实施的时候，再讲某个大问题分解到具体小问题，比如每月赚1万。一直分解到你自我可控范围，比如每天不迟到。所有问题，就算世界大战这种问题都能这么解决。而其中的关键在于如何分析问题，分解问题，如果你分析不到问题关键点，那么分解问题后，实施完成也解决不了最后的大问题。比如我穷，分解后小问题是我一年过得不开心，分解后是每个月不开心，那么最后每天要开心，就需要买买买。最后还是穷。哈哈~\\(≧▽≦)/~\n问题来源：**你想干点啥**\n过程中的重点是：**别怕**+**学习**\n解决问题方法：**分析和分解**\n\n\n\n\n\n\n**学习是一生的伴侣，问题是过客，解决问题则是交谈的乐趣了。**\n\n* * *\n","slug":"学习和学习方法-问题和解决问题","published":1,"updated":"2020-09-13T01:39:25.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0int10018h9uoxa8eo3iz","content":"<p>我并不是什么大佬，只是写些东西给自己看。觉得好的分享，不好的警醒(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n<h3 id=\"学习和学习方法\"><a href=\"#学习和学习方法\" class=\"headerlink\" title=\"学习和学习方法\"></a>学习和学习方法</h3><p>学习是一生的必修课，这个毫无疑问。<br>但是，人生毕竟只有那么长一点点，时间有限，学习什么，怎么学就显得至关重要了。个人觉得自己的学习效率并不高，比起好些应试大佬来说，简直菜。所以就开始胡说八道了。   </p>\n<p>针对<strong>学习什么</strong>，首先来说说自己的看法，我对自己比较感兴趣的事情学习的比较快，数学，物理，生物等学科，以至于到现在我依旧记得当时高中学习的知识。但是对于自己不感兴趣的事情，学习效率极差，比如英语，对，我就是个典型偏科的同学。当然我这儿没有任何帮你解决偏科的方法。个人认为，自己不感兴趣的事情，干嘛那么费劲去学，效率不高，还心情不好，最后会打击信心。如果那个东西是必要的，那么学到基本够用就行。如果说你因为前景打算从事这方面的工作，我只能说，祝你好运[微笑]！所以总体来说，学习什么，根据你喜欢什么而定，如果你现在还不明确，那么多接触些东西，总有你喜欢的。至于你不喜欢的，还是那句话，够用就行。怎么算够用，看你自己咯，想考北大，英语140够用•ᴗ•</p>\n<p>针对<strong>学习效率</strong>，个人觉得最好的学习，就是应用。如果你能够将书本上学习的东西，应用到实际中，对于学习到的知识就会有非常深刻的理解和提升。原因在于，你学习的时候重点在于记忆和理解，将某个东西搬到你脑子里。而在应用过程中，你需要考虑你所学东西的深层次的原理，考虑这种方式是否适用，是否有更好的解决。当你成功应用了某个案例，就拥有了较好的学习效果。而将这个方法抽象出来，学习过程即为：<strong>记忆-&gt;思考</strong> 的一个循环过程。<br>针对这一个过程，记忆是为了获取已有的东西，而思考是为了联系所记忆的东西，以及产生新的东西。比如你学习写代码，你必须先去看demo，编写hello world测试环境。了解语言特性和基本函数功能。这个过程是学习已有的东西。接下来你会设计一个自己想实现的功能，思考如何调用函数，如何管理内存，如何设计逻辑。这个就是思考产生的新事物。当然在这个过程中依旧有更加细化的记忆和思考在其中。可能你觉得我说的不对，比如在英语学习中，大多都是进行记忆，记得多，你就学的好。好吧，我是英语菜鸡，不讨论它。就说中文的学习，汉子、发音和语法都是需要记忆的，但是实际组成句子，理解句子，哪些优美哪些劣质，这都是需要思考的。这也是为啥大家都会写字，但不是每人都能成作家的原因。<br><strong>记忆-&gt;思考</strong> 过程是循环的，侧重点根据不同的阶段和不同的学科进行改变。当你是初学者，或者文科类专业，记忆过程占据比重较大，思考的过程更多在于知识的链接整理。而如果你是老手，或者大文豪。现有的某方面的知识摄取差不多了，更多就在于思考产生新的东西。（当然某方面的老手，也是其他方面的菜鸟）。<br>学习方法：<strong>记忆-&gt;思考</strong><br>这个过程最重要的是：<strong>专注</strong><br>最高的学习效率：<strong>专注</strong>的重复<strong>记忆-&gt;思考</strong></p>\n<h3 id=\"问题和解决问题\"><a href=\"#问题和解决问题\" class=\"headerlink\" title=\"问题和解决问题\"></a>问题和解决问题</h3><p><strong>问题</strong>多吗？多！解决问题难吗？难！<br>我也是这么觉得的，我现在最大的问题是：穷（正经脸）<br>首先，有问题是好事，不管在生活还是在专业中。有问题证明你对生活还有向往，对事物还有好奇。如果你觉得都没问题，那么惨了，我很担心你，你一定要找我好好聊聊。（一个不愁钱的人，赶紧抱大腿）。可能你会说，我才接触某个专业领域，眼前一抹黑，提不出什么问题。那很正常，有人说过，知识就像一个圆，里面是已知的，外面是未知的。所以，你知道的越多，问题也就越多。如果才接触某个领域，提不出问题，很正常。并且提不出问题这本身就是一个问题了，怎么解决，后面在讨论。如果是一个集体，那么提问题会比较多，这时候就需要进行抽象汇总了，将其中的重点整理出来，才能从根本上发现问题。<br><strong>怎么解决问题</strong>？首先，你要想解决这个问题。不要觉得太难。如果一个问题太难，比如我穷。那么就把这个大问题分成小问题，比如今年赚10万（有点像王总先赚它一个亿的口气），好像就没那么难了。先解决畏难情绪。等到了具体实施的时候，再讲某个大问题分解到具体小问题，比如每月赚1万。一直分解到你自我可控范围，比如每天不迟到。所有问题，就算世界大战这种问题都能这么解决。而其中的关键在于如何分析问题，分解问题，如果你分析不到问题关键点，那么分解问题后，实施完成也解决不了最后的大问题。比如我穷，分解后小问题是我一年过得不开心，分解后是每个月不开心，那么最后每天要开心，就需要买买买。最后还是穷。哈哈<del>(≧▽≦)/</del><br>问题来源：<strong>你想干点啥</strong><br>过程中的重点是：<strong>别怕</strong>+<strong>学习</strong><br>解决问题方法：<strong>分析和分解</strong></p>\n<p><strong>学习是一生的伴侣，问题是过客，解决问题则是交谈的乐趣了。</strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"<p>我并不是什么大佬，只是写些东西给自己看。觉得好的分享，不好的警醒(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<h3 id=\"学习和学习方法\"><a href=\"#学习和学习方法\" class=\"headerlink\" title=\"学习和学习方法\"></a>学习和学习方法</h3><p>学习是一生的必修课，这个毫无疑问。<br>但是，人生毕竟只有那么长一点点，时间有限，学习什么，怎么学就显得至关重要了。个人觉得自己的学习效率并不高，比起好些应试大佬来说，简直菜。所以就开始胡说八道了。   </p>\n<p>针对<strong>学习什么</strong>，首先来说说自己的看法，我对自己比较感兴趣的事情学习的比较快，数学，物理，生物等学科，以至于到现在我依旧记得当时高中学习的知识。但是对于自己不感兴趣的事情，学习效率极差，比如英语，对，我就是个典型偏科的同学。当然我这儿没有任何帮你解决偏科的方法。个人认为，自己不感兴趣的事情，干嘛那么费劲去学，效率不高，还心情不好，最后会打击信心。如果那个东西是必要的，那么学到基本够用就行。如果说你因为前景打算从事这方面的工作，我只能说，祝你好运[微笑]！所以总体来说，学习什么，根据你喜欢什么而定，如果你现在还不明确，那么多接触些东西，总有你喜欢的。至于你不喜欢的，还是那句话，够用就行。怎么算够用，看你自己咯，想考北大，英语140够用•ᴗ•</p>\n<p>针对<strong>学习效率</strong>，个人觉得最好的学习，就是应用。如果你能够将书本上学习的东西，应用到实际中，对于学习到的知识就会有非常深刻的理解和提升。原因在于，你学习的时候重点在于记忆和理解，将某个东西搬到你脑子里。而在应用过程中，你需要考虑你所学东西的深层次的原理，考虑这种方式是否适用，是否有更好的解决。当你成功应用了某个案例，就拥有了较好的学习效果。而将这个方法抽象出来，学习过程即为：<strong>记忆-&gt;思考</strong> 的一个循环过程。<br>针对这一个过程，记忆是为了获取已有的东西，而思考是为了联系所记忆的东西，以及产生新的东西。比如你学习写代码，你必须先去看demo，编写hello world测试环境。了解语言特性和基本函数功能。这个过程是学习已有的东西。接下来你会设计一个自己想实现的功能，思考如何调用函数，如何管理内存，如何设计逻辑。这个就是思考产生的新事物。当然在这个过程中依旧有更加细化的记忆和思考在其中。可能你觉得我说的不对，比如在英语学习中，大多都是进行记忆，记得多，你就学的好。好吧，我是英语菜鸡，不讨论它。就说中文的学习，汉子、发音和语法都是需要记忆的，但是实际组成句子，理解句子，哪些优美哪些劣质，这都是需要思考的。这也是为啥大家都会写字，但不是每人都能成作家的原因。<br><strong>记忆-&gt;思考</strong> 过程是循环的，侧重点根据不同的阶段和不同的学科进行改变。当你是初学者，或者文科类专业，记忆过程占据比重较大，思考的过程更多在于知识的链接整理。而如果你是老手，或者大文豪。现有的某方面的知识摄取差不多了，更多就在于思考产生新的东西。（当然某方面的老手，也是其他方面的菜鸟）。<br>学习方法：<strong>记忆-&gt;思考</strong><br>这个过程最重要的是：<strong>专注</strong><br>最高的学习效率：<strong>专注</strong>的重复<strong>记忆-&gt;思考</strong></p>\n<h3 id=\"问题和解决问题\"><a href=\"#问题和解决问题\" class=\"headerlink\" title=\"问题和解决问题\"></a>问题和解决问题</h3><p><strong>问题</strong>多吗？多！解决问题难吗？难！<br>我也是这么觉得的，我现在最大的问题是：穷（正经脸）<br>首先，有问题是好事，不管在生活还是在专业中。有问题证明你对生活还有向往，对事物还有好奇。如果你觉得都没问题，那么惨了，我很担心你，你一定要找我好好聊聊。（一个不愁钱的人，赶紧抱大腿）。可能你会说，我才接触某个专业领域，眼前一抹黑，提不出什么问题。那很正常，有人说过，知识就像一个圆，里面是已知的，外面是未知的。所以，你知道的越多，问题也就越多。如果才接触某个领域，提不出问题，很正常。并且提不出问题这本身就是一个问题了，怎么解决，后面在讨论。如果是一个集体，那么提问题会比较多，这时候就需要进行抽象汇总了，将其中的重点整理出来，才能从根本上发现问题。<br><strong>怎么解决问题</strong>？首先，你要想解决这个问题。不要觉得太难。如果一个问题太难，比如我穷。那么就把这个大问题分成小问题，比如今年赚10万（有点像王总先赚它一个亿的口气），好像就没那么难了。先解决畏难情绪。等到了具体实施的时候，再讲某个大问题分解到具体小问题，比如每月赚1万。一直分解到你自我可控范围，比如每天不迟到。所有问题，就算世界大战这种问题都能这么解决。而其中的关键在于如何分析问题，分解问题，如果你分析不到问题关键点，那么分解问题后，实施完成也解决不了最后的大问题。比如我穷，分解后小问题是我一年过得不开心，分解后是每个月不开心，那么最后每天要开心，就需要买买买。最后还是穷。哈哈<del>(≧▽≦)/</del><br>问题来源：<strong>你想干点啥</strong><br>过程中的重点是：<strong>别怕</strong>+<strong>学习</strong><br>解决问题方法：<strong>分析和分解</strong></p>\n<p><strong>学习是一生的伴侣，问题是过客，解决问题则是交谈的乐趣了。</strong></p>\n<hr>"},{"title":"常用技术汇总","date":"2020-11-06T08:46:52.000Z","_content":"\n查过的好的资料，做个索引，忘了的时候一次性找到，岂不美哉 (•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n### 网络相关\n* [IO模型和基于事件驱动的IO多路复用模式](https://zhuanlan.zhihu.com/p/161357177)\n* [5分钟看懂HTTP3](https://www.infoq.cn/article/WhCObxfbgtphY7ijv1kp)\n* [QUIC协议原理分析](https://zhuanlan.zhihu.com/p/32553477)\n* [OpenResty 最佳实践](https://moonbingbing.gitbooks.io/openresty-best-practices/content/)\n* [SSL VPN的基本工作原理](http://m.elecfans.com/article/1168210.html)\n* [Linux 添加IP地址和路由的命令](https://www.jianshu.com/p/9326a6bf0ec5)\n* [Linux查看流量](https://segmentfault.com/a/1190000022275523)\n\n### 语言语法\n* [graphviz dot语法总结](https://onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/#1-%E7%AE%80%E4%BB%8B)\n* [web开发API](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage)\n\n### C语言\n[\"undefined reference to\" 问题解决方法](https://blog.csdn.net/aiwoziji13/article/details/7330333)\n[Linux 动态库 undefined symbol 原因定位与解决方法](https://dongyadoit.com/linux/2020/05/24/how-to-solve-undefined-symbol-when-link-dynamic-lib-on-linux/)\n[如何编写Makefile](https://seisman.github.io/how-to-write-makefile/archives.html)\n\n### 数据库\n[MySQL的sql_mode模式说明及设置](https://www.cnblogs.com/clschao/articles/9962347.html)","source":"_posts/常用技术汇总.md","raw":"---\ntitle: 常用技术汇总\ndate: 2020-11-06 16:46:52\ncategories: 技术杂谈\ntags: \n---\n\n查过的好的资料，做个索引，忘了的时候一次性找到，岂不美哉 (•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n### 网络相关\n* [IO模型和基于事件驱动的IO多路复用模式](https://zhuanlan.zhihu.com/p/161357177)\n* [5分钟看懂HTTP3](https://www.infoq.cn/article/WhCObxfbgtphY7ijv1kp)\n* [QUIC协议原理分析](https://zhuanlan.zhihu.com/p/32553477)\n* [OpenResty 最佳实践](https://moonbingbing.gitbooks.io/openresty-best-practices/content/)\n* [SSL VPN的基本工作原理](http://m.elecfans.com/article/1168210.html)\n* [Linux 添加IP地址和路由的命令](https://www.jianshu.com/p/9326a6bf0ec5)\n* [Linux查看流量](https://segmentfault.com/a/1190000022275523)\n\n### 语言语法\n* [graphviz dot语法总结](https://onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/#1-%E7%AE%80%E4%BB%8B)\n* [web开发API](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage)\n\n### C语言\n[\"undefined reference to\" 问题解决方法](https://blog.csdn.net/aiwoziji13/article/details/7330333)\n[Linux 动态库 undefined symbol 原因定位与解决方法](https://dongyadoit.com/linux/2020/05/24/how-to-solve-undefined-symbol-when-link-dynamic-lib-on-linux/)\n[如何编写Makefile](https://seisman.github.io/how-to-write-makefile/archives.html)\n\n### 数据库\n[MySQL的sql_mode模式说明及设置](https://www.cnblogs.com/clschao/articles/9962347.html)","slug":"常用技术汇总","published":1,"updated":"2020-12-28T06:12:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0int2001bh9uoc3cxgsrj","content":"<p>查过的好的资料，做个索引，忘了的时候一次性找到，岂不美哉 (•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n<h3 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h3><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/161357177\" target=\"_blank\" rel=\"noopener\">IO模型和基于事件驱动的IO多路复用模式</a></li>\n<li><a href=\"https://www.infoq.cn/article/WhCObxfbgtphY7ijv1kp\" target=\"_blank\" rel=\"noopener\">5分钟看懂HTTP3</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/32553477\" target=\"_blank\" rel=\"noopener\">QUIC协议原理分析</a></li>\n<li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/\" target=\"_blank\" rel=\"noopener\">OpenResty 最佳实践</a></li>\n<li><a href=\"http://m.elecfans.com/article/1168210.html\" target=\"_blank\" rel=\"noopener\">SSL VPN的基本工作原理</a></li>\n<li><a href=\"https://www.jianshu.com/p/9326a6bf0ec5\" target=\"_blank\" rel=\"noopener\">Linux 添加IP地址和路由的命令</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022275523\" target=\"_blank\" rel=\"noopener\">Linux查看流量</a></li>\n</ul>\n<h3 id=\"语言语法\"><a href=\"#语言语法\" class=\"headerlink\" title=\"语言语法\"></a>语言语法</h3><ul>\n<li><a href=\"https://onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/#1-%E7%AE%80%E4%BB%8B\" target=\"_blank\" rel=\"noopener\">graphviz dot语法总结</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage\" target=\"_blank\" rel=\"noopener\">web开发API</a></li>\n</ul>\n<h3 id=\"C语言\"><a href=\"#C语言\" class=\"headerlink\" title=\"C语言\"></a>C语言</h3><p><a href=\"https://blog.csdn.net/aiwoziji13/article/details/7330333\" target=\"_blank\" rel=\"noopener\">“undefined reference to” 问题解决方法</a><br><a href=\"https://dongyadoit.com/linux/2020/05/24/how-to-solve-undefined-symbol-when-link-dynamic-lib-on-linux/\" target=\"_blank\" rel=\"noopener\">Linux 动态库 undefined symbol 原因定位与解决方法</a><br><a href=\"https://seisman.github.io/how-to-write-makefile/archives.html\" target=\"_blank\" rel=\"noopener\">如何编写Makefile</a></p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p><a href=\"https://www.cnblogs.com/clschao/articles/9962347.html\" target=\"_blank\" rel=\"noopener\">MySQL的sql_mode模式说明及设置</a></p>\n","site":{"data":{}},"excerpt":"<p>查过的好的资料，做个索引，忘了的时候一次性找到，岂不美哉 (•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<h3 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h3><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/161357177\" target=\"_blank\" rel=\"noopener\">IO模型和基于事件驱动的IO多路复用模式</a></li>\n<li><a href=\"https://www.infoq.cn/article/WhCObxfbgtphY7ijv1kp\" target=\"_blank\" rel=\"noopener\">5分钟看懂HTTP3</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/32553477\" target=\"_blank\" rel=\"noopener\">QUIC协议原理分析</a></li>\n<li><a href=\"https://moonbingbing.gitbooks.io/openresty-best-practices/content/\" target=\"_blank\" rel=\"noopener\">OpenResty 最佳实践</a></li>\n<li><a href=\"http://m.elecfans.com/article/1168210.html\" target=\"_blank\" rel=\"noopener\">SSL VPN的基本工作原理</a></li>\n<li><a href=\"https://www.jianshu.com/p/9326a6bf0ec5\" target=\"_blank\" rel=\"noopener\">Linux 添加IP地址和路由的命令</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000022275523\" target=\"_blank\" rel=\"noopener\">Linux查看流量</a></li>\n</ul>\n<h3 id=\"语言语法\"><a href=\"#语言语法\" class=\"headerlink\" title=\"语言语法\"></a>语言语法</h3><ul>\n<li><a href=\"https://onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/#1-%E7%AE%80%E4%BB%8B\" target=\"_blank\" rel=\"noopener\">graphviz dot语法总结</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage\" target=\"_blank\" rel=\"noopener\">web开发API</a></li>\n</ul>\n<h3 id=\"C语言\"><a href=\"#C语言\" class=\"headerlink\" title=\"C语言\"></a>C语言</h3><p><a href=\"https://blog.csdn.net/aiwoziji13/article/details/7330333\" target=\"_blank\" rel=\"noopener\">“undefined reference to” 问题解决方法</a><br><a href=\"https://dongyadoit.com/linux/2020/05/24/how-to-solve-undefined-symbol-when-link-dynamic-lib-on-linux/\" target=\"_blank\" rel=\"noopener\">Linux 动态库 undefined symbol 原因定位与解决方法</a><br><a href=\"https://seisman.github.io/how-to-write-makefile/archives.html\" target=\"_blank\" rel=\"noopener\">如何编写Makefile</a></p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p><a href=\"https://www.cnblogs.com/clschao/articles/9962347.html\" target=\"_blank\" rel=\"noopener\">MySQL的sql_mode模式说明及设置</a></p>"},{"title":"待阅读书籍","date":"2020-11-05T08:39:16.000Z","_content":"\n先把觉得需要看的书列着 (•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n### 计算机技术\n1. 《深入理解计算机系统（原书第三版3）》\n2. 《mysql必知必会》...\n3. 《Unix 高级环境编程》\n\n### 心理学\n1. 《行为怪诞学》\n\n### 经济学\n1. 《微观经济学》曼昆 ...\n2. 《宏观经济学》曼昆\n\n### 文学作品\n1. 《山海经》...\n2. 《人类简史Ⅱ》（第二部）...\n3. 《明朝那些事儿Ⅰ》...","source":"_posts/待阅读书籍.md","raw":"---\ntitle: 待阅读书籍\ndate: 2020-11-05 16:39:16\ncategories: 随笔\ntags:\n---\n\n先把觉得需要看的书列着 (•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n<!-- more -->\n\n### 计算机技术\n1. 《深入理解计算机系统（原书第三版3）》\n2. 《mysql必知必会》...\n3. 《Unix 高级环境编程》\n\n### 心理学\n1. 《行为怪诞学》\n\n### 经济学\n1. 《微观经济学》曼昆 ...\n2. 《宏观经济学》曼昆\n\n### 文学作品\n1. 《山海经》...\n2. 《人类简史Ⅱ》（第二部）...\n3. 《明朝那些事儿Ⅰ》...","slug":"待阅读书籍","published":1,"updated":"2021-01-07T03:46:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0int3001gh9uogjkbx90p","content":"<p>先把觉得需要看的书列着 (•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n<h3 id=\"计算机技术\"><a href=\"#计算机技术\" class=\"headerlink\" title=\"计算机技术\"></a>计算机技术</h3><ol>\n<li>《深入理解计算机系统（原书第三版3）》</li>\n<li>《mysql必知必会》…</li>\n<li>《Unix 高级环境编程》</li>\n</ol>\n<h3 id=\"心理学\"><a href=\"#心理学\" class=\"headerlink\" title=\"心理学\"></a>心理学</h3><ol>\n<li>《行为怪诞学》</li>\n</ol>\n<h3 id=\"经济学\"><a href=\"#经济学\" class=\"headerlink\" title=\"经济学\"></a>经济学</h3><ol>\n<li>《微观经济学》曼昆 …</li>\n<li>《宏观经济学》曼昆</li>\n</ol>\n<h3 id=\"文学作品\"><a href=\"#文学作品\" class=\"headerlink\" title=\"文学作品\"></a>文学作品</h3><ol>\n<li>《山海经》…</li>\n<li>《人类简史Ⅱ》（第二部）…</li>\n<li>《明朝那些事儿Ⅰ》…</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>先把觉得需要看的书列着 (•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<h3 id=\"计算机技术\"><a href=\"#计算机技术\" class=\"headerlink\" title=\"计算机技术\"></a>计算机技术</h3><ol>\n<li>《深入理解计算机系统（原书第三版3）》</li>\n<li>《mysql必知必会》…</li>\n<li>《Unix 高级环境编程》</li>\n</ol>\n<h3 id=\"心理学\"><a href=\"#心理学\" class=\"headerlink\" title=\"心理学\"></a>心理学</h3><ol>\n<li>《行为怪诞学》</li>\n</ol>\n<h3 id=\"经济学\"><a href=\"#经济学\" class=\"headerlink\" title=\"经济学\"></a>经济学</h3><ol>\n<li>《微观经济学》曼昆 …</li>\n<li>《宏观经济学》曼昆</li>\n</ol>\n<h3 id=\"文学作品\"><a href=\"#文学作品\" class=\"headerlink\" title=\"文学作品\"></a>文学作品</h3><ol>\n<li>《山海经》…</li>\n<li>《人类简史Ⅱ》（第二部）…</li>\n<li>《明朝那些事儿Ⅰ》…</li>\n</ol>"},{"title":"技术札记","date":"2020-09-14T03:20:51.000Z","_content":"\n谁知道这里面有多少小技巧，没准哪个能帮上你呢？(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n\n<!-- more -->\n\n\n### ssh免密登录\n**原理：**\n![ssh免密登录原理](技术札记/ssh免密登录原理.png)\n**实际配置：**  \n1. 生成秘钥对：\n   本地主机：\n      ```sh\n      ssh-keygen -t rsa\n      ```\n2. 拷贝公钥到远程主机：\n   1. 简单方法，在本地主机执行：\n      ```\n      ssh-copy-id remote_username@server_ip_address -p port\n      ```\n      *不加`-p`默认22端口*\n      然后输入密码即可\n   2. 先登录远程主机：\n      1. 获取本地主机的公钥，追加到`authorized_keys`：\n         ```sh\n         cat id_rsa.pub >> authorized_keys\n         ```\n      2. 修改权限：\n         ```sh\n         chmod 600 authorized_keys\n         ```\n      3. 重启服务(不一定需要)：\n         ```sh\n         service sshd restart\n         ```\n3. 配置ssh名称(可选)\n   为了方便记住输入远程主机设备，可给远程主机配置名称。\n   ```\n   # vi ~/.ssh/config\n   Host remote\n   User root\n   Hostname 192.168.0.1\n   Port 22\n   # ssh remote\n   ```\n\n**测试：**  \n本地主机登录远程主机：\n```sh\nssh remote@<ip>\nexit\nssh #免密\n```\n\n**配置ssh禁用密码登录：**\n增加安全性，避免别人尝试非法登录。\n1. 完成上述的免密登录，服务端获得一个公钥，本机获得一个私钥\n2. 将私钥保存，供其他设备使用\n3. 设置服务端配置文件`/etc/ssh/sshd_config`，关闭密码登录：\n   ```\n   #禁用密码验证\n   PasswordAuthentication no\n   #启用密钥验证，下面两个默认都是开启的\n   RSAAuthentication yes\n   PubkeyAuthentication yes\n   ```\n4. 重启sshd服务：\n   ```\n   systemctl restart sshd\n   ```\n\n### VSCODE\n插件列表：  \n1. Remote-SSH：远程ssh登录，linux版本太低不支持\n2. sftp：远程文件同步\n3. vscode-icons：文件图标显示\n4. markdown all in one：Markdown插件\n5. markdown preview  Enhanced：Markdown预览\n    cmd：Markdown Preview Enhanced: Customize Css\n    background-color: rgb(157, 189, 189);\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"微软雅黑\";\n6. tabNine：机器学习补全(可能导致和语言补全冲突)\n7. go 补全插件，建议使用gopl，之前补全太慢，[解决](https://blog.csdn.net/zhetmdoubeizhanyong/article/details/102534172)\n8. koroFileHeader：用于生成标准格式函数头说明，或者代码文件头说明\n9. bookmarks：给代码打标签\n10. Draw.io integration：drawio的绘图插件\n\n\n### C 段错误处理(Linux)\n1. 必须先得到段错误的地址，可以用gdb的bt或者在程序中捕捉段错误堆栈。`SIGSEGV, SIGABRT`\n2. 在可以编译的机器上源码编译，带上行号和函数名，使用`addr2line -f -e <file> <addr>`来映射到具体的函数位置。\n3. `objdump -D <file> | grep -A 50 -B 50 <addr>` 也能查到对应汇编代码，从而定位函数。\n\n### 进程运行状态查看\n`pstack <pid> `查看当前运行程序的运行状态，非常方便排查阻塞和死锁问题。\n`ps aux --sort -rss` 按照内存占用排序，排查进程内存泄漏。\n`ps v <pid>`查看某个进程具体的信息，类似top列出的进程信息。\n\n###   断言assert\n处理程序中不应该发生的错误，常用在参数检查。\n[参考1](http://c.biancheng.net/c/assert/), [参考2](https://www.runoob.com/w3cnote/c-assert.html)\n### ipset源码技巧\nipset源码分析\n1. 这里有个很牛皮的操作，在c里面实现的模块化加载。具体操作如下：\n   如果我想在ipset中支持一种新的添加规则，比如hash:ip，那么，我需要改多少源码？\n   ```\n   1. 按照格式写好ipset_hash_ip.c里面包含了hash:ip的传输规则和初始化方法。\n   2. 重新执行configure，加入这个规则（这里具体实现我没有确认，但猜测如此）\n   3. 执行make\n   ```\n   那么其具体实现方法如何？\n   ```\n     1. 首先在configure中会根据你配置的支持规则模块生成makefile，makefile中就会包含编译这个模块的源文件。\n     2. make时会根据配置产生的源文件列表，生成一个type_init.c文件，里面包含了所有规则模块的初始化。\n     3. 主函数会调用type_init.c源文件，将初始化好的规则加载到一个全局链表中，在规则匹配的时候进行匹配。\n   ```\n   这种方法就实现了模块化的添加和删除规则模块的方法。这种模块化的思想，在其他语言里并不少见，但是在c语言里面实现的，还是少见(菜鸡的我反正第一次见)\n2. 提供了接口，自定义输出函数和日志输出文件。\n3. X Macros宏使用，类似定义一个map，但是比map功能更丰富。\n   ``` c\n   #include <stdio.h> \n\n   // Defines four variables. \n   #define VARIABLES \\ \n      X(value1, 1) \\ \n      X(value2, 2) \\ \n      X(value3, 3) \\ \n      X(value4, 4) \n\n   // driver program. \n   int main(void) \n   { \n      // Declaration of every variable \n      // is done through macro. \n      #define X(value, a) char value[10]; \n         VARIABLES \n      #undef X \n      \n      // String values are accepted \n      // for all variables. \n      #define X(value, a) scanf(\"\\n%s\", value); \n         VARIABLES \n      #undef X \n      \n      // Values are printed. \n      #define X(value, a) printf(\"%d) %s\\n\", a, value); \n         VARIABLES \n      #undef X \n      return 0; \n   } \n   ```\n   实际上预编译后的代码：\n   ``` c\n   #include <stdio.h> \n\n   int main(void) \n   { \n      char value1[10]; \n      char value2[10]; \n      char value3[10]; \n      char value4[10]; \n\n      scanf(\"\\n%s\", value1); \n      scanf(\"\\n%s\", value2); \n      scanf(\"\\n%s\", value3); \n      scanf(\"\\n%s\", value4); \n\n      printf(\"%d) %s\\n\", 1, value1); \n      printf(\"%d) %s\\n\", 2, value2); \n      printf(\"%d) %s\\n\", 3, value3); \n      printf(\"%d) %s\\n\", 4, value4); \n      return 0; \n   } \n   ```\n   示例2：\n   ```c\n   #include <stdio.h> \n\n   // Defining a macro \n   // with the values of colors. \n   #define COLORS \\ \n      X(RED)\t \\ \n      X(BLACK) \\ \n      X(WHITE) \\ \n      X(BLUE) \n\n   // Creating an enum of colors \n   // by macro expansion. \n   enum colors { \n      #define X(value) value, \n         COLORS \n      #undef X \n   }; \n\n   // A utility that takes the enum value \n   // and returns corresponding string value \n   char* toString(enum colors value) \n   { \n      switch (value) { \n         #define X(color) \\ \n            case color: \\ \n               return #color; \n               COLORS \n         #undef X \n      } \n   } \n\n   // driver program. \n   int main(void) \n   { \n      enum colors color = WHITE; \n      printf(\"%s\", toString(color)); \n      return 0; \n   } \n   ```\n\n   实际上预编译后的代码：\n   ```c\n   #include <stdio.h> \n\n   // Creating an enum of colors. \n   enum colors { \n      RED, \n      BLACK, \n      WHITE, \n      BLUE \n   }; \n\n   /*A utility that takes the enum value and returns \n   corresponding string value*/\n   char* toString(enum colors value) \n   { \n      switch (value) { \n      case RED: \n         return \"RED\"; \n      case BLACK: \n         return \"BLACK\"; \n      case WHITE: \n         return \"WHITE\"; \n      case BLUE: \n         return \"BLUE\"; \n      } \n   } \n\n   // driver program. \n   int main(void) \n   { \n      enum colors color = WHITE; \n      printf(\"%s\", toString(color)); \n      return 0; \n   } \n\n   ```\n   X macros 主要适用于多中类型有相同的处理逻辑。简单的类似enum中int到string的映射，复杂的到ipset的多种类型处理。\n4. gcc 编译debug模式或者自定义模式。`-Dxxx`。示例：\n   test.c:\n   ```\n   #include <stdio.h>\n\n   int main(int agv, char *agrs[]){\n   #ifdef TEST\n      printf(\"ENABLE TEST\\n\");\n   #endif\n      printf(\"test over\\n\");\n      return 0;\n   }\n   ```\n   执行TEST：\n   ```\n   $ gcc test.c -DTEST -o test\n   $ ./test\n   ENABLE TEST\n   test over\n   $ gcc test.c -o test\n   $ ./test\n   test over\n   ```\n   这种方式在做C的模块编译，以及Debug编译特别有效。DEBUG适合开源代码，不适合现场代码排查。\n   [15个最常用的GCC编译器参数](https://colobu.com/2018/08/28/15-Most-Frequently-Used-GCC-Compiler-Command-Line-Options/#%E4%BD%BF%E7%94%A8-V%E6%89%93%E5%8D%B0%E6%89%80%E6%9C%89%E7%9A%84%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4)\n5. 源码编译的时候，缺少依赖库。\n   * 一般的解决方法，都是直接用yum install libxxx-devel.x86_64，再次进行configure。\n   * 如果还不成功，就检查你的`PKG_CONFIG_PATH`变量是否存在，不存在添加对应的环境变量(默认一般在`/usr/lib64/pkgconfig/`)。\n   * 如果还不行，就执行`/usr/bin/pkg-config --exists --print-errors \"libxxx >= x.x.xx\"`(通常这个命令可以在configure文件中找到)，然后再根据问题来排查。\n   * 最后的方法，就是用`./configure --help`来找到对应的库的环境变量名称，修改对应的`libxxx_LIBS`\n\n### 一些工具\n[查找各种代码的使用范例](https://golang.hotexamples.com/)\n\n### go好用的开源组件\n配置文件读写：\n* github.com/spf13/viper\n\n日志：\n* go.uber.org/zap\n\nweb服务：\n* github.com/gin-gonic/gin\n\ngo编写命令：\n* github.com/urfave/cli/v2\n\nrestful 文档生成：\n* https://github.com/swaggo/gin-swagger \n  * [全教程](https://awesomeopensource.com/project/swaggo/swag)\n  * [教程](https://zhuanlan.zhihu.com/p/40304004)\n  * [教程](https://juejin.im/post/5d3f92356fb9a06b317b3baf)\n\n\n### Go技巧\n1. 测试\n   1. 单元测试\n      就是常用的以`_test.go`结尾的文件，函数名`Testxx`来构成的单元测试。如果你想将单元测试编译出来，可以使用`-c`参数，执行测试程序的时候，使用`-test.xxx`来执行test相关命令。例如：`go test -run xxx`=`./a -test.run xxx`\n   2. 性能测试\n      同样在`_test.go`结尾的文件中，以`Benchmark`为开头的性能测试，具体用法可以[参考](https://my.oschina.net/solate/blog/3034188), 生成性能图和火焰图更有利于分析。[另外的参考](https://zhuanlan.zhihu.com/p/80578541)\n\n### xrags\n常见的用法：\n1. `ls | xargs echo` 相当于`echo a b c`\n2.  `ls | xargs -i echo {}` 相当于 `echo a; echo b; echo c`，`-i`同`-I '{}'`，其含义是将`{}`内的内容替换成前面输出的内容，并且循环执行。\n3.  `-t`参数可以查看你xargs执行的命令。\n\n**注意：** 如果在xargs后的命令参数中，路径参数有空格的或tab的，会导致路径无法识别。比如`echo \"/home/jihan \" | xargs -i ls {}`就会报错，虽然实际命令`ls /home/jihan<空格>`没有问题，但是用xargs+i的形式就有问题。\n\n### shell调试\n1. -n 命令，显示shell，不执行，通常用于语法检查。\n2. -x 命令，我经常用，在执行过程中打印shell脚本执行的真实命令。-v是打印原始命令，不做替换。\n3. bashdb，类似gdb做调试用，命令：`bashdb --debug your.sh`，一下是常用参数：\n   ```\n   一、列出代码和查询代码类：\n   l  列出当前行以下的10行\n   -  列出正在执行的代码行的前面10行\n   .  回到正在执行的代码行\n   /pat/ 向后搜索pat\n   ？pat？向前搜索pat\n   二、Debug控制类：\n   h     帮助\n   help  命令 得到命令的具体信息\n   q     退出bashdb\n   x     算数表达式 计算算数表达式的值，并显示出来\n   !!    空格Shell命令 参数 执行shell命令\n   使用bashdb进行debug的常用命令(cont.)\n   三、控制脚本执行类：\n   n   执行下一条语句，遇到函数，不进入函数里面执行，将函数当作黑盒\n   s n 单步执行n次，遇到函数进入函数里面\n   b   行号n 在行号n处设置断点\n   del 行号n 撤销行号n处的断点\n   c   行号n 一直执行到行号n处\n   R   重新启动当前调试脚本\n   Finish 执行到程序最后\n   cond n expr 条件断点\n   ```\n\n### 查找与当前进程通信的所有进程\n1. 找到当前进程S的进程pid\n2. 获取与S通信A的tcp端口号\n3. 通过A的tcp端口号，获得A的进程pid\n![举个栗子](技术札记/查找与当前进程通信的所有进程.jpg)\n\n### 程序执行时的系统调用\n`strace` 是 Linux 中用于监控和篡改进程与内核之间操作的工具。非常强大的工具，能够有效排查程序性能问题，异常操作以及段错误问题。\n\n### 程序内存检测\n`valgrind` [参考](https://www.jianshu.com/p/29a7a7d3d5b1)\n\n### Linux文件锁定\n在root权限下，有可能对某个文件都没有操作权限，可能是使用`chattr`对其进行锁定，可使用其进行解除。`lsattr`查看相应属性。[参考](http://c.biancheng.net/view/874.html)\n\n### Linux 内核小版本升级\n小版本，就是 `3.10.0-862`中`-`后的东西。而我们进行升级的时候，需要(centos为例，3.10.0-693升级到3.10.0-862)：\n1. 大版本相同的一个设备(3.10.0-693)\n2. 想要升级的rpm包(3.10.0-862)[官方](https://www.kernel.org/)，找不到直接Google搜吧。[这个网站很全](https://linuxsoft.cern.ch/cern/centos/7/updates/x86_64/repoview/kernel.html)\n3. `yum install kernel-3.10.0-862.9.1.el7.x86_64.rpm`\n4. grub2看看启动顺序`grub2-editenv list`以及`awk -F \\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg`\n5. reboot\n6. ~~需要源码的情况下，执行`yum install kernel-devel`会自动根据内核版本下载安装源码到`/usr/src/kernels`中(会下载最新版本的，郁闷)~~\n7. 需要内核源码的话，从网上搜索对应的源码，执行`yum install kernel-devel-xxxx.rpm`安装即可。[这个网站很全](https://linuxsoft.cern.ch/cern/centos/7/updates/x86_64/repoview/kernel-devel.html)\n\n### linux源码编译\n\n### 内核模块源码编译安装\n用户态的源码编译安装，和普通的其他软件没有什么区别，基本都是make，make install，但是你要进行内核模块的源码构建，那么有如下几种方式:\n1. 放在源码树以内(例如iptables)。假如我要自定义一个netfilter的模块，而且希望将他存放于/net/netfilter/目录下，那么要注意，在该目录下存在大量的.c源码文件。如果你的模块文件仅仅只有一两个源文件，你可以直接将其放在该目录下，如果你的模块包含的源文件比较多的话，也许你应该建立一个单独的文件夹，用于专门维护你的模块程序源文件。假如创建一个目录名为：mynetfilter/子目录。接下来需要修改/net/netfilter/目录下的Makefile文件：\n   ```\n   Obj-m += mynetfilter/\n   ```\n   这行编译指令告诉模块构建系统，在编译模块时需要进入mynetfilter/子目录。如果你的模块程序依赖于一个特殊的配置选项。比如，CONFIG_ MYNETFILTER_TEST（该选项在编译内核时，执行make menuconfig命令时用于配置该模块的编译选项），你需要修改/net/netfilter/目录下的Kconfig文件\n   ```\n   config “MYNETFILTER_TEST”\n   tristate “netfilter test module”\n   ```\n   编译内核时，执行make menucofnig之后，我们会在配置菜单上看到此选项,随之，需要修改Makefile文件，用下面的指令替换之前的`Obj-m += mynetfilter/`：\n   ```\n   Obj-$(CONFIG_MYNETFILTER_TEST)  += mynetfilter/\n   ```\n   最后，在/net/netfilter/mynetfilter/目录下添加一个Makefile文件，其中需要添加下面的指令：\n   ```\n   Obj –m  += mynetfilter.o\n   ```\n   准备就绪了，现在构建系统会进入到mynetfilter/目录下，将mynetfilter.c编译为mynetfilter.ko模块。\n   附：如果你只想编译内核中某个模块的ko，也可以cd到该目录，执行：\n   ```\n   make CONFIG_XXX=m –c  /kernel/source/location SUBDIRS=$PWD modules\n   ```\n2. 内核源码树之外构建(例如ipset)\n   如果将模块代码放在内核源码树之外单独构建的话，你只需要在你的模块目录下创建一个Makefile文件，添加一行指令：\n   ```\n   Obj-m := mynetfilter.o\n   ```\n   如果你有多个源文件只需添加另一行指令：\n   ```\n   mynetfilter-objs := mynetfiler-init.o mynetfiler-exit.o\n   ```\n   模块在内核内和内核外构建的最大的区别在于构建过程。当模块在内核源代码树之外构建时，你必须告诉make如何找到内核源代码文件和基础Makefile文件。通过下面的指令完成上述功能：\n   ```\n   make –c  /kernel/source/location SUBDIRS=$PWD modules\n   ```\n   其中，/kernel/source/location/ 即为你配置的内核源代码树的位置。SUBDIRS是你需要编译的模块位置。\n\n### Linux 内核模块加载\n[版本检查机制](https://www.ibm.com/developerworks/cn/linux/l-cn-kernelmodules/?ca=drs)\n\n### Linux路由操作\n路由：某个ip(某个范围ip)应当到哪个网关去找。网关对应下一条路由。\n**添加默认路由：**\n`route add default via 192.168.161.11 dev eth0`\n**添加一般路由：**\n`route add -net 192.168.62.11 netmask 255.255.255.0 gw 192.168.1.1`\n或\n`route add -net 192.168.62.0/24 gw 192.168.1.1`\n**删除路由：**\n`route del -net 192.168.62.11 netmask 255.255.255.0`\n或\n`route del -net 192.168.62.0/24`\n\n- `net` 表示一个ip或者网段\n- `gw` 表示网关或下一跳路由\n- `dev` 表示对应的出口网卡\n\n### mysql 性能优化\n[TinkPHP 对mysql 20条优化建议](http://blog.chinaunix.net/uid-26870656-id-4287492.html)\n\n### sudo、su和sudo -s的差别\n\n\n###  relocation error: /usr/lib64/libc.so.6: symbol _dl_starting_up, \nrelocation error: /usr/lib64/libc.so.6: symbol _dl_starting_up, version GLIBC_PRIVATE not defined in file ld-linux-x86-64.so.2 with link time reference 问题解决\n在建立一个错误的软连接到ld-linux-x86-64.so.2时，悲剧就这么发生了。此时大部分命令都不能使用，SSH当然也不能登录了。这个时候一定不要退出终端。\n\n有人说那就把软连接复原吧，可是ln也同样无法使用。。。这时候我们就可以使用可爱的sln命令就可以了，哈哈。\n\nlsn /usr/lib64/ld-2.17.so /usr/lib64/ld-linux-x86-64.so.2 \n\n### linux死亡操作\n随意动`/usr/lib64`或`/lib64`下的库，特别是`ld、libc`之类的，**覆盖、移动和删除**效果都差不多，基本就是系统爆破级别的。特别注意升级openssl，gcc都容易出现这种问题。附上linux文件目录结构（[参考](https://www.runoob.com/linux/linux-system-contents.html)）：\n![](技术札记/linux文件结构.jpg)\n\n### Gcc静/动态链接库链接顺序\n**静态库**链接时搜索路径顺序：\n1. ld会去找GCC命令中的参数-L\n2. 再找gcc的环境变量LIBRARY_PATH\n3. 再找内定目录 /lib /usr/lib /usr/local/lib 这是当初compile gcc时写在程序内的\n\n**动态库**链接时、执行时搜索路径顺序:\n1. 编译目标代码时指定的动态库搜索路径\n2. 环境变量LD_LIBRARY_PATH指定的动态库搜索路径\n3. 配置文件/etc/ld.so.conf中指定的动态库搜索路径\n4. 默认的动态库搜索路径/lib\n5. 默认的动态库搜索路径/usr/lib\n\n链接时相互依赖顺序是从右到左，越是底层，越靠后写。例如：\n```\ng++ ...  obj($?) -l(上层逻辑lib) -l(中间封装lib) -l(基础lib) -l(系统lib)  -o $@\n```\n\n有关环境变量：\nLIBRARY_PATH环境变量：指定程序静态链接库文件搜索路径\nLD_LIBRARY_PATH环境变量：指定程序动态链接库文件搜索路径\n\n对于排查链接问题方法：\n`ldd <your_lib>`：查看可执行程序或者动态库运行时的链接库\n`readelf -d <your_lib>`：和ldd类似，不用运行程序，查看可执行程序或动态库[ELF](https://en.wikipedia.org/wiki/Executable_and_Linkable_Format)\n`LD_DEBUG=libs ./<your_exe>`：查看程序执行时的动态库调度过程。\n`ldconfig`：它会遍历默认所有共享库目录，比如/lib，/usr/lib等，然后更新所有的软链接，使她们指向最新共享库。\n\n指定动态库版本或路径：\n`-Wl,-rpath,<your_lib_path>`: 指定程序运行时动态库链接路径。\n将`-lxxx`直接修改为`/you/path/libxxx`，可以指定动态库的绝对路径。\n\n\n参考：\n[wiki rpath](https://en.wikipedia.org/wiki/Rpath)\n[rpath vs runpath](https://medium.com/nataraj-raghavendra/rpath-vs-runpath-883029b17c45) 附加了许多动态库加载的示例。\n[静态链接与动态链接库的查找顺序](https://www.cnblogs.com/GnibChen/p/8649476.html)\n[gcc 链接库的顺序问题](https://blog.csdn.net/ssmale/article/details/17225345)\n[gcc/ld: what is to -Wl,-rpath in dynamic linking what -l is to -L in static linking?](https://stackoverflow.com/questions/33373851/gcc-ld-what-is-to-wl-rpath-in-dynamic-linking-what-l-is-to-l-in-static-link/33378137)\n[Why LD_LIBRARY_PATH is BAD and the correct way to load dynamic libraries](https://stackoverflow.com/questions/25918462/why-ld-library-path-is-bad-and-the-correct-way-to-load-dynamic-libraries)\n\n### 有关linux下的目录\n[上述](#linux死亡操作)有相关的linux目录结构，这里说明一下`/tmp`目录，在linux系统中，`/tmp`目录在一定周期或者重启等都有可能删除相应部分符合条件的文件。而删除方法是通过执行定时任务`/etc/cron.daily/tmpwatch`，此定时任务在系统最小安装的情况下，需要手动安装。\n\n### 关于系统监控\n相对大型系统，都需要进行系统监控。特别针对于微服务系统架构。个人理解需要从三个方面进行监控：\n1. 业务逻辑层，负责统计业务访问状态，访问结果，异常等(常用方式log输出。比如syslog)——通常管理员用户都关注\n2. 分布式链路追踪，又称为APM。用于追踪一个业务从开始到结束中间每个阶段的执行情况，用于多组件排错非常方便。(opentracing, Zipkin and Jaeger)——通常管理员关注\n3. 系统整体运行状态，关注系统整体内存，网络，cpu等使用情况。（Prometheus）——管理员关注\n\n### 关于软件项目方案评估\n1. 易用性 \n2. 可用性\n3. 性能\n4. 安全性\n5. 可维护性(日志，监控系统)\n6. 可扩展性","source":"_posts/技术札记.md","raw":"---\ntitle: 技术札记\ndate: 2020-09-14 11:20:51\ncategories: 技术杂谈\ntags: \n---\n\n谁知道这里面有多少小技巧，没准哪个能帮上你呢？(•̀⌄•́)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n* * *\n\n<!-- more -->\n\n\n### ssh免密登录\n**原理：**\n![ssh免密登录原理](技术札记/ssh免密登录原理.png)\n**实际配置：**  \n1. 生成秘钥对：\n   本地主机：\n      ```sh\n      ssh-keygen -t rsa\n      ```\n2. 拷贝公钥到远程主机：\n   1. 简单方法，在本地主机执行：\n      ```\n      ssh-copy-id remote_username@server_ip_address -p port\n      ```\n      *不加`-p`默认22端口*\n      然后输入密码即可\n   2. 先登录远程主机：\n      1. 获取本地主机的公钥，追加到`authorized_keys`：\n         ```sh\n         cat id_rsa.pub >> authorized_keys\n         ```\n      2. 修改权限：\n         ```sh\n         chmod 600 authorized_keys\n         ```\n      3. 重启服务(不一定需要)：\n         ```sh\n         service sshd restart\n         ```\n3. 配置ssh名称(可选)\n   为了方便记住输入远程主机设备，可给远程主机配置名称。\n   ```\n   # vi ~/.ssh/config\n   Host remote\n   User root\n   Hostname 192.168.0.1\n   Port 22\n   # ssh remote\n   ```\n\n**测试：**  \n本地主机登录远程主机：\n```sh\nssh remote@<ip>\nexit\nssh #免密\n```\n\n**配置ssh禁用密码登录：**\n增加安全性，避免别人尝试非法登录。\n1. 完成上述的免密登录，服务端获得一个公钥，本机获得一个私钥\n2. 将私钥保存，供其他设备使用\n3. 设置服务端配置文件`/etc/ssh/sshd_config`，关闭密码登录：\n   ```\n   #禁用密码验证\n   PasswordAuthentication no\n   #启用密钥验证，下面两个默认都是开启的\n   RSAAuthentication yes\n   PubkeyAuthentication yes\n   ```\n4. 重启sshd服务：\n   ```\n   systemctl restart sshd\n   ```\n\n### VSCODE\n插件列表：  \n1. Remote-SSH：远程ssh登录，linux版本太低不支持\n2. sftp：远程文件同步\n3. vscode-icons：文件图标显示\n4. markdown all in one：Markdown插件\n5. markdown preview  Enhanced：Markdown预览\n    cmd：Markdown Preview Enhanced: Customize Css\n    background-color: rgb(157, 189, 189);\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"微软雅黑\";\n6. tabNine：机器学习补全(可能导致和语言补全冲突)\n7. go 补全插件，建议使用gopl，之前补全太慢，[解决](https://blog.csdn.net/zhetmdoubeizhanyong/article/details/102534172)\n8. koroFileHeader：用于生成标准格式函数头说明，或者代码文件头说明\n9. bookmarks：给代码打标签\n10. Draw.io integration：drawio的绘图插件\n\n\n### C 段错误处理(Linux)\n1. 必须先得到段错误的地址，可以用gdb的bt或者在程序中捕捉段错误堆栈。`SIGSEGV, SIGABRT`\n2. 在可以编译的机器上源码编译，带上行号和函数名，使用`addr2line -f -e <file> <addr>`来映射到具体的函数位置。\n3. `objdump -D <file> | grep -A 50 -B 50 <addr>` 也能查到对应汇编代码，从而定位函数。\n\n### 进程运行状态查看\n`pstack <pid> `查看当前运行程序的运行状态，非常方便排查阻塞和死锁问题。\n`ps aux --sort -rss` 按照内存占用排序，排查进程内存泄漏。\n`ps v <pid>`查看某个进程具体的信息，类似top列出的进程信息。\n\n###   断言assert\n处理程序中不应该发生的错误，常用在参数检查。\n[参考1](http://c.biancheng.net/c/assert/), [参考2](https://www.runoob.com/w3cnote/c-assert.html)\n### ipset源码技巧\nipset源码分析\n1. 这里有个很牛皮的操作，在c里面实现的模块化加载。具体操作如下：\n   如果我想在ipset中支持一种新的添加规则，比如hash:ip，那么，我需要改多少源码？\n   ```\n   1. 按照格式写好ipset_hash_ip.c里面包含了hash:ip的传输规则和初始化方法。\n   2. 重新执行configure，加入这个规则（这里具体实现我没有确认，但猜测如此）\n   3. 执行make\n   ```\n   那么其具体实现方法如何？\n   ```\n     1. 首先在configure中会根据你配置的支持规则模块生成makefile，makefile中就会包含编译这个模块的源文件。\n     2. make时会根据配置产生的源文件列表，生成一个type_init.c文件，里面包含了所有规则模块的初始化。\n     3. 主函数会调用type_init.c源文件，将初始化好的规则加载到一个全局链表中，在规则匹配的时候进行匹配。\n   ```\n   这种方法就实现了模块化的添加和删除规则模块的方法。这种模块化的思想，在其他语言里并不少见，但是在c语言里面实现的，还是少见(菜鸡的我反正第一次见)\n2. 提供了接口，自定义输出函数和日志输出文件。\n3. X Macros宏使用，类似定义一个map，但是比map功能更丰富。\n   ``` c\n   #include <stdio.h> \n\n   // Defines four variables. \n   #define VARIABLES \\ \n      X(value1, 1) \\ \n      X(value2, 2) \\ \n      X(value3, 3) \\ \n      X(value4, 4) \n\n   // driver program. \n   int main(void) \n   { \n      // Declaration of every variable \n      // is done through macro. \n      #define X(value, a) char value[10]; \n         VARIABLES \n      #undef X \n      \n      // String values are accepted \n      // for all variables. \n      #define X(value, a) scanf(\"\\n%s\", value); \n         VARIABLES \n      #undef X \n      \n      // Values are printed. \n      #define X(value, a) printf(\"%d) %s\\n\", a, value); \n         VARIABLES \n      #undef X \n      return 0; \n   } \n   ```\n   实际上预编译后的代码：\n   ``` c\n   #include <stdio.h> \n\n   int main(void) \n   { \n      char value1[10]; \n      char value2[10]; \n      char value3[10]; \n      char value4[10]; \n\n      scanf(\"\\n%s\", value1); \n      scanf(\"\\n%s\", value2); \n      scanf(\"\\n%s\", value3); \n      scanf(\"\\n%s\", value4); \n\n      printf(\"%d) %s\\n\", 1, value1); \n      printf(\"%d) %s\\n\", 2, value2); \n      printf(\"%d) %s\\n\", 3, value3); \n      printf(\"%d) %s\\n\", 4, value4); \n      return 0; \n   } \n   ```\n   示例2：\n   ```c\n   #include <stdio.h> \n\n   // Defining a macro \n   // with the values of colors. \n   #define COLORS \\ \n      X(RED)\t \\ \n      X(BLACK) \\ \n      X(WHITE) \\ \n      X(BLUE) \n\n   // Creating an enum of colors \n   // by macro expansion. \n   enum colors { \n      #define X(value) value, \n         COLORS \n      #undef X \n   }; \n\n   // A utility that takes the enum value \n   // and returns corresponding string value \n   char* toString(enum colors value) \n   { \n      switch (value) { \n         #define X(color) \\ \n            case color: \\ \n               return #color; \n               COLORS \n         #undef X \n      } \n   } \n\n   // driver program. \n   int main(void) \n   { \n      enum colors color = WHITE; \n      printf(\"%s\", toString(color)); \n      return 0; \n   } \n   ```\n\n   实际上预编译后的代码：\n   ```c\n   #include <stdio.h> \n\n   // Creating an enum of colors. \n   enum colors { \n      RED, \n      BLACK, \n      WHITE, \n      BLUE \n   }; \n\n   /*A utility that takes the enum value and returns \n   corresponding string value*/\n   char* toString(enum colors value) \n   { \n      switch (value) { \n      case RED: \n         return \"RED\"; \n      case BLACK: \n         return \"BLACK\"; \n      case WHITE: \n         return \"WHITE\"; \n      case BLUE: \n         return \"BLUE\"; \n      } \n   } \n\n   // driver program. \n   int main(void) \n   { \n      enum colors color = WHITE; \n      printf(\"%s\", toString(color)); \n      return 0; \n   } \n\n   ```\n   X macros 主要适用于多中类型有相同的处理逻辑。简单的类似enum中int到string的映射，复杂的到ipset的多种类型处理。\n4. gcc 编译debug模式或者自定义模式。`-Dxxx`。示例：\n   test.c:\n   ```\n   #include <stdio.h>\n\n   int main(int agv, char *agrs[]){\n   #ifdef TEST\n      printf(\"ENABLE TEST\\n\");\n   #endif\n      printf(\"test over\\n\");\n      return 0;\n   }\n   ```\n   执行TEST：\n   ```\n   $ gcc test.c -DTEST -o test\n   $ ./test\n   ENABLE TEST\n   test over\n   $ gcc test.c -o test\n   $ ./test\n   test over\n   ```\n   这种方式在做C的模块编译，以及Debug编译特别有效。DEBUG适合开源代码，不适合现场代码排查。\n   [15个最常用的GCC编译器参数](https://colobu.com/2018/08/28/15-Most-Frequently-Used-GCC-Compiler-Command-Line-Options/#%E4%BD%BF%E7%94%A8-V%E6%89%93%E5%8D%B0%E6%89%80%E6%9C%89%E7%9A%84%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4)\n5. 源码编译的时候，缺少依赖库。\n   * 一般的解决方法，都是直接用yum install libxxx-devel.x86_64，再次进行configure。\n   * 如果还不成功，就检查你的`PKG_CONFIG_PATH`变量是否存在，不存在添加对应的环境变量(默认一般在`/usr/lib64/pkgconfig/`)。\n   * 如果还不行，就执行`/usr/bin/pkg-config --exists --print-errors \"libxxx >= x.x.xx\"`(通常这个命令可以在configure文件中找到)，然后再根据问题来排查。\n   * 最后的方法，就是用`./configure --help`来找到对应的库的环境变量名称，修改对应的`libxxx_LIBS`\n\n### 一些工具\n[查找各种代码的使用范例](https://golang.hotexamples.com/)\n\n### go好用的开源组件\n配置文件读写：\n* github.com/spf13/viper\n\n日志：\n* go.uber.org/zap\n\nweb服务：\n* github.com/gin-gonic/gin\n\ngo编写命令：\n* github.com/urfave/cli/v2\n\nrestful 文档生成：\n* https://github.com/swaggo/gin-swagger \n  * [全教程](https://awesomeopensource.com/project/swaggo/swag)\n  * [教程](https://zhuanlan.zhihu.com/p/40304004)\n  * [教程](https://juejin.im/post/5d3f92356fb9a06b317b3baf)\n\n\n### Go技巧\n1. 测试\n   1. 单元测试\n      就是常用的以`_test.go`结尾的文件，函数名`Testxx`来构成的单元测试。如果你想将单元测试编译出来，可以使用`-c`参数，执行测试程序的时候，使用`-test.xxx`来执行test相关命令。例如：`go test -run xxx`=`./a -test.run xxx`\n   2. 性能测试\n      同样在`_test.go`结尾的文件中，以`Benchmark`为开头的性能测试，具体用法可以[参考](https://my.oschina.net/solate/blog/3034188), 生成性能图和火焰图更有利于分析。[另外的参考](https://zhuanlan.zhihu.com/p/80578541)\n\n### xrags\n常见的用法：\n1. `ls | xargs echo` 相当于`echo a b c`\n2.  `ls | xargs -i echo {}` 相当于 `echo a; echo b; echo c`，`-i`同`-I '{}'`，其含义是将`{}`内的内容替换成前面输出的内容，并且循环执行。\n3.  `-t`参数可以查看你xargs执行的命令。\n\n**注意：** 如果在xargs后的命令参数中，路径参数有空格的或tab的，会导致路径无法识别。比如`echo \"/home/jihan \" | xargs -i ls {}`就会报错，虽然实际命令`ls /home/jihan<空格>`没有问题，但是用xargs+i的形式就有问题。\n\n### shell调试\n1. -n 命令，显示shell，不执行，通常用于语法检查。\n2. -x 命令，我经常用，在执行过程中打印shell脚本执行的真实命令。-v是打印原始命令，不做替换。\n3. bashdb，类似gdb做调试用，命令：`bashdb --debug your.sh`，一下是常用参数：\n   ```\n   一、列出代码和查询代码类：\n   l  列出当前行以下的10行\n   -  列出正在执行的代码行的前面10行\n   .  回到正在执行的代码行\n   /pat/ 向后搜索pat\n   ？pat？向前搜索pat\n   二、Debug控制类：\n   h     帮助\n   help  命令 得到命令的具体信息\n   q     退出bashdb\n   x     算数表达式 计算算数表达式的值，并显示出来\n   !!    空格Shell命令 参数 执行shell命令\n   使用bashdb进行debug的常用命令(cont.)\n   三、控制脚本执行类：\n   n   执行下一条语句，遇到函数，不进入函数里面执行，将函数当作黑盒\n   s n 单步执行n次，遇到函数进入函数里面\n   b   行号n 在行号n处设置断点\n   del 行号n 撤销行号n处的断点\n   c   行号n 一直执行到行号n处\n   R   重新启动当前调试脚本\n   Finish 执行到程序最后\n   cond n expr 条件断点\n   ```\n\n### 查找与当前进程通信的所有进程\n1. 找到当前进程S的进程pid\n2. 获取与S通信A的tcp端口号\n3. 通过A的tcp端口号，获得A的进程pid\n![举个栗子](技术札记/查找与当前进程通信的所有进程.jpg)\n\n### 程序执行时的系统调用\n`strace` 是 Linux 中用于监控和篡改进程与内核之间操作的工具。非常强大的工具，能够有效排查程序性能问题，异常操作以及段错误问题。\n\n### 程序内存检测\n`valgrind` [参考](https://www.jianshu.com/p/29a7a7d3d5b1)\n\n### Linux文件锁定\n在root权限下，有可能对某个文件都没有操作权限，可能是使用`chattr`对其进行锁定，可使用其进行解除。`lsattr`查看相应属性。[参考](http://c.biancheng.net/view/874.html)\n\n### Linux 内核小版本升级\n小版本，就是 `3.10.0-862`中`-`后的东西。而我们进行升级的时候，需要(centos为例，3.10.0-693升级到3.10.0-862)：\n1. 大版本相同的一个设备(3.10.0-693)\n2. 想要升级的rpm包(3.10.0-862)[官方](https://www.kernel.org/)，找不到直接Google搜吧。[这个网站很全](https://linuxsoft.cern.ch/cern/centos/7/updates/x86_64/repoview/kernel.html)\n3. `yum install kernel-3.10.0-862.9.1.el7.x86_64.rpm`\n4. grub2看看启动顺序`grub2-editenv list`以及`awk -F \\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg`\n5. reboot\n6. ~~需要源码的情况下，执行`yum install kernel-devel`会自动根据内核版本下载安装源码到`/usr/src/kernels`中(会下载最新版本的，郁闷)~~\n7. 需要内核源码的话，从网上搜索对应的源码，执行`yum install kernel-devel-xxxx.rpm`安装即可。[这个网站很全](https://linuxsoft.cern.ch/cern/centos/7/updates/x86_64/repoview/kernel-devel.html)\n\n### linux源码编译\n\n### 内核模块源码编译安装\n用户态的源码编译安装，和普通的其他软件没有什么区别，基本都是make，make install，但是你要进行内核模块的源码构建，那么有如下几种方式:\n1. 放在源码树以内(例如iptables)。假如我要自定义一个netfilter的模块，而且希望将他存放于/net/netfilter/目录下，那么要注意，在该目录下存在大量的.c源码文件。如果你的模块文件仅仅只有一两个源文件，你可以直接将其放在该目录下，如果你的模块包含的源文件比较多的话，也许你应该建立一个单独的文件夹，用于专门维护你的模块程序源文件。假如创建一个目录名为：mynetfilter/子目录。接下来需要修改/net/netfilter/目录下的Makefile文件：\n   ```\n   Obj-m += mynetfilter/\n   ```\n   这行编译指令告诉模块构建系统，在编译模块时需要进入mynetfilter/子目录。如果你的模块程序依赖于一个特殊的配置选项。比如，CONFIG_ MYNETFILTER_TEST（该选项在编译内核时，执行make menuconfig命令时用于配置该模块的编译选项），你需要修改/net/netfilter/目录下的Kconfig文件\n   ```\n   config “MYNETFILTER_TEST”\n   tristate “netfilter test module”\n   ```\n   编译内核时，执行make menucofnig之后，我们会在配置菜单上看到此选项,随之，需要修改Makefile文件，用下面的指令替换之前的`Obj-m += mynetfilter/`：\n   ```\n   Obj-$(CONFIG_MYNETFILTER_TEST)  += mynetfilter/\n   ```\n   最后，在/net/netfilter/mynetfilter/目录下添加一个Makefile文件，其中需要添加下面的指令：\n   ```\n   Obj –m  += mynetfilter.o\n   ```\n   准备就绪了，现在构建系统会进入到mynetfilter/目录下，将mynetfilter.c编译为mynetfilter.ko模块。\n   附：如果你只想编译内核中某个模块的ko，也可以cd到该目录，执行：\n   ```\n   make CONFIG_XXX=m –c  /kernel/source/location SUBDIRS=$PWD modules\n   ```\n2. 内核源码树之外构建(例如ipset)\n   如果将模块代码放在内核源码树之外单独构建的话，你只需要在你的模块目录下创建一个Makefile文件，添加一行指令：\n   ```\n   Obj-m := mynetfilter.o\n   ```\n   如果你有多个源文件只需添加另一行指令：\n   ```\n   mynetfilter-objs := mynetfiler-init.o mynetfiler-exit.o\n   ```\n   模块在内核内和内核外构建的最大的区别在于构建过程。当模块在内核源代码树之外构建时，你必须告诉make如何找到内核源代码文件和基础Makefile文件。通过下面的指令完成上述功能：\n   ```\n   make –c  /kernel/source/location SUBDIRS=$PWD modules\n   ```\n   其中，/kernel/source/location/ 即为你配置的内核源代码树的位置。SUBDIRS是你需要编译的模块位置。\n\n### Linux 内核模块加载\n[版本检查机制](https://www.ibm.com/developerworks/cn/linux/l-cn-kernelmodules/?ca=drs)\n\n### Linux路由操作\n路由：某个ip(某个范围ip)应当到哪个网关去找。网关对应下一条路由。\n**添加默认路由：**\n`route add default via 192.168.161.11 dev eth0`\n**添加一般路由：**\n`route add -net 192.168.62.11 netmask 255.255.255.0 gw 192.168.1.1`\n或\n`route add -net 192.168.62.0/24 gw 192.168.1.1`\n**删除路由：**\n`route del -net 192.168.62.11 netmask 255.255.255.0`\n或\n`route del -net 192.168.62.0/24`\n\n- `net` 表示一个ip或者网段\n- `gw` 表示网关或下一跳路由\n- `dev` 表示对应的出口网卡\n\n### mysql 性能优化\n[TinkPHP 对mysql 20条优化建议](http://blog.chinaunix.net/uid-26870656-id-4287492.html)\n\n### sudo、su和sudo -s的差别\n\n\n###  relocation error: /usr/lib64/libc.so.6: symbol _dl_starting_up, \nrelocation error: /usr/lib64/libc.so.6: symbol _dl_starting_up, version GLIBC_PRIVATE not defined in file ld-linux-x86-64.so.2 with link time reference 问题解决\n在建立一个错误的软连接到ld-linux-x86-64.so.2时，悲剧就这么发生了。此时大部分命令都不能使用，SSH当然也不能登录了。这个时候一定不要退出终端。\n\n有人说那就把软连接复原吧，可是ln也同样无法使用。。。这时候我们就可以使用可爱的sln命令就可以了，哈哈。\n\nlsn /usr/lib64/ld-2.17.so /usr/lib64/ld-linux-x86-64.so.2 \n\n### linux死亡操作\n随意动`/usr/lib64`或`/lib64`下的库，特别是`ld、libc`之类的，**覆盖、移动和删除**效果都差不多，基本就是系统爆破级别的。特别注意升级openssl，gcc都容易出现这种问题。附上linux文件目录结构（[参考](https://www.runoob.com/linux/linux-system-contents.html)）：\n![](技术札记/linux文件结构.jpg)\n\n### Gcc静/动态链接库链接顺序\n**静态库**链接时搜索路径顺序：\n1. ld会去找GCC命令中的参数-L\n2. 再找gcc的环境变量LIBRARY_PATH\n3. 再找内定目录 /lib /usr/lib /usr/local/lib 这是当初compile gcc时写在程序内的\n\n**动态库**链接时、执行时搜索路径顺序:\n1. 编译目标代码时指定的动态库搜索路径\n2. 环境变量LD_LIBRARY_PATH指定的动态库搜索路径\n3. 配置文件/etc/ld.so.conf中指定的动态库搜索路径\n4. 默认的动态库搜索路径/lib\n5. 默认的动态库搜索路径/usr/lib\n\n链接时相互依赖顺序是从右到左，越是底层，越靠后写。例如：\n```\ng++ ...  obj($?) -l(上层逻辑lib) -l(中间封装lib) -l(基础lib) -l(系统lib)  -o $@\n```\n\n有关环境变量：\nLIBRARY_PATH环境变量：指定程序静态链接库文件搜索路径\nLD_LIBRARY_PATH环境变量：指定程序动态链接库文件搜索路径\n\n对于排查链接问题方法：\n`ldd <your_lib>`：查看可执行程序或者动态库运行时的链接库\n`readelf -d <your_lib>`：和ldd类似，不用运行程序，查看可执行程序或动态库[ELF](https://en.wikipedia.org/wiki/Executable_and_Linkable_Format)\n`LD_DEBUG=libs ./<your_exe>`：查看程序执行时的动态库调度过程。\n`ldconfig`：它会遍历默认所有共享库目录，比如/lib，/usr/lib等，然后更新所有的软链接，使她们指向最新共享库。\n\n指定动态库版本或路径：\n`-Wl,-rpath,<your_lib_path>`: 指定程序运行时动态库链接路径。\n将`-lxxx`直接修改为`/you/path/libxxx`，可以指定动态库的绝对路径。\n\n\n参考：\n[wiki rpath](https://en.wikipedia.org/wiki/Rpath)\n[rpath vs runpath](https://medium.com/nataraj-raghavendra/rpath-vs-runpath-883029b17c45) 附加了许多动态库加载的示例。\n[静态链接与动态链接库的查找顺序](https://www.cnblogs.com/GnibChen/p/8649476.html)\n[gcc 链接库的顺序问题](https://blog.csdn.net/ssmale/article/details/17225345)\n[gcc/ld: what is to -Wl,-rpath in dynamic linking what -l is to -L in static linking?](https://stackoverflow.com/questions/33373851/gcc-ld-what-is-to-wl-rpath-in-dynamic-linking-what-l-is-to-l-in-static-link/33378137)\n[Why LD_LIBRARY_PATH is BAD and the correct way to load dynamic libraries](https://stackoverflow.com/questions/25918462/why-ld-library-path-is-bad-and-the-correct-way-to-load-dynamic-libraries)\n\n### 有关linux下的目录\n[上述](#linux死亡操作)有相关的linux目录结构，这里说明一下`/tmp`目录，在linux系统中，`/tmp`目录在一定周期或者重启等都有可能删除相应部分符合条件的文件。而删除方法是通过执行定时任务`/etc/cron.daily/tmpwatch`，此定时任务在系统最小安装的情况下，需要手动安装。\n\n### 关于系统监控\n相对大型系统，都需要进行系统监控。特别针对于微服务系统架构。个人理解需要从三个方面进行监控：\n1. 业务逻辑层，负责统计业务访问状态，访问结果，异常等(常用方式log输出。比如syslog)——通常管理员用户都关注\n2. 分布式链路追踪，又称为APM。用于追踪一个业务从开始到结束中间每个阶段的执行情况，用于多组件排错非常方便。(opentracing, Zipkin and Jaeger)——通常管理员关注\n3. 系统整体运行状态，关注系统整体内存，网络，cpu等使用情况。（Prometheus）——管理员关注\n\n### 关于软件项目方案评估\n1. 易用性 \n2. 可用性\n3. 性能\n4. 安全性\n5. 可维护性(日志，监控系统)\n6. 可扩展性","slug":"技术札记","published":1,"updated":"2021-01-19T07:19:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0int4001jh9uoki803htk","content":"<p>谁知道这里面有多少小技巧，没准哪个能帮上你呢？(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n\n\n<h3 id=\"ssh免密登录\"><a href=\"#ssh免密登录\" class=\"headerlink\" title=\"ssh免密登录\"></a>ssh免密登录</h3><p><strong>原理：</strong><br><img src=\"/2020/09/14/技术札记/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E5%8E%9F%E7%90%86.png\" alt=\"ssh免密登录原理\"><br><strong>实际配置：</strong>  </p>\n<ol>\n<li><p>生成秘钥对：<br>本地主机：</p>\n   <figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>拷贝公钥到远程主机：</p>\n<ol>\n<li><p>简单方法，在本地主机执行：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id remote_username@server_ip_address -p port</span><br></pre></td></tr></tbody></table></figure>\n\n<p><em>不加<code>-p</code>默认22端口</em><br>然后输入密码即可</p>\n</li>\n<li><p>先登录远程主机：</p>\n<ol>\n<li><p>获取本地主机的公钥，追加到<code>authorized_keys</code>：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>修改权限：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 600 authorized_keys</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>重启服务(不一定需要)：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></tbody></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>配置ssh名称(可选)<br>为了方便记住输入远程主机设备，可给远程主机配置名称。</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vi ~/.ssh/config</span><br><span class=\"line\">Host remote</span><br><span class=\"line\">User root</span><br><span class=\"line\">Hostname 192.168.0.1</span><br><span class=\"line\">Port 22</span><br><span class=\"line\"># ssh remote</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<p><strong>测试：</strong><br>本地主机登录远程主机：</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh remote@&lt;ip&gt;</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">ssh <span class=\"comment\">#免密</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>配置ssh禁用密码登录：</strong><br>增加安全性，避免别人尝试非法登录。</p>\n<ol>\n<li><p>完成上述的免密登录，服务端获得一个公钥，本机获得一个私钥</p>\n</li>\n<li><p>将私钥保存，供其他设备使用</p>\n</li>\n<li><p>设置服务端配置文件<code>/etc/ssh/sshd_config</code>，关闭密码登录：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#禁用密码验证</span><br><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\">#启用密钥验证，下面两个默认都是开启的</span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>重启sshd服务：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h3 id=\"VSCODE\"><a href=\"#VSCODE\" class=\"headerlink\" title=\"VSCODE\"></a>VSCODE</h3><p>插件列表：  </p>\n<ol>\n<li>Remote-SSH：远程ssh登录，linux版本太低不支持</li>\n<li>sftp：远程文件同步</li>\n<li>vscode-icons：文件图标显示</li>\n<li>markdown all in one：Markdown插件</li>\n<li>markdown preview  Enhanced：Markdown预览<br> cmd：Markdown Preview Enhanced: Customize Css<br> background-color: rgb(157, 189, 189);<br> font-family: -apple-system, BlinkMacSystemFont, “Segoe UI”, Helvetica, Arial, sans-serif, “Apple Color Emoji”, “Segoe UI Emoji”, “Segoe UI Symbol”, “微软雅黑”;</li>\n<li>tabNine：机器学习补全(可能导致和语言补全冲突)</li>\n<li>go 补全插件，建议使用gopl，之前补全太慢，<a href=\"https://blog.csdn.net/zhetmdoubeizhanyong/article/details/102534172\" target=\"_blank\" rel=\"noopener\">解决</a></li>\n<li>koroFileHeader：用于生成标准格式函数头说明，或者代码文件头说明</li>\n<li>bookmarks：给代码打标签</li>\n<li>Draw.io integration：drawio的绘图插件</li>\n</ol>\n<h3 id=\"C-段错误处理-Linux\"><a href=\"#C-段错误处理-Linux\" class=\"headerlink\" title=\"C 段错误处理(Linux)\"></a>C 段错误处理(Linux)</h3><ol>\n<li>必须先得到段错误的地址，可以用gdb的bt或者在程序中捕捉段错误堆栈。<code>SIGSEGV, SIGABRT</code></li>\n<li>在可以编译的机器上源码编译，带上行号和函数名，使用<code>addr2line -f -e &lt;file&gt; &lt;addr&gt;</code>来映射到具体的函数位置。</li>\n<li><code>objdump -D &lt;file&gt; | grep -A 50 -B 50 &lt;addr&gt;</code> 也能查到对应汇编代码，从而定位函数。</li>\n</ol>\n<h3 id=\"进程运行状态查看\"><a href=\"#进程运行状态查看\" class=\"headerlink\" title=\"进程运行状态查看\"></a>进程运行状态查看</h3><p><code>pstack &lt;pid&gt; </code>查看当前运行程序的运行状态，非常方便排查阻塞和死锁问题。<br><code>ps aux --sort -rss</code> 按照内存占用排序，排查进程内存泄漏。<br><code>ps v &lt;pid&gt;</code>查看某个进程具体的信息，类似top列出的进程信息。</p>\n<h3 id=\"断言assert\"><a href=\"#断言assert\" class=\"headerlink\" title=\"断言assert\"></a>断言assert</h3><p>处理程序中不应该发生的错误，常用在参数检查。<br><a href=\"http://c.biancheng.net/c/assert/\" target=\"_blank\" rel=\"noopener\">参考1</a>, <a href=\"https://www.runoob.com/w3cnote/c-assert.html\" target=\"_blank\" rel=\"noopener\">参考2</a></p>\n<h3 id=\"ipset源码技巧\"><a href=\"#ipset源码技巧\" class=\"headerlink\" title=\"ipset源码技巧\"></a>ipset源码技巧</h3><p>ipset源码分析</p>\n<ol>\n<li><p>这里有个很牛皮的操作，在c里面实现的模块化加载。具体操作如下：<br>如果我想在ipset中支持一种新的添加规则，比如hash:ip，那么，我需要改多少源码？</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 按照格式写好ipset_hash_ip.c里面包含了hash:ip的传输规则和初始化方法。</span><br><span class=\"line\">2. 重新执行configure，加入这个规则（这里具体实现我没有确认，但猜测如此）</span><br><span class=\"line\">3. 执行make</span><br></pre></td></tr></tbody></table></figure>\n\n<p>那么其具体实现方法如何？</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 首先在configure中会根据你配置的支持规则模块生成makefile，makefile中就会包含编译这个模块的源文件。</span><br><span class=\"line\">2. make时会根据配置产生的源文件列表，生成一个type_init.c文件，里面包含了所有规则模块的初始化。</span><br><span class=\"line\">3. 主函数会调用type_init.c源文件，将初始化好的规则加载到一个全局链表中，在规则匹配的时候进行匹配。</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这种方法就实现了模块化的添加和删除规则模块的方法。这种模块化的思想，在其他语言里并不少见，但是在c语言里面实现的，还是少见(菜鸡的我反正第一次见)</p>\n</li>\n<li><p>提供了接口，自定义输出函数和日志输出文件。</p>\n</li>\n<li><p>X Macros宏使用，类似定义一个map，但是比map功能更丰富。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt; </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Defines four variables. </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VARIABLES \\ </span></span><br><span class=\"line\">   X(value1, <span class=\"number\">1</span>) \\ </span><br><span class=\"line\">   X(value2, <span class=\"number\">2</span>) \\ </span><br><span class=\"line\">   X(value3, <span class=\"number\">3</span>) \\ </span><br><span class=\"line\">   X(value4, <span class=\"number\">4</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// driver program. </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>{ </span><br><span class=\"line\">   <span class=\"comment\">// Declaration of every variable </span></span><br><span class=\"line\">   <span class=\"comment\">// is done through macro. </span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> X(value, a) char value[10]; </span></span><br><span class=\"line\">      VARIABLES </span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">undef</span> X </span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// String values are accepted </span></span><br><span class=\"line\">   <span class=\"comment\">// for all variables. </span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> X(value, a) scanf(<span class=\"meta-string\">\"\\n%s\"</span>, value); </span></span><br><span class=\"line\">      VARIABLES </span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">undef</span> X </span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// Values are printed. </span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> X(value, a) printf(<span class=\"meta-string\">\"%d) %s\\n\"</span>, a, value); </span></span><br><span class=\"line\">      VARIABLES </span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">undef</span> X </span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>实际上预编译后的代码：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt; </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>{ </span><br><span class=\"line\">   <span class=\"keyword\">char</span> value1[<span class=\"number\">10</span>]; </span><br><span class=\"line\">   <span class=\"keyword\">char</span> value2[<span class=\"number\">10</span>]; </span><br><span class=\"line\">   <span class=\"keyword\">char</span> value3[<span class=\"number\">10</span>]; </span><br><span class=\"line\">   <span class=\"keyword\">char</span> value4[<span class=\"number\">10</span>]; </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">scanf</span>(<span class=\"string\">\"\\n%s\"</span>, value1); </span><br><span class=\"line\">   <span class=\"built_in\">scanf</span>(<span class=\"string\">\"\\n%s\"</span>, value2); </span><br><span class=\"line\">   <span class=\"built_in\">scanf</span>(<span class=\"string\">\"\\n%s\"</span>, value3); </span><br><span class=\"line\">   <span class=\"built_in\">scanf</span>(<span class=\"string\">\"\\n%s\"</span>, value4); </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d) %s\\n\"</span>, <span class=\"number\">1</span>, value1); </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d) %s\\n\"</span>, <span class=\"number\">2</span>, value2); </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d) %s\\n\"</span>, <span class=\"number\">3</span>, value3); </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d) %s\\n\"</span>, <span class=\"number\">4</span>, value4); </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>示例2：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt; </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Defining a macro </span></span><br><span class=\"line\"><span class=\"comment\">// with the values of colors. </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> COLORS \\ </span></span><br><span class=\"line\">   X(RED)\t \\ </span><br><span class=\"line\">   X(BLACK) \\ </span><br><span class=\"line\">   X(WHITE) \\ </span><br><span class=\"line\">   X(BLUE) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Creating an enum of colors </span></span><br><span class=\"line\"><span class=\"comment\">// by macro expansion. </span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> colors { </span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> X(value) value, </span></span><br><span class=\"line\">      COLORS </span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">undef</span> X </span></span><br><span class=\"line\">}; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A utility that takes the enum value </span></span><br><span class=\"line\"><span class=\"comment\">// and returns corresponding string value </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">toString</span><span class=\"params\">(<span class=\"keyword\">enum</span> colors value)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>{ </span><br><span class=\"line\">   <span class=\"keyword\">switch</span> (value) { </span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"meta-keyword\">define</span> X(color) \\ </span></span><br><span class=\"line\">         <span class=\"keyword\">case</span> color: \\ </span><br><span class=\"line\">            <span class=\"keyword\">return</span> #color; </span><br><span class=\"line\">            COLORS </span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"meta-keyword\">undef</span> X </span></span><br><span class=\"line\">   } </span><br><span class=\"line\">} </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// driver program. </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>{ </span><br><span class=\"line\">   <span class=\"keyword\">enum</span> colors color = WHITE; </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, toString(color)); </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>实际上预编译后的代码：</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt; </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Creating an enum of colors. </span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> colors { </span><br><span class=\"line\">   RED, </span><br><span class=\"line\">   BLACK, </span><br><span class=\"line\">   WHITE, </span><br><span class=\"line\">   BLUE </span><br><span class=\"line\">}; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*A utility that takes the enum value and returns </span></span><br><span class=\"line\"><span class=\"comment\">corresponding string value*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">toString</span><span class=\"params\">(<span class=\"keyword\">enum</span> colors value)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>{ </span><br><span class=\"line\">   <span class=\"keyword\">switch</span> (value) { </span><br><span class=\"line\">   <span class=\"keyword\">case</span> RED: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"RED\"</span>; </span><br><span class=\"line\">   <span class=\"keyword\">case</span> BLACK: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"BLACK\"</span>; </span><br><span class=\"line\">   <span class=\"keyword\">case</span> WHITE: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"WHITE\"</span>; </span><br><span class=\"line\">   <span class=\"keyword\">case</span> BLUE: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"BLUE\"</span>; </span><br><span class=\"line\">   } </span><br><span class=\"line\">} </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// driver program. </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>{ </span><br><span class=\"line\">   <span class=\"keyword\">enum</span> colors color = WHITE; </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, toString(color)); </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>X macros 主要适用于多中类型有相同的处理逻辑。简单的类似enum中int到string的映射，复杂的到ipset的多种类型处理。</p>\n</li>\n<li><p>gcc 编译debug模式或者自定义模式。<code>-Dxxx</code>。示例：<br>test.c:</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int agv, char *agrs[]){</span><br><span class=\"line\">#ifdef TEST</span><br><span class=\"line\">   printf(\"ENABLE TEST\\n\");</span><br><span class=\"line\">#endif</span><br><span class=\"line\">   printf(\"test over\\n\");</span><br><span class=\"line\">   return 0;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>执行TEST：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc test.c -DTEST -o test</span><br><span class=\"line\">$ ./test</span><br><span class=\"line\">ENABLE TEST</span><br><span class=\"line\">test over</span><br><span class=\"line\">$ gcc test.c -o test</span><br><span class=\"line\">$ ./test</span><br><span class=\"line\">test over</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这种方式在做C的模块编译，以及Debug编译特别有效。DEBUG适合开源代码，不适合现场代码排查。<br><a href=\"https://colobu.com/2018/08/28/15-Most-Frequently-Used-GCC-Compiler-Command-Line-Options/#%E4%BD%BF%E7%94%A8-V%E6%89%93%E5%8D%B0%E6%89%80%E6%9C%89%E7%9A%84%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4\" target=\"_blank\" rel=\"noopener\">15个最常用的GCC编译器参数</a></p>\n</li>\n<li><p>源码编译的时候，缺少依赖库。</p>\n<ul>\n<li>一般的解决方法，都是直接用yum install libxxx-devel.x86_64，再次进行configure。</li>\n<li>如果还不成功，就检查你的<code>PKG_CONFIG_PATH</code>变量是否存在，不存在添加对应的环境变量(默认一般在<code>/usr/lib64/pkgconfig/</code>)。</li>\n<li>如果还不行，就执行<code>/usr/bin/pkg-config --exists --print-errors \"libxxx &gt;= x.x.xx\"</code>(通常这个命令可以在configure文件中找到)，然后再根据问题来排查。</li>\n<li>最后的方法，就是用<code>./configure --help</code>来找到对应的库的环境变量名称，修改对应的<code>libxxx_LIBS</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"一些工具\"><a href=\"#一些工具\" class=\"headerlink\" title=\"一些工具\"></a>一些工具</h3><p><a href=\"https://golang.hotexamples.com/\" target=\"_blank\" rel=\"noopener\">查找各种代码的使用范例</a></p>\n<h3 id=\"go好用的开源组件\"><a href=\"#go好用的开源组件\" class=\"headerlink\" title=\"go好用的开源组件\"></a>go好用的开源组件</h3><p>配置文件读写：</p>\n<ul>\n<li>github.com/spf13/viper</li>\n</ul>\n<p>日志：</p>\n<ul>\n<li>go.uber.org/zap</li>\n</ul>\n<p>web服务：</p>\n<ul>\n<li>github.com/gin-gonic/gin</li>\n</ul>\n<p>go编写命令：</p>\n<ul>\n<li>github.com/urfave/cli/v2</li>\n</ul>\n<p>restful 文档生成：</p>\n<ul>\n<li><a href=\"https://github.com/swaggo/gin-swagger\" target=\"_blank\" rel=\"noopener\">https://github.com/swaggo/gin-swagger</a> <ul>\n<li><a href=\"https://awesomeopensource.com/project/swaggo/swag\" target=\"_blank\" rel=\"noopener\">全教程</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/40304004\" target=\"_blank\" rel=\"noopener\">教程</a></li>\n<li><a href=\"https://juejin.im/post/5d3f92356fb9a06b317b3baf\" target=\"_blank\" rel=\"noopener\">教程</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Go技巧\"><a href=\"#Go技巧\" class=\"headerlink\" title=\"Go技巧\"></a>Go技巧</h3><ol>\n<li>测试<ol>\n<li>单元测试<br>就是常用的以<code>_test.go</code>结尾的文件，函数名<code>Testxx</code>来构成的单元测试。如果你想将单元测试编译出来，可以使用<code>-c</code>参数，执行测试程序的时候，使用<code>-test.xxx</code>来执行test相关命令。例如：<code>go test -run xxx</code>=<code>./a -test.run xxx</code></li>\n<li>性能测试<br>同样在<code>_test.go</code>结尾的文件中，以<code>Benchmark</code>为开头的性能测试，具体用法可以<a href=\"https://my.oschina.net/solate/blog/3034188\" target=\"_blank\" rel=\"noopener\">参考</a>, 生成性能图和火焰图更有利于分析。<a href=\"https://zhuanlan.zhihu.com/p/80578541\" target=\"_blank\" rel=\"noopener\">另外的参考</a></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"xrags\"><a href=\"#xrags\" class=\"headerlink\" title=\"xrags\"></a>xrags</h3><p>常见的用法：</p>\n<ol>\n<li><code>ls | xargs echo</code> 相当于<code>echo a b c</code></li>\n<li> <code>ls | xargs -i echo {}</code> 相当于 <code>echo a; echo b; echo c</code>，<code>-i</code>同<code>-I '{}'</code>，其含义是将<code>{}</code>内的内容替换成前面输出的内容，并且循环执行。</li>\n<li> <code>-t</code>参数可以查看你xargs执行的命令。</li>\n</ol>\n<p><strong>注意：</strong> 如果在xargs后的命令参数中，路径参数有空格的或tab的，会导致路径无法识别。比如<code>echo \"/home/jihan \" | xargs -i ls {}</code>就会报错，虽然实际命令<code>ls /home/jihan&lt;空格&gt;</code>没有问题，但是用xargs+i的形式就有问题。</p>\n<h3 id=\"shell调试\"><a href=\"#shell调试\" class=\"headerlink\" title=\"shell调试\"></a>shell调试</h3><ol>\n<li>-n 命令，显示shell，不执行，通常用于语法检查。</li>\n<li>-x 命令，我经常用，在执行过程中打印shell脚本执行的真实命令。-v是打印原始命令，不做替换。</li>\n<li>bashdb，类似gdb做调试用，命令：<code>bashdb --debug your.sh</code>，一下是常用参数：<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一、列出代码和查询代码类：</span><br><span class=\"line\">l  列出当前行以下的10行</span><br><span class=\"line\">-  列出正在执行的代码行的前面10行</span><br><span class=\"line\">.  回到正在执行的代码行</span><br><span class=\"line\">/pat/ 向后搜索pat</span><br><span class=\"line\">？pat？向前搜索pat</span><br><span class=\"line\">二、Debug控制类：</span><br><span class=\"line\">h     帮助</span><br><span class=\"line\">help  命令 得到命令的具体信息</span><br><span class=\"line\">q     退出bashdb</span><br><span class=\"line\">x     算数表达式 计算算数表达式的值，并显示出来</span><br><span class=\"line\">!!    空格Shell命令 参数 执行shell命令</span><br><span class=\"line\">使用bashdb进行debug的常用命令(cont.)</span><br><span class=\"line\">三、控制脚本执行类：</span><br><span class=\"line\">n   执行下一条语句，遇到函数，不进入函数里面执行，将函数当作黑盒</span><br><span class=\"line\">s n 单步执行n次，遇到函数进入函数里面</span><br><span class=\"line\">b   行号n 在行号n处设置断点</span><br><span class=\"line\">del 行号n 撤销行号n处的断点</span><br><span class=\"line\">c   行号n 一直执行到行号n处</span><br><span class=\"line\">R   重新启动当前调试脚本</span><br><span class=\"line\">Finish 执行到程序最后</span><br><span class=\"line\">cond n expr 条件断点</span><br></pre></td></tr></tbody></table></figure>\n\n</li>\n</ol>\n<h3 id=\"查找与当前进程通信的所有进程\"><a href=\"#查找与当前进程通信的所有进程\" class=\"headerlink\" title=\"查找与当前进程通信的所有进程\"></a>查找与当前进程通信的所有进程</h3><ol>\n<li>找到当前进程S的进程pid</li>\n<li>获取与S通信A的tcp端口号</li>\n<li>通过A的tcp端口号，获得A的进程pid<br><img src=\"/2020/09/14/技术札记/%E6%9F%A5%E6%89%BE%E4%B8%8E%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9A%84%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B.jpg\" alt=\"举个栗子\"></li>\n</ol>\n<h3 id=\"程序执行时的系统调用\"><a href=\"#程序执行时的系统调用\" class=\"headerlink\" title=\"程序执行时的系统调用\"></a>程序执行时的系统调用</h3><p><code>strace</code> 是 Linux 中用于监控和篡改进程与内核之间操作的工具。非常强大的工具，能够有效排查程序性能问题，异常操作以及段错误问题。</p>\n<h3 id=\"程序内存检测\"><a href=\"#程序内存检测\" class=\"headerlink\" title=\"程序内存检测\"></a>程序内存检测</h3><p><code>valgrind</code> <a href=\"https://www.jianshu.com/p/29a7a7d3d5b1\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h3 id=\"Linux文件锁定\"><a href=\"#Linux文件锁定\" class=\"headerlink\" title=\"Linux文件锁定\"></a>Linux文件锁定</h3><p>在root权限下，有可能对某个文件都没有操作权限，可能是使用<code>chattr</code>对其进行锁定，可使用其进行解除。<code>lsattr</code>查看相应属性。<a href=\"http://c.biancheng.net/view/874.html\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h3 id=\"Linux-内核小版本升级\"><a href=\"#Linux-内核小版本升级\" class=\"headerlink\" title=\"Linux 内核小版本升级\"></a>Linux 内核小版本升级</h3><p>小版本，就是 <code>3.10.0-862</code>中<code>-</code>后的东西。而我们进行升级的时候，需要(centos为例，3.10.0-693升级到3.10.0-862)：</p>\n<ol>\n<li>大版本相同的一个设备(3.10.0-693)</li>\n<li>想要升级的rpm包(3.10.0-862)<a href=\"https://www.kernel.org/\" target=\"_blank\" rel=\"noopener\">官方</a>，找不到直接Google搜吧。<a href=\"https://linuxsoft.cern.ch/cern/centos/7/updates/x86_64/repoview/kernel.html\" target=\"_blank\" rel=\"noopener\">这个网站很全</a></li>\n<li><code>yum install kernel-3.10.0-862.9.1.el7.x86_64.rpm</code></li>\n<li>grub2看看启动顺序<code>grub2-editenv list</code>以及<code>awk -F \\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg</code></li>\n<li>reboot</li>\n<li><del>需要源码的情况下，执行<code>yum install kernel-devel</code>会自动根据内核版本下载安装源码到<code>/usr/src/kernels</code>中(会下载最新版本的，郁闷)</del></li>\n<li>需要内核源码的话，从网上搜索对应的源码，执行<code>yum install kernel-devel-xxxx.rpm</code>安装即可。<a href=\"https://linuxsoft.cern.ch/cern/centos/7/updates/x86_64/repoview/kernel-devel.html\" target=\"_blank\" rel=\"noopener\">这个网站很全</a></li>\n</ol>\n<h3 id=\"linux源码编译\"><a href=\"#linux源码编译\" class=\"headerlink\" title=\"linux源码编译\"></a>linux源码编译</h3><h3 id=\"内核模块源码编译安装\"><a href=\"#内核模块源码编译安装\" class=\"headerlink\" title=\"内核模块源码编译安装\"></a>内核模块源码编译安装</h3><p>用户态的源码编译安装，和普通的其他软件没有什么区别，基本都是make，make install，但是你要进行内核模块的源码构建，那么有如下几种方式:</p>\n<ol>\n<li><p>放在源码树以内(例如iptables)。假如我要自定义一个netfilter的模块，而且希望将他存放于/net/netfilter/目录下，那么要注意，在该目录下存在大量的.c源码文件。如果你的模块文件仅仅只有一两个源文件，你可以直接将其放在该目录下，如果你的模块包含的源文件比较多的话，也许你应该建立一个单独的文件夹，用于专门维护你的模块程序源文件。假如创建一个目录名为：mynetfilter/子目录。接下来需要修改/net/netfilter/目录下的Makefile文件：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj-m += mynetfilter/</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这行编译指令告诉模块构建系统，在编译模块时需要进入mynetfilter/子目录。如果你的模块程序依赖于一个特殊的配置选项。比如，CONFIG_ MYNETFILTER_TEST（该选项在编译内核时，执行make menuconfig命令时用于配置该模块的编译选项），你需要修改/net/netfilter/目录下的Kconfig文件</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config “MYNETFILTER_TEST”</span><br><span class=\"line\">tristate “netfilter test module”</span><br></pre></td></tr></tbody></table></figure>\n\n<p>编译内核时，执行make menucofnig之后，我们会在配置菜单上看到此选项,随之，需要修改Makefile文件，用下面的指令替换之前的<code>Obj-m += mynetfilter/</code>：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj-$(CONFIG_MYNETFILTER_TEST)  += mynetfilter/</span><br></pre></td></tr></tbody></table></figure>\n\n<p>最后，在/net/netfilter/mynetfilter/目录下添加一个Makefile文件，其中需要添加下面的指令：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj –m  += mynetfilter.o</span><br></pre></td></tr></tbody></table></figure>\n\n<p>准备就绪了，现在构建系统会进入到mynetfilter/目录下，将mynetfilter.c编译为mynetfilter.ko模块。<br>附：如果你只想编译内核中某个模块的ko，也可以cd到该目录，执行：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make CONFIG_XXX=m –c  /kernel/source/location SUBDIRS=$PWD modules</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>内核源码树之外构建(例如ipset)<br>如果将模块代码放在内核源码树之外单独构建的话，你只需要在你的模块目录下创建一个Makefile文件，添加一行指令：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj-m := mynetfilter.o</span><br></pre></td></tr></tbody></table></figure>\n\n<p>如果你有多个源文件只需添加另一行指令：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mynetfilter-objs := mynetfiler-init.o mynetfiler-exit.o</span><br></pre></td></tr></tbody></table></figure>\n\n<p>模块在内核内和内核外构建的最大的区别在于构建过程。当模块在内核源代码树之外构建时，你必须告诉make如何找到内核源代码文件和基础Makefile文件。通过下面的指令完成上述功能：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make –c  /kernel/source/location SUBDIRS=$PWD modules</span><br></pre></td></tr></tbody></table></figure>\n\n<p>其中，/kernel/source/location/ 即为你配置的内核源代码树的位置。SUBDIRS是你需要编译的模块位置。</p>\n</li>\n</ol>\n<h3 id=\"Linux-内核模块加载\"><a href=\"#Linux-内核模块加载\" class=\"headerlink\" title=\"Linux 内核模块加载\"></a>Linux 内核模块加载</h3><p><a href=\"https://www.ibm.com/developerworks/cn/linux/l-cn-kernelmodules/?ca=drs\" target=\"_blank\" rel=\"noopener\">版本检查机制</a></p>\n<h3 id=\"Linux路由操作\"><a href=\"#Linux路由操作\" class=\"headerlink\" title=\"Linux路由操作\"></a>Linux路由操作</h3><p>路由：某个ip(某个范围ip)应当到哪个网关去找。网关对应下一条路由。<br><strong>添加默认路由：</strong><br><code>route add default via 192.168.161.11 dev eth0</code><br><strong>添加一般路由：</strong><br><code>route add -net 192.168.62.11 netmask 255.255.255.0 gw 192.168.1.1</code><br>或<br><code>route add -net 192.168.62.0/24 gw 192.168.1.1</code><br><strong>删除路由：</strong><br><code>route del -net 192.168.62.11 netmask 255.255.255.0</code><br>或<br><code>route del -net 192.168.62.0/24</code></p>\n<ul>\n<li><code>net</code> 表示一个ip或者网段</li>\n<li><code>gw</code> 表示网关或下一跳路由</li>\n<li><code>dev</code> 表示对应的出口网卡</li>\n</ul>\n<h3 id=\"mysql-性能优化\"><a href=\"#mysql-性能优化\" class=\"headerlink\" title=\"mysql 性能优化\"></a>mysql 性能优化</h3><p><a href=\"http://blog.chinaunix.net/uid-26870656-id-4287492.html\" target=\"_blank\" rel=\"noopener\">TinkPHP 对mysql 20条优化建议</a></p>\n<h3 id=\"sudo、su和sudo-s的差别\"><a href=\"#sudo、su和sudo-s的差别\" class=\"headerlink\" title=\"sudo、su和sudo -s的差别\"></a>sudo、su和sudo -s的差别</h3><h3 id=\"relocation-error-usr-lib64-libc-so-6-symbol-dl-starting-up\"><a href=\"#relocation-error-usr-lib64-libc-so-6-symbol-dl-starting-up\" class=\"headerlink\" title=\"relocation error: /usr/lib64/libc.so.6: symbol _dl_starting_up,\"></a>relocation error: /usr/lib64/libc.so.6: symbol _dl_starting_up,</h3><p>relocation error: /usr/lib64/libc.so.6: symbol _dl_starting_up, version GLIBC_PRIVATE not defined in file ld-linux-x86-64.so.2 with link time reference 问题解决<br>在建立一个错误的软连接到ld-linux-x86-64.so.2时，悲剧就这么发生了。此时大部分命令都不能使用，SSH当然也不能登录了。这个时候一定不要退出终端。</p>\n<p>有人说那就把软连接复原吧，可是ln也同样无法使用。。。这时候我们就可以使用可爱的sln命令就可以了，哈哈。</p>\n<p>lsn /usr/lib64/ld-2.17.so /usr/lib64/ld-linux-x86-64.so.2 </p>\n<h3 id=\"linux死亡操作\"><a href=\"#linux死亡操作\" class=\"headerlink\" title=\"linux死亡操作\"></a>linux死亡操作</h3><p>随意动<code>/usr/lib64</code>或<code>/lib64</code>下的库，特别是<code>ld、libc</code>之类的，<strong>覆盖、移动和删除</strong>效果都差不多，基本就是系统爆破级别的。特别注意升级openssl，gcc都容易出现这种问题。附上linux文件目录结构（<a href=\"https://www.runoob.com/linux/linux-system-contents.html\" target=\"_blank\" rel=\"noopener\">参考</a>）：<br><img src=\"/2020/09/14/技术札记/linux%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.jpg\"></p>\n<h3 id=\"Gcc静-动态链接库链接顺序\"><a href=\"#Gcc静-动态链接库链接顺序\" class=\"headerlink\" title=\"Gcc静/动态链接库链接顺序\"></a>Gcc静/动态链接库链接顺序</h3><p><strong>静态库</strong>链接时搜索路径顺序：</p>\n<ol>\n<li>ld会去找GCC命令中的参数-L</li>\n<li>再找gcc的环境变量LIBRARY_PATH</li>\n<li>再找内定目录 /lib /usr/lib /usr/local/lib 这是当初compile gcc时写在程序内的</li>\n</ol>\n<p><strong>动态库</strong>链接时、执行时搜索路径顺序:</p>\n<ol>\n<li>编译目标代码时指定的动态库搜索路径</li>\n<li>环境变量LD_LIBRARY_PATH指定的动态库搜索路径</li>\n<li>配置文件/etc/ld.so.conf中指定的动态库搜索路径</li>\n<li>默认的动态库搜索路径/lib</li>\n<li>默认的动态库搜索路径/usr/lib</li>\n</ol>\n<p>链接时相互依赖顺序是从右到左，越是底层，越靠后写。例如：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ ...  obj($?) -l(上层逻辑lib) -l(中间封装lib) -l(基础lib) -l(系统lib)  -o $@</span><br></pre></td></tr></tbody></table></figure>\n\n<p>有关环境变量：<br>LIBRARY_PATH环境变量：指定程序静态链接库文件搜索路径<br>LD_LIBRARY_PATH环境变量：指定程序动态链接库文件搜索路径</p>\n<p>对于排查链接问题方法：<br><code>ldd &lt;your_lib&gt;</code>：查看可执行程序或者动态库运行时的链接库<br><code>readelf -d &lt;your_lib&gt;</code>：和ldd类似，不用运行程序，查看可执行程序或动态库<a href=\"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format\" target=\"_blank\" rel=\"noopener\">ELF</a><br><code>LD_DEBUG=libs ./&lt;your_exe&gt;</code>：查看程序执行时的动态库调度过程。<br><code>ldconfig</code>：它会遍历默认所有共享库目录，比如/lib，/usr/lib等，然后更新所有的软链接，使她们指向最新共享库。</p>\n<p>指定动态库版本或路径：<br><code>-Wl,-rpath,&lt;your_lib_path&gt;</code>: 指定程序运行时动态库链接路径。<br>将<code>-lxxx</code>直接修改为<code>/you/path/libxxx</code>，可以指定动态库的绝对路径。</p>\n<p>参考：<br><a href=\"https://en.wikipedia.org/wiki/Rpath\" target=\"_blank\" rel=\"noopener\">wiki rpath</a><br><a href=\"https://medium.com/nataraj-raghavendra/rpath-vs-runpath-883029b17c45\" target=\"_blank\" rel=\"noopener\">rpath vs runpath</a> 附加了许多动态库加载的示例。<br><a href=\"https://www.cnblogs.com/GnibChen/p/8649476.html\" target=\"_blank\" rel=\"noopener\">静态链接与动态链接库的查找顺序</a><br><a href=\"https://blog.csdn.net/ssmale/article/details/17225345\" target=\"_blank\" rel=\"noopener\">gcc 链接库的顺序问题</a><br><a href=\"https://stackoverflow.com/questions/33373851/gcc-ld-what-is-to-wl-rpath-in-dynamic-linking-what-l-is-to-l-in-static-link/33378137\" target=\"_blank\" rel=\"noopener\">gcc/ld: what is to -Wl,-rpath in dynamic linking what -l is to -L in static linking?</a><br><a href=\"https://stackoverflow.com/questions/25918462/why-ld-library-path-is-bad-and-the-correct-way-to-load-dynamic-libraries\" target=\"_blank\" rel=\"noopener\">Why LD_LIBRARY_PATH is BAD and the correct way to load dynamic libraries</a></p>\n<h3 id=\"有关linux下的目录\"><a href=\"#有关linux下的目录\" class=\"headerlink\" title=\"有关linux下的目录\"></a>有关linux下的目录</h3><p><a href=\"#linux%E6%AD%BB%E4%BA%A1%E6%93%8D%E4%BD%9C\">上述</a>有相关的linux目录结构，这里说明一下<code>/tmp</code>目录，在linux系统中，<code>/tmp</code>目录在一定周期或者重启等都有可能删除相应部分符合条件的文件。而删除方法是通过执行定时任务<code>/etc/cron.daily/tmpwatch</code>，此定时任务在系统最小安装的情况下，需要手动安装。</p>\n<h3 id=\"关于系统监控\"><a href=\"#关于系统监控\" class=\"headerlink\" title=\"关于系统监控\"></a>关于系统监控</h3><p>相对大型系统，都需要进行系统监控。特别针对于微服务系统架构。个人理解需要从三个方面进行监控：</p>\n<ol>\n<li>业务逻辑层，负责统计业务访问状态，访问结果，异常等(常用方式log输出。比如syslog)——通常管理员用户都关注</li>\n<li>分布式链路追踪，又称为APM。用于追踪一个业务从开始到结束中间每个阶段的执行情况，用于多组件排错非常方便。(opentracing, Zipkin and Jaeger)——通常管理员关注</li>\n<li>系统整体运行状态，关注系统整体内存，网络，cpu等使用情况。（Prometheus）——管理员关注</li>\n</ol>\n<h3 id=\"关于软件项目方案评估\"><a href=\"#关于软件项目方案评估\" class=\"headerlink\" title=\"关于软件项目方案评估\"></a>关于软件项目方案评估</h3><ol>\n<li>易用性 </li>\n<li>可用性</li>\n<li>性能</li>\n<li>安全性</li>\n<li>可维护性(日志，监控系统)</li>\n<li>可扩展性</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>谁知道这里面有多少小技巧，没准哪个能帮上你呢？(•̀⌄•́)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<h3 id=\"ssh免密登录\"><a href=\"#ssh免密登录\" class=\"headerlink\" title=\"ssh免密登录\"></a>ssh免密登录</h3><p><strong>原理：</strong><br><img src=\"/2020/09/14/技术札记/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E5%8E%9F%E7%90%86.png\" alt=\"ssh免密登录原理\"><br><strong>实际配置：</strong>  </p>\n<ol>\n<li><p>生成秘钥对：<br>本地主机：</p>\n   <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>拷贝公钥到远程主机：</p>\n<ol>\n<li><p>简单方法，在本地主机执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-copy-id remote_username@server_ip_address -p port</span><br></pre></td></tr></table></figure>\n\n<p><em>不加<code>-p</code>默认22端口</em><br>然后输入密码即可</p>\n</li>\n<li><p>先登录远程主机：</p>\n<ol>\n<li><p>获取本地主机的公钥，追加到<code>authorized_keys</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改权限：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启服务(不一定需要)：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>配置ssh名称(可选)<br>为了方便记住输入远程主机设备，可给远程主机配置名称。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vi ~/.ssh/config</span><br><span class=\"line\">Host remote</span><br><span class=\"line\">User root</span><br><span class=\"line\">Hostname 192.168.0.1</span><br><span class=\"line\">Port 22</span><br><span class=\"line\"># ssh remote</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>测试：</strong><br>本地主机登录远程主机：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh remote@&lt;ip&gt;</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br><span class=\"line\">ssh <span class=\"comment\">#免密</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>配置ssh禁用密码登录：</strong><br>增加安全性，避免别人尝试非法登录。</p>\n<ol>\n<li><p>完成上述的免密登录，服务端获得一个公钥，本机获得一个私钥</p>\n</li>\n<li><p>将私钥保存，供其他设备使用</p>\n</li>\n<li><p>设置服务端配置文件<code>/etc/ssh/sshd_config</code>，关闭密码登录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#禁用密码验证</span><br><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\">#启用密钥验证，下面两个默认都是开启的</span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启sshd服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"VSCODE\"><a href=\"#VSCODE\" class=\"headerlink\" title=\"VSCODE\"></a>VSCODE</h3><p>插件列表：  </p>\n<ol>\n<li>Remote-SSH：远程ssh登录，linux版本太低不支持</li>\n<li>sftp：远程文件同步</li>\n<li>vscode-icons：文件图标显示</li>\n<li>markdown all in one：Markdown插件</li>\n<li>markdown preview  Enhanced：Markdown预览<br> cmd：Markdown Preview Enhanced: Customize Css<br> background-color: rgb(157, 189, 189);<br> font-family: -apple-system, BlinkMacSystemFont, “Segoe UI”, Helvetica, Arial, sans-serif, “Apple Color Emoji”, “Segoe UI Emoji”, “Segoe UI Symbol”, “微软雅黑”;</li>\n<li>tabNine：机器学习补全(可能导致和语言补全冲突)</li>\n<li>go 补全插件，建议使用gopl，之前补全太慢，<a href=\"https://blog.csdn.net/zhetmdoubeizhanyong/article/details/102534172\" target=\"_blank\" rel=\"noopener\">解决</a></li>\n<li>koroFileHeader：用于生成标准格式函数头说明，或者代码文件头说明</li>\n<li>bookmarks：给代码打标签</li>\n<li>Draw.io integration：drawio的绘图插件</li>\n</ol>\n<h3 id=\"C-段错误处理-Linux\"><a href=\"#C-段错误处理-Linux\" class=\"headerlink\" title=\"C 段错误处理(Linux)\"></a>C 段错误处理(Linux)</h3><ol>\n<li>必须先得到段错误的地址，可以用gdb的bt或者在程序中捕捉段错误堆栈。<code>SIGSEGV, SIGABRT</code></li>\n<li>在可以编译的机器上源码编译，带上行号和函数名，使用<code>addr2line -f -e &lt;file&gt; &lt;addr&gt;</code>来映射到具体的函数位置。</li>\n<li><code>objdump -D &lt;file&gt; | grep -A 50 -B 50 &lt;addr&gt;</code> 也能查到对应汇编代码，从而定位函数。</li>\n</ol>\n<h3 id=\"进程运行状态查看\"><a href=\"#进程运行状态查看\" class=\"headerlink\" title=\"进程运行状态查看\"></a>进程运行状态查看</h3><p><code>pstack &lt;pid&gt; </code>查看当前运行程序的运行状态，非常方便排查阻塞和死锁问题。<br><code>ps aux --sort -rss</code> 按照内存占用排序，排查进程内存泄漏。<br><code>ps v &lt;pid&gt;</code>查看某个进程具体的信息，类似top列出的进程信息。</p>\n<h3 id=\"断言assert\"><a href=\"#断言assert\" class=\"headerlink\" title=\"断言assert\"></a>断言assert</h3><p>处理程序中不应该发生的错误，常用在参数检查。<br><a href=\"http://c.biancheng.net/c/assert/\" target=\"_blank\" rel=\"noopener\">参考1</a>, <a href=\"https://www.runoob.com/w3cnote/c-assert.html\" target=\"_blank\" rel=\"noopener\">参考2</a></p>\n<h3 id=\"ipset源码技巧\"><a href=\"#ipset源码技巧\" class=\"headerlink\" title=\"ipset源码技巧\"></a>ipset源码技巧</h3><p>ipset源码分析</p>\n<ol>\n<li><p>这里有个很牛皮的操作，在c里面实现的模块化加载。具体操作如下：<br>如果我想在ipset中支持一种新的添加规则，比如hash:ip，那么，我需要改多少源码？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 按照格式写好ipset_hash_ip.c里面包含了hash:ip的传输规则和初始化方法。</span><br><span class=\"line\">2. 重新执行configure，加入这个规则（这里具体实现我没有确认，但猜测如此）</span><br><span class=\"line\">3. 执行make</span><br></pre></td></tr></table></figure>\n\n<p>那么其具体实现方法如何？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 首先在configure中会根据你配置的支持规则模块生成makefile，makefile中就会包含编译这个模块的源文件。</span><br><span class=\"line\">2. make时会根据配置产生的源文件列表，生成一个type_init.c文件，里面包含了所有规则模块的初始化。</span><br><span class=\"line\">3. 主函数会调用type_init.c源文件，将初始化好的规则加载到一个全局链表中，在规则匹配的时候进行匹配。</span><br></pre></td></tr></table></figure>\n\n<p>这种方法就实现了模块化的添加和删除规则模块的方法。这种模块化的思想，在其他语言里并不少见，但是在c语言里面实现的，还是少见(菜鸡的我反正第一次见)</p>\n</li>\n<li><p>提供了接口，自定义输出函数和日志输出文件。</p>\n</li>\n<li><p>X Macros宏使用，类似定义一个map，但是比map功能更丰富。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt; </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Defines four variables. </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> VARIABLES \\ </span></span><br><span class=\"line\">   X(value1, <span class=\"number\">1</span>) \\ </span><br><span class=\"line\">   X(value2, <span class=\"number\">2</span>) \\ </span><br><span class=\"line\">   X(value3, <span class=\"number\">3</span>) \\ </span><br><span class=\"line\">   X(value4, <span class=\"number\">4</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// driver program. </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">   <span class=\"comment\">// Declaration of every variable </span></span><br><span class=\"line\">   <span class=\"comment\">// is done through macro. </span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> X(value, a) char value[10]; </span></span><br><span class=\"line\">      VARIABLES </span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">undef</span> X </span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// String values are accepted </span></span><br><span class=\"line\">   <span class=\"comment\">// for all variables. </span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> X(value, a) scanf(<span class=\"meta-string\">\"\\n%s\"</span>, value); </span></span><br><span class=\"line\">      VARIABLES </span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">undef</span> X </span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">// Values are printed. </span></span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> X(value, a) printf(<span class=\"meta-string\">\"%d) %s\\n\"</span>, a, value); </span></span><br><span class=\"line\">      VARIABLES </span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">undef</span> X </span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上预编译后的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt; </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">char</span> value1[<span class=\"number\">10</span>]; </span><br><span class=\"line\">   <span class=\"keyword\">char</span> value2[<span class=\"number\">10</span>]; </span><br><span class=\"line\">   <span class=\"keyword\">char</span> value3[<span class=\"number\">10</span>]; </span><br><span class=\"line\">   <span class=\"keyword\">char</span> value4[<span class=\"number\">10</span>]; </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">scanf</span>(<span class=\"string\">\"\\n%s\"</span>, value1); </span><br><span class=\"line\">   <span class=\"built_in\">scanf</span>(<span class=\"string\">\"\\n%s\"</span>, value2); </span><br><span class=\"line\">   <span class=\"built_in\">scanf</span>(<span class=\"string\">\"\\n%s\"</span>, value3); </span><br><span class=\"line\">   <span class=\"built_in\">scanf</span>(<span class=\"string\">\"\\n%s\"</span>, value4); </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d) %s\\n\"</span>, <span class=\"number\">1</span>, value1); </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d) %s\\n\"</span>, <span class=\"number\">2</span>, value2); </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d) %s\\n\"</span>, <span class=\"number\">3</span>, value3); </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d) %s\\n\"</span>, <span class=\"number\">4</span>, value4); </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>示例2：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt; </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Defining a macro </span></span><br><span class=\"line\"><span class=\"comment\">// with the values of colors. </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> COLORS \\ </span></span><br><span class=\"line\">   X(RED)\t \\ </span><br><span class=\"line\">   X(BLACK) \\ </span><br><span class=\"line\">   X(WHITE) \\ </span><br><span class=\"line\">   X(BLUE) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Creating an enum of colors </span></span><br><span class=\"line\"><span class=\"comment\">// by macro expansion. </span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> colors &#123; </span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">define</span> X(value) value, </span></span><br><span class=\"line\">      COLORS </span><br><span class=\"line\">   <span class=\"meta\">#<span class=\"meta-keyword\">undef</span> X </span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A utility that takes the enum value </span></span><br><span class=\"line\"><span class=\"comment\">// and returns corresponding string value </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">toString</span><span class=\"params\">(<span class=\"keyword\">enum</span> colors value)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">switch</span> (value) &#123; </span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"meta-keyword\">define</span> X(color) \\ </span></span><br><span class=\"line\">         <span class=\"keyword\">case</span> color: \\ </span><br><span class=\"line\">            <span class=\"keyword\">return</span> #color; </span><br><span class=\"line\">            COLORS </span><br><span class=\"line\">      <span class=\"meta\">#<span class=\"meta-keyword\">undef</span> X </span></span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// driver program. </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">enum</span> colors color = WHITE; </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, toString(color)); </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上预编译后的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt; </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Creating an enum of colors. </span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> colors &#123; </span><br><span class=\"line\">   RED, </span><br><span class=\"line\">   BLACK, </span><br><span class=\"line\">   WHITE, </span><br><span class=\"line\">   BLUE </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*A utility that takes the enum value and returns </span></span><br><span class=\"line\"><span class=\"comment\">corresponding string value*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">toString</span><span class=\"params\">(<span class=\"keyword\">enum</span> colors value)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">switch</span> (value) &#123; </span><br><span class=\"line\">   <span class=\"keyword\">case</span> RED: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"RED\"</span>; </span><br><span class=\"line\">   <span class=\"keyword\">case</span> BLACK: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"BLACK\"</span>; </span><br><span class=\"line\">   <span class=\"keyword\">case</span> WHITE: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"WHITE\"</span>; </span><br><span class=\"line\">   <span class=\"keyword\">case</span> BLUE: </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"BLUE\"</span>; </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// driver program. </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">enum</span> colors color = WHITE; </span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, toString(color)); </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>X macros 主要适用于多中类型有相同的处理逻辑。简单的类似enum中int到string的映射，复杂的到ipset的多种类型处理。</p>\n</li>\n<li><p>gcc 编译debug模式或者自定义模式。<code>-Dxxx</code>。示例：<br>test.c:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int agv, char *agrs[])&#123;</span><br><span class=\"line\">#ifdef TEST</span><br><span class=\"line\">   printf(&quot;ENABLE TEST\\n&quot;);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">   printf(&quot;test over\\n&quot;);</span><br><span class=\"line\">   return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行TEST：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc test.c -DTEST -o test</span><br><span class=\"line\">$ ./test</span><br><span class=\"line\">ENABLE TEST</span><br><span class=\"line\">test over</span><br><span class=\"line\">$ gcc test.c -o test</span><br><span class=\"line\">$ ./test</span><br><span class=\"line\">test over</span><br></pre></td></tr></table></figure>\n\n<p>这种方式在做C的模块编译，以及Debug编译特别有效。DEBUG适合开源代码，不适合现场代码排查。<br><a href=\"https://colobu.com/2018/08/28/15-Most-Frequently-Used-GCC-Compiler-Command-Line-Options/#%E4%BD%BF%E7%94%A8-V%E6%89%93%E5%8D%B0%E6%89%80%E6%9C%89%E7%9A%84%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4\" target=\"_blank\" rel=\"noopener\">15个最常用的GCC编译器参数</a></p>\n</li>\n<li><p>源码编译的时候，缺少依赖库。</p>\n<ul>\n<li>一般的解决方法，都是直接用yum install libxxx-devel.x86_64，再次进行configure。</li>\n<li>如果还不成功，就检查你的<code>PKG_CONFIG_PATH</code>变量是否存在，不存在添加对应的环境变量(默认一般在<code>/usr/lib64/pkgconfig/</code>)。</li>\n<li>如果还不行，就执行<code>/usr/bin/pkg-config --exists --print-errors &quot;libxxx &gt;= x.x.xx&quot;</code>(通常这个命令可以在configure文件中找到)，然后再根据问题来排查。</li>\n<li>最后的方法，就是用<code>./configure --help</code>来找到对应的库的环境变量名称，修改对应的<code>libxxx_LIBS</code></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"一些工具\"><a href=\"#一些工具\" class=\"headerlink\" title=\"一些工具\"></a>一些工具</h3><p><a href=\"https://golang.hotexamples.com/\" target=\"_blank\" rel=\"noopener\">查找各种代码的使用范例</a></p>\n<h3 id=\"go好用的开源组件\"><a href=\"#go好用的开源组件\" class=\"headerlink\" title=\"go好用的开源组件\"></a>go好用的开源组件</h3><p>配置文件读写：</p>\n<ul>\n<li>github.com/spf13/viper</li>\n</ul>\n<p>日志：</p>\n<ul>\n<li>go.uber.org/zap</li>\n</ul>\n<p>web服务：</p>\n<ul>\n<li>github.com/gin-gonic/gin</li>\n</ul>\n<p>go编写命令：</p>\n<ul>\n<li>github.com/urfave/cli/v2</li>\n</ul>\n<p>restful 文档生成：</p>\n<ul>\n<li><a href=\"https://github.com/swaggo/gin-swagger\" target=\"_blank\" rel=\"noopener\">https://github.com/swaggo/gin-swagger</a> <ul>\n<li><a href=\"https://awesomeopensource.com/project/swaggo/swag\" target=\"_blank\" rel=\"noopener\">全教程</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/40304004\" target=\"_blank\" rel=\"noopener\">教程</a></li>\n<li><a href=\"https://juejin.im/post/5d3f92356fb9a06b317b3baf\" target=\"_blank\" rel=\"noopener\">教程</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Go技巧\"><a href=\"#Go技巧\" class=\"headerlink\" title=\"Go技巧\"></a>Go技巧</h3><ol>\n<li>测试<ol>\n<li>单元测试<br>就是常用的以<code>_test.go</code>结尾的文件，函数名<code>Testxx</code>来构成的单元测试。如果你想将单元测试编译出来，可以使用<code>-c</code>参数，执行测试程序的时候，使用<code>-test.xxx</code>来执行test相关命令。例如：<code>go test -run xxx</code>=<code>./a -test.run xxx</code></li>\n<li>性能测试<br>同样在<code>_test.go</code>结尾的文件中，以<code>Benchmark</code>为开头的性能测试，具体用法可以<a href=\"https://my.oschina.net/solate/blog/3034188\" target=\"_blank\" rel=\"noopener\">参考</a>, 生成性能图和火焰图更有利于分析。<a href=\"https://zhuanlan.zhihu.com/p/80578541\" target=\"_blank\" rel=\"noopener\">另外的参考</a></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"xrags\"><a href=\"#xrags\" class=\"headerlink\" title=\"xrags\"></a>xrags</h3><p>常见的用法：</p>\n<ol>\n<li><code>ls | xargs echo</code> 相当于<code>echo a b c</code></li>\n<li> <code>ls | xargs -i echo {}</code> 相当于 <code>echo a; echo b; echo c</code>，<code>-i</code>同<code>-I &#39;{}&#39;</code>，其含义是将<code>{}</code>内的内容替换成前面输出的内容，并且循环执行。</li>\n<li> <code>-t</code>参数可以查看你xargs执行的命令。</li>\n</ol>\n<p><strong>注意：</strong> 如果在xargs后的命令参数中，路径参数有空格的或tab的，会导致路径无法识别。比如<code>echo &quot;/home/jihan &quot; | xargs -i ls {}</code>就会报错，虽然实际命令<code>ls /home/jihan&lt;空格&gt;</code>没有问题，但是用xargs+i的形式就有问题。</p>\n<h3 id=\"shell调试\"><a href=\"#shell调试\" class=\"headerlink\" title=\"shell调试\"></a>shell调试</h3><ol>\n<li>-n 命令，显示shell，不执行，通常用于语法检查。</li>\n<li>-x 命令，我经常用，在执行过程中打印shell脚本执行的真实命令。-v是打印原始命令，不做替换。</li>\n<li>bashdb，类似gdb做调试用，命令：<code>bashdb --debug your.sh</code>，一下是常用参数：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一、列出代码和查询代码类：</span><br><span class=\"line\">l  列出当前行以下的10行</span><br><span class=\"line\">-  列出正在执行的代码行的前面10行</span><br><span class=\"line\">.  回到正在执行的代码行</span><br><span class=\"line\">/pat/ 向后搜索pat</span><br><span class=\"line\">？pat？向前搜索pat</span><br><span class=\"line\">二、Debug控制类：</span><br><span class=\"line\">h     帮助</span><br><span class=\"line\">help  命令 得到命令的具体信息</span><br><span class=\"line\">q     退出bashdb</span><br><span class=\"line\">x     算数表达式 计算算数表达式的值，并显示出来</span><br><span class=\"line\">!!    空格Shell命令 参数 执行shell命令</span><br><span class=\"line\">使用bashdb进行debug的常用命令(cont.)</span><br><span class=\"line\">三、控制脚本执行类：</span><br><span class=\"line\">n   执行下一条语句，遇到函数，不进入函数里面执行，将函数当作黑盒</span><br><span class=\"line\">s n 单步执行n次，遇到函数进入函数里面</span><br><span class=\"line\">b   行号n 在行号n处设置断点</span><br><span class=\"line\">del 行号n 撤销行号n处的断点</span><br><span class=\"line\">c   行号n 一直执行到行号n处</span><br><span class=\"line\">R   重新启动当前调试脚本</span><br><span class=\"line\">Finish 执行到程序最后</span><br><span class=\"line\">cond n expr 条件断点</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"查找与当前进程通信的所有进程\"><a href=\"#查找与当前进程通信的所有进程\" class=\"headerlink\" title=\"查找与当前进程通信的所有进程\"></a>查找与当前进程通信的所有进程</h3><ol>\n<li>找到当前进程S的进程pid</li>\n<li>获取与S通信A的tcp端口号</li>\n<li>通过A的tcp端口号，获得A的进程pid<br><img src=\"/2020/09/14/技术札记/%E6%9F%A5%E6%89%BE%E4%B8%8E%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9A%84%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B.jpg\" alt=\"举个栗子\"></li>\n</ol>\n<h3 id=\"程序执行时的系统调用\"><a href=\"#程序执行时的系统调用\" class=\"headerlink\" title=\"程序执行时的系统调用\"></a>程序执行时的系统调用</h3><p><code>strace</code> 是 Linux 中用于监控和篡改进程与内核之间操作的工具。非常强大的工具，能够有效排查程序性能问题，异常操作以及段错误问题。</p>\n<h3 id=\"程序内存检测\"><a href=\"#程序内存检测\" class=\"headerlink\" title=\"程序内存检测\"></a>程序内存检测</h3><p><code>valgrind</code> <a href=\"https://www.jianshu.com/p/29a7a7d3d5b1\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h3 id=\"Linux文件锁定\"><a href=\"#Linux文件锁定\" class=\"headerlink\" title=\"Linux文件锁定\"></a>Linux文件锁定</h3><p>在root权限下，有可能对某个文件都没有操作权限，可能是使用<code>chattr</code>对其进行锁定，可使用其进行解除。<code>lsattr</code>查看相应属性。<a href=\"http://c.biancheng.net/view/874.html\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h3 id=\"Linux-内核小版本升级\"><a href=\"#Linux-内核小版本升级\" class=\"headerlink\" title=\"Linux 内核小版本升级\"></a>Linux 内核小版本升级</h3><p>小版本，就是 <code>3.10.0-862</code>中<code>-</code>后的东西。而我们进行升级的时候，需要(centos为例，3.10.0-693升级到3.10.0-862)：</p>\n<ol>\n<li>大版本相同的一个设备(3.10.0-693)</li>\n<li>想要升级的rpm包(3.10.0-862)<a href=\"https://www.kernel.org/\" target=\"_blank\" rel=\"noopener\">官方</a>，找不到直接Google搜吧。<a href=\"https://linuxsoft.cern.ch/cern/centos/7/updates/x86_64/repoview/kernel.html\" target=\"_blank\" rel=\"noopener\">这个网站很全</a></li>\n<li><code>yum install kernel-3.10.0-862.9.1.el7.x86_64.rpm</code></li>\n<li>grub2看看启动顺序<code>grub2-editenv list</code>以及<code>awk -F \\&#39; &#39;$1==&quot;menuentry &quot; {print i++ &quot; : &quot; $2}&#39; /etc/grub2.cfg</code></li>\n<li>reboot</li>\n<li><del>需要源码的情况下，执行<code>yum install kernel-devel</code>会自动根据内核版本下载安装源码到<code>/usr/src/kernels</code>中(会下载最新版本的，郁闷)</del></li>\n<li>需要内核源码的话，从网上搜索对应的源码，执行<code>yum install kernel-devel-xxxx.rpm</code>安装即可。<a href=\"https://linuxsoft.cern.ch/cern/centos/7/updates/x86_64/repoview/kernel-devel.html\" target=\"_blank\" rel=\"noopener\">这个网站很全</a></li>\n</ol>\n<h3 id=\"linux源码编译\"><a href=\"#linux源码编译\" class=\"headerlink\" title=\"linux源码编译\"></a>linux源码编译</h3><h3 id=\"内核模块源码编译安装\"><a href=\"#内核模块源码编译安装\" class=\"headerlink\" title=\"内核模块源码编译安装\"></a>内核模块源码编译安装</h3><p>用户态的源码编译安装，和普通的其他软件没有什么区别，基本都是make，make install，但是你要进行内核模块的源码构建，那么有如下几种方式:</p>\n<ol>\n<li><p>放在源码树以内(例如iptables)。假如我要自定义一个netfilter的模块，而且希望将他存放于/net/netfilter/目录下，那么要注意，在该目录下存在大量的.c源码文件。如果你的模块文件仅仅只有一两个源文件，你可以直接将其放在该目录下，如果你的模块包含的源文件比较多的话，也许你应该建立一个单独的文件夹，用于专门维护你的模块程序源文件。假如创建一个目录名为：mynetfilter/子目录。接下来需要修改/net/netfilter/目录下的Makefile文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj-m += mynetfilter/</span><br></pre></td></tr></table></figure>\n\n<p>这行编译指令告诉模块构建系统，在编译模块时需要进入mynetfilter/子目录。如果你的模块程序依赖于一个特殊的配置选项。比如，CONFIG_ MYNETFILTER_TEST（该选项在编译内核时，执行make menuconfig命令时用于配置该模块的编译选项），你需要修改/net/netfilter/目录下的Kconfig文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config “MYNETFILTER_TEST”</span><br><span class=\"line\">tristate “netfilter test module”</span><br></pre></td></tr></table></figure>\n\n<p>编译内核时，执行make menucofnig之后，我们会在配置菜单上看到此选项,随之，需要修改Makefile文件，用下面的指令替换之前的<code>Obj-m += mynetfilter/</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj-$(CONFIG_MYNETFILTER_TEST)  += mynetfilter/</span><br></pre></td></tr></table></figure>\n\n<p>最后，在/net/netfilter/mynetfilter/目录下添加一个Makefile文件，其中需要添加下面的指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj –m  += mynetfilter.o</span><br></pre></td></tr></table></figure>\n\n<p>准备就绪了，现在构建系统会进入到mynetfilter/目录下，将mynetfilter.c编译为mynetfilter.ko模块。<br>附：如果你只想编译内核中某个模块的ko，也可以cd到该目录，执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make CONFIG_XXX=m –c  /kernel/source/location SUBDIRS=$PWD modules</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>内核源码树之外构建(例如ipset)<br>如果将模块代码放在内核源码树之外单独构建的话，你只需要在你的模块目录下创建一个Makefile文件，添加一行指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Obj-m := mynetfilter.o</span><br></pre></td></tr></table></figure>\n\n<p>如果你有多个源文件只需添加另一行指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mynetfilter-objs := mynetfiler-init.o mynetfiler-exit.o</span><br></pre></td></tr></table></figure>\n\n<p>模块在内核内和内核外构建的最大的区别在于构建过程。当模块在内核源代码树之外构建时，你必须告诉make如何找到内核源代码文件和基础Makefile文件。通过下面的指令完成上述功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make –c  /kernel/source/location SUBDIRS=$PWD modules</span><br></pre></td></tr></table></figure>\n\n<p>其中，/kernel/source/location/ 即为你配置的内核源代码树的位置。SUBDIRS是你需要编译的模块位置。</p>\n</li>\n</ol>\n<h3 id=\"Linux-内核模块加载\"><a href=\"#Linux-内核模块加载\" class=\"headerlink\" title=\"Linux 内核模块加载\"></a>Linux 内核模块加载</h3><p><a href=\"https://www.ibm.com/developerworks/cn/linux/l-cn-kernelmodules/?ca=drs\" target=\"_blank\" rel=\"noopener\">版本检查机制</a></p>\n<h3 id=\"Linux路由操作\"><a href=\"#Linux路由操作\" class=\"headerlink\" title=\"Linux路由操作\"></a>Linux路由操作</h3><p>路由：某个ip(某个范围ip)应当到哪个网关去找。网关对应下一条路由。<br><strong>添加默认路由：</strong><br><code>route add default via 192.168.161.11 dev eth0</code><br><strong>添加一般路由：</strong><br><code>route add -net 192.168.62.11 netmask 255.255.255.0 gw 192.168.1.1</code><br>或<br><code>route add -net 192.168.62.0/24 gw 192.168.1.1</code><br><strong>删除路由：</strong><br><code>route del -net 192.168.62.11 netmask 255.255.255.0</code><br>或<br><code>route del -net 192.168.62.0/24</code></p>\n<ul>\n<li><code>net</code> 表示一个ip或者网段</li>\n<li><code>gw</code> 表示网关或下一跳路由</li>\n<li><code>dev</code> 表示对应的出口网卡</li>\n</ul>\n<h3 id=\"mysql-性能优化\"><a href=\"#mysql-性能优化\" class=\"headerlink\" title=\"mysql 性能优化\"></a>mysql 性能优化</h3><p><a href=\"http://blog.chinaunix.net/uid-26870656-id-4287492.html\" target=\"_blank\" rel=\"noopener\">TinkPHP 对mysql 20条优化建议</a></p>\n<h3 id=\"sudo、su和sudo-s的差别\"><a href=\"#sudo、su和sudo-s的差别\" class=\"headerlink\" title=\"sudo、su和sudo -s的差别\"></a>sudo、su和sudo -s的差别</h3><h3 id=\"relocation-error-usr-lib64-libc-so-6-symbol-dl-starting-up\"><a href=\"#relocation-error-usr-lib64-libc-so-6-symbol-dl-starting-up\" class=\"headerlink\" title=\"relocation error: /usr/lib64/libc.so.6: symbol _dl_starting_up,\"></a>relocation error: /usr/lib64/libc.so.6: symbol _dl_starting_up,</h3><p>relocation error: /usr/lib64/libc.so.6: symbol _dl_starting_up, version GLIBC_PRIVATE not defined in file ld-linux-x86-64.so.2 with link time reference 问题解决<br>在建立一个错误的软连接到ld-linux-x86-64.so.2时，悲剧就这么发生了。此时大部分命令都不能使用，SSH当然也不能登录了。这个时候一定不要退出终端。</p>\n<p>有人说那就把软连接复原吧，可是ln也同样无法使用。。。这时候我们就可以使用可爱的sln命令就可以了，哈哈。</p>\n<p>lsn /usr/lib64/ld-2.17.so /usr/lib64/ld-linux-x86-64.so.2 </p>\n<h3 id=\"linux死亡操作\"><a href=\"#linux死亡操作\" class=\"headerlink\" title=\"linux死亡操作\"></a>linux死亡操作</h3><p>随意动<code>/usr/lib64</code>或<code>/lib64</code>下的库，特别是<code>ld、libc</code>之类的，<strong>覆盖、移动和删除</strong>效果都差不多，基本就是系统爆破级别的。特别注意升级openssl，gcc都容易出现这种问题。附上linux文件目录结构（<a href=\"https://www.runoob.com/linux/linux-system-contents.html\" target=\"_blank\" rel=\"noopener\">参考</a>）：<br><img src=\"/2020/09/14/技术札记/linux%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.jpg\"></p>\n<h3 id=\"Gcc静-动态链接库链接顺序\"><a href=\"#Gcc静-动态链接库链接顺序\" class=\"headerlink\" title=\"Gcc静/动态链接库链接顺序\"></a>Gcc静/动态链接库链接顺序</h3><p><strong>静态库</strong>链接时搜索路径顺序：</p>\n<ol>\n<li>ld会去找GCC命令中的参数-L</li>\n<li>再找gcc的环境变量LIBRARY_PATH</li>\n<li>再找内定目录 /lib /usr/lib /usr/local/lib 这是当初compile gcc时写在程序内的</li>\n</ol>\n<p><strong>动态库</strong>链接时、执行时搜索路径顺序:</p>\n<ol>\n<li>编译目标代码时指定的动态库搜索路径</li>\n<li>环境变量LD_LIBRARY_PATH指定的动态库搜索路径</li>\n<li>配置文件/etc/ld.so.conf中指定的动态库搜索路径</li>\n<li>默认的动态库搜索路径/lib</li>\n<li>默认的动态库搜索路径/usr/lib</li>\n</ol>\n<p>链接时相互依赖顺序是从右到左，越是底层，越靠后写。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ ...  obj($?) -l(上层逻辑lib) -l(中间封装lib) -l(基础lib) -l(系统lib)  -o $@</span><br></pre></td></tr></table></figure>\n\n<p>有关环境变量：<br>LIBRARY_PATH环境变量：指定程序静态链接库文件搜索路径<br>LD_LIBRARY_PATH环境变量：指定程序动态链接库文件搜索路径</p>\n<p>对于排查链接问题方法：<br><code>ldd &lt;your_lib&gt;</code>：查看可执行程序或者动态库运行时的链接库<br><code>readelf -d &lt;your_lib&gt;</code>：和ldd类似，不用运行程序，查看可执行程序或动态库<a href=\"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format\" target=\"_blank\" rel=\"noopener\">ELF</a><br><code>LD_DEBUG=libs ./&lt;your_exe&gt;</code>：查看程序执行时的动态库调度过程。<br><code>ldconfig</code>：它会遍历默认所有共享库目录，比如/lib，/usr/lib等，然后更新所有的软链接，使她们指向最新共享库。</p>\n<p>指定动态库版本或路径：<br><code>-Wl,-rpath,&lt;your_lib_path&gt;</code>: 指定程序运行时动态库链接路径。<br>将<code>-lxxx</code>直接修改为<code>/you/path/libxxx</code>，可以指定动态库的绝对路径。</p>\n<p>参考：<br><a href=\"https://en.wikipedia.org/wiki/Rpath\" target=\"_blank\" rel=\"noopener\">wiki rpath</a><br><a href=\"https://medium.com/nataraj-raghavendra/rpath-vs-runpath-883029b17c45\" target=\"_blank\" rel=\"noopener\">rpath vs runpath</a> 附加了许多动态库加载的示例。<br><a href=\"https://www.cnblogs.com/GnibChen/p/8649476.html\" target=\"_blank\" rel=\"noopener\">静态链接与动态链接库的查找顺序</a><br><a href=\"https://blog.csdn.net/ssmale/article/details/17225345\" target=\"_blank\" rel=\"noopener\">gcc 链接库的顺序问题</a><br><a href=\"https://stackoverflow.com/questions/33373851/gcc-ld-what-is-to-wl-rpath-in-dynamic-linking-what-l-is-to-l-in-static-link/33378137\" target=\"_blank\" rel=\"noopener\">gcc/ld: what is to -Wl,-rpath in dynamic linking what -l is to -L in static linking?</a><br><a href=\"https://stackoverflow.com/questions/25918462/why-ld-library-path-is-bad-and-the-correct-way-to-load-dynamic-libraries\" target=\"_blank\" rel=\"noopener\">Why LD_LIBRARY_PATH is BAD and the correct way to load dynamic libraries</a></p>\n<h3 id=\"有关linux下的目录\"><a href=\"#有关linux下的目录\" class=\"headerlink\" title=\"有关linux下的目录\"></a>有关linux下的目录</h3><p><a href=\"#linux%E6%AD%BB%E4%BA%A1%E6%93%8D%E4%BD%9C\">上述</a>有相关的linux目录结构，这里说明一下<code>/tmp</code>目录，在linux系统中，<code>/tmp</code>目录在一定周期或者重启等都有可能删除相应部分符合条件的文件。而删除方法是通过执行定时任务<code>/etc/cron.daily/tmpwatch</code>，此定时任务在系统最小安装的情况下，需要手动安装。</p>\n<h3 id=\"关于系统监控\"><a href=\"#关于系统监控\" class=\"headerlink\" title=\"关于系统监控\"></a>关于系统监控</h3><p>相对大型系统，都需要进行系统监控。特别针对于微服务系统架构。个人理解需要从三个方面进行监控：</p>\n<ol>\n<li>业务逻辑层，负责统计业务访问状态，访问结果，异常等(常用方式log输出。比如syslog)——通常管理员用户都关注</li>\n<li>分布式链路追踪，又称为APM。用于追踪一个业务从开始到结束中间每个阶段的执行情况，用于多组件排错非常方便。(opentracing, Zipkin and Jaeger)——通常管理员关注</li>\n<li>系统整体运行状态，关注系统整体内存，网络，cpu等使用情况。（Prometheus）——管理员关注</li>\n</ol>\n<h3 id=\"关于软件项目方案评估\"><a href=\"#关于软件项目方案评估\" class=\"headerlink\" title=\"关于软件项目方案评估\"></a>关于软件项目方案评估</h3><ol>\n<li>易用性 </li>\n<li>可用性</li>\n<li>性能</li>\n<li>安全性</li>\n<li>可维护性(日志，监控系统)</li>\n<li>可扩展性</li>\n</ol>"},{"title":"非常有用的网站-持续更新","date":"2019-07-24T09:29:28.000Z","_content":"\n最好是大家都能科学上网，否则有些网站可能访问不了哟~ (๑`･ᴗ･´๑)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n\n* * *\n\n<!-- more -->\n## 技术类\n### 通用\n[google：](https://www.google.com)：(ꈍᴗꈍ) 用[bing](https://cn.bing.com)也可以，百度什么的。。。\n[GitHub](https://github.com)：这个不用说了\n[Stack Overflow](http://stackoverflow.com/)：全球最大的IT问答平台\n[各种语言的API大集合](https://devdocs.io)：基本所有语言的通用API都能找到，但是要注意平台。\n[中文版C/C++API](https://zh.cppreference.com/):个人不太喜欢这个，同样要注意平台。比如C里的一些_s后缀的函数，gcc就不支持。\n### Linux软件开发\n[Ubuntu官网](https://www.ubuntu.com)，[Centos官网](https://www.centos.org/)：可能需要翻墙┐(´-｀)┌，先试试呗\n[linux常用命令](http://man.linuxde.net/ )： 集成了几乎所有常用的linux命令，并且分类明确，示例丰富。包含gcc，php等软开命令\n[linux C函数](https://linux.die.net/man/)：几乎包含了linux下c语言开发所有的API文档。个人觉得说明不是特别详细。\n[vim命令大全](https://blog.csdn.net/scaleqiao/article/details/45153379)：的确很全，如果觉得不好找具体命令，可直接在页面使用ctrl+f查找\n[Makefile编写](https://wiki.ubuntu.org.cn/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99Makefile)：较为全面的Makefile教程，也有[简单的](https://www.cnblogs.com/Anker/p/3242207.html)，以及我自己写的可[直接用的](https://github.com/JiHanHuang/Box/tree/master/Makefile)。\ngdb调试：较为系统的gdb教程，附上[gdb命令大全](https://blog.csdn.net/gnuhpc/article/details/4368831)。还有界面比较华丽的[gdbgui](https://www.gdbgui.com/)。\n[shell教程和基础教程](https://www.runoob.com/linux/linux-shell.html)。初学用这个还不错，可以现场跑代码。\n\n### Windows开发\n[微软window开发中心](https://docs.microsoft.com/en-us/windows/desktop/api/)：官方网站，啥API查不到？\n\n## 其他\n### 推荐平台\n[在线编程环境](https://www.tutorialspoint.com/codingground.htm)：一个在线的开发环境，主流语言基本都支持，这个挺帅的ヾ(❀╹◡╹)ﾉ~\n\n### 图片资源网站\n[阿里图标站](http://www.iconfont.cn/plus)，[easyicon图标](https://www.easyicon.net/)\n[高清壁纸](http://wallpaperswide.com/)，[各种类型的高清图](https://unsplash.com/)\n\n### 实用工具\n[Windows破解](http://www.yishimei.cn/network/290.html?=microkms_17.06.25)：激活系统，破解office，及各种office软件下载。\n[python绘图工具](https://pyecharts.org/#/zh-cn/3d_charts)：非常方便实用，各种图形，图表，3D图形绘制。这里有简单[样例](https://www.zhihu.com/question/24590883)，还有一些其他python工具。\n[Markdown在线编辑](http://weareoutman.github.io/markdoc/) : 快捷方便，能够下载上传。\n[各种流程图，思维导图在线绘制](https://www.diagrams.net/):非常方便，功能全面。并且支持Chrome插件。强推\n[github示例代码搜索](https://hotexamples.com/):搜索git上的函数示例代码。除去看函数文档，这个也不失为一种好方法。可能学到骚操作哟。\n[graphviz手绘风格图](https://sketchviz.com/new):用于dot语法绘图，常用流程图，时序图都能搞定，但需要点学习成本\n[graphviz dot语法总结](https://onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/#1-%E7%AE%80%E4%BB%8B)\n### 有那么一点点用的网站","source":"_posts/非常有用的网站-持续更新.md","raw":"---\ntitle: 非常有用的网站-持续更新\ndate: 2019-07-24 17:29:28\ncategories: 技术杂谈\ntags: 工具\n---\n\n最好是大家都能科学上网，否则有些网站可能访问不了哟~ (๑`･ᴗ･´๑)\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan\n\n* * *\n\n<!-- more -->\n## 技术类\n### 通用\n[google：](https://www.google.com)：(ꈍᴗꈍ) 用[bing](https://cn.bing.com)也可以，百度什么的。。。\n[GitHub](https://github.com)：这个不用说了\n[Stack Overflow](http://stackoverflow.com/)：全球最大的IT问答平台\n[各种语言的API大集合](https://devdocs.io)：基本所有语言的通用API都能找到，但是要注意平台。\n[中文版C/C++API](https://zh.cppreference.com/):个人不太喜欢这个，同样要注意平台。比如C里的一些_s后缀的函数，gcc就不支持。\n### Linux软件开发\n[Ubuntu官网](https://www.ubuntu.com)，[Centos官网](https://www.centos.org/)：可能需要翻墙┐(´-｀)┌，先试试呗\n[linux常用命令](http://man.linuxde.net/ )： 集成了几乎所有常用的linux命令，并且分类明确，示例丰富。包含gcc，php等软开命令\n[linux C函数](https://linux.die.net/man/)：几乎包含了linux下c语言开发所有的API文档。个人觉得说明不是特别详细。\n[vim命令大全](https://blog.csdn.net/scaleqiao/article/details/45153379)：的确很全，如果觉得不好找具体命令，可直接在页面使用ctrl+f查找\n[Makefile编写](https://wiki.ubuntu.org.cn/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99Makefile)：较为全面的Makefile教程，也有[简单的](https://www.cnblogs.com/Anker/p/3242207.html)，以及我自己写的可[直接用的](https://github.com/JiHanHuang/Box/tree/master/Makefile)。\ngdb调试：较为系统的gdb教程，附上[gdb命令大全](https://blog.csdn.net/gnuhpc/article/details/4368831)。还有界面比较华丽的[gdbgui](https://www.gdbgui.com/)。\n[shell教程和基础教程](https://www.runoob.com/linux/linux-shell.html)。初学用这个还不错，可以现场跑代码。\n\n### Windows开发\n[微软window开发中心](https://docs.microsoft.com/en-us/windows/desktop/api/)：官方网站，啥API查不到？\n\n## 其他\n### 推荐平台\n[在线编程环境](https://www.tutorialspoint.com/codingground.htm)：一个在线的开发环境，主流语言基本都支持，这个挺帅的ヾ(❀╹◡╹)ﾉ~\n\n### 图片资源网站\n[阿里图标站](http://www.iconfont.cn/plus)，[easyicon图标](https://www.easyicon.net/)\n[高清壁纸](http://wallpaperswide.com/)，[各种类型的高清图](https://unsplash.com/)\n\n### 实用工具\n[Windows破解](http://www.yishimei.cn/network/290.html?=microkms_17.06.25)：激活系统，破解office，及各种office软件下载。\n[python绘图工具](https://pyecharts.org/#/zh-cn/3d_charts)：非常方便实用，各种图形，图表，3D图形绘制。这里有简单[样例](https://www.zhihu.com/question/24590883)，还有一些其他python工具。\n[Markdown在线编辑](http://weareoutman.github.io/markdoc/) : 快捷方便，能够下载上传。\n[各种流程图，思维导图在线绘制](https://www.diagrams.net/):非常方便，功能全面。并且支持Chrome插件。强推\n[github示例代码搜索](https://hotexamples.com/):搜索git上的函数示例代码。除去看函数文档，这个也不失为一种好方法。可能学到骚操作哟。\n[graphviz手绘风格图](https://sketchviz.com/new):用于dot语法绘图，常用流程图，时序图都能搞定，但需要点学习成本\n[graphviz dot语法总结](https://onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/#1-%E7%AE%80%E4%BB%8B)\n### 有那么一点点用的网站","slug":"非常有用的网站-持续更新","published":1,"updated":"2020-12-24T10:12:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc0int6001nh9uowtwsjn4q","content":"<p>最好是大家都能科学上网，否则有些网站可能访问不了哟~ (๑`･ᴗ･´๑)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"技术类\"><a href=\"#技术类\" class=\"headerlink\" title=\"技术类\"></a>技术类</h2><h3 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h3><p><a href=\"https://www.google.com/\" target=\"_blank\" rel=\"noopener\">google：</a>：(ꈍᴗꈍ) 用<a href=\"https://cn.bing.com/\" target=\"_blank\" rel=\"noopener\">bing</a>也可以，百度什么的。。。<br><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>：这个不用说了<br><a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a>：全球最大的IT问答平台<br><a href=\"https://devdocs.io/\" target=\"_blank\" rel=\"noopener\">各种语言的API大集合</a>：基本所有语言的通用API都能找到，但是要注意平台。<br><a href=\"https://zh.cppreference.com/\" target=\"_blank\" rel=\"noopener\">中文版C/C++API</a>:个人不太喜欢这个，同样要注意平台。比如C里的一些_s后缀的函数，gcc就不支持。</p>\n<h3 id=\"Linux软件开发\"><a href=\"#Linux软件开发\" class=\"headerlink\" title=\"Linux软件开发\"></a>Linux软件开发</h3><p><a href=\"https://www.ubuntu.com/\" target=\"_blank\" rel=\"noopener\">Ubuntu官网</a>，<a href=\"https://www.centos.org/\" target=\"_blank\" rel=\"noopener\">Centos官网</a>：可能需要翻墙┐(´-｀)┌，先试试呗<br><a href=\"http://man.linuxde.net/\" target=\"_blank\" rel=\"noopener\">linux常用命令</a>： 集成了几乎所有常用的linux命令，并且分类明确，示例丰富。包含gcc，php等软开命令<br><a href=\"https://linux.die.net/man/\" target=\"_blank\" rel=\"noopener\">linux C函数</a>：几乎包含了linux下c语言开发所有的API文档。个人觉得说明不是特别详细。<br><a href=\"https://blog.csdn.net/scaleqiao/article/details/45153379\" target=\"_blank\" rel=\"noopener\">vim命令大全</a>：的确很全，如果觉得不好找具体命令，可直接在页面使用ctrl+f查找<br><a href=\"https://wiki.ubuntu.org.cn/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99Makefile\" target=\"_blank\" rel=\"noopener\">Makefile编写</a>：较为全面的Makefile教程，也有<a href=\"https://www.cnblogs.com/Anker/p/3242207.html\" target=\"_blank\" rel=\"noopener\">简单的</a>，以及我自己写的可<a href=\"https://github.com/JiHanHuang/Box/tree/master/Makefile\" target=\"_blank\" rel=\"noopener\">直接用的</a>。<br>gdb调试：较为系统的gdb教程，附上<a href=\"https://blog.csdn.net/gnuhpc/article/details/4368831\" target=\"_blank\" rel=\"noopener\">gdb命令大全</a>。还有界面比较华丽的<a href=\"https://www.gdbgui.com/\" target=\"_blank\" rel=\"noopener\">gdbgui</a>。<br><a href=\"https://www.runoob.com/linux/linux-shell.html\" target=\"_blank\" rel=\"noopener\">shell教程和基础教程</a>。初学用这个还不错，可以现场跑代码。</p>\n<h3 id=\"Windows开发\"><a href=\"#Windows开发\" class=\"headerlink\" title=\"Windows开发\"></a>Windows开发</h3><p><a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/\" target=\"_blank\" rel=\"noopener\">微软window开发中心</a>：官方网站，啥API查不到？</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"推荐平台\"><a href=\"#推荐平台\" class=\"headerlink\" title=\"推荐平台\"></a>推荐平台</h3><p><a href=\"https://www.tutorialspoint.com/codingground.htm\" target=\"_blank\" rel=\"noopener\">在线编程环境</a>：一个在线的开发环境，主流语言基本都支持，这个挺帅的ヾ(❀╹◡╹)ﾉ~</p>\n<h3 id=\"图片资源网站\"><a href=\"#图片资源网站\" class=\"headerlink\" title=\"图片资源网站\"></a>图片资源网站</h3><p><a href=\"http://www.iconfont.cn/plus\" target=\"_blank\" rel=\"noopener\">阿里图标站</a>，<a href=\"https://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">easyicon图标</a><br><a href=\"http://wallpaperswide.com/\" target=\"_blank\" rel=\"noopener\">高清壁纸</a>，<a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"noopener\">各种类型的高清图</a></p>\n<h3 id=\"实用工具\"><a href=\"#实用工具\" class=\"headerlink\" title=\"实用工具\"></a>实用工具</h3><p><a href=\"http://www.yishimei.cn/network/290.html?=microkms_17.06.25\" target=\"_blank\" rel=\"noopener\">Windows破解</a>：激活系统，破解office，及各种office软件下载。<br><a href=\"https://pyecharts.org/#/zh-cn/3d_charts\" target=\"_blank\" rel=\"noopener\">python绘图工具</a>：非常方便实用，各种图形，图表，3D图形绘制。这里有简单<a href=\"https://www.zhihu.com/question/24590883\" target=\"_blank\" rel=\"noopener\">样例</a>，还有一些其他python工具。<br><a href=\"http://weareoutman.github.io/markdoc/\" target=\"_blank\" rel=\"noopener\">Markdown在线编辑</a> : 快捷方便，能够下载上传。<br><a href=\"https://www.diagrams.net/\" target=\"_blank\" rel=\"noopener\">各种流程图，思维导图在线绘制</a>:非常方便，功能全面。并且支持Chrome插件。强推<br><a href=\"https://hotexamples.com/\" target=\"_blank\" rel=\"noopener\">github示例代码搜索</a>:搜索git上的函数示例代码。除去看函数文档，这个也不失为一种好方法。可能学到骚操作哟。<br><a href=\"https://sketchviz.com/new\" target=\"_blank\" rel=\"noopener\">graphviz手绘风格图</a>:用于dot语法绘图，常用流程图，时序图都能搞定，但需要点学习成本<br><a href=\"https://onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/#1-%E7%AE%80%E4%BB%8B\" target=\"_blank\" rel=\"noopener\">graphviz dot语法总结</a></p>\n<h3 id=\"有那么一点点用的网站\"><a href=\"#有那么一点点用的网站\" class=\"headerlink\" title=\"有那么一点点用的网站\"></a>有那么一点点用的网站</h3>","site":{"data":{}},"excerpt":"<p>最好是大家都能科学上网，否则有些网站可能访问不了哟~ (๑`･ᴗ･´๑)<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　——　by JiHan</p>\n<hr>","more":"<h2 id=\"技术类\"><a href=\"#技术类\" class=\"headerlink\" title=\"技术类\"></a>技术类</h2><h3 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h3><p><a href=\"https://www.google.com/\" target=\"_blank\" rel=\"noopener\">google：</a>：(ꈍᴗꈍ) 用<a href=\"https://cn.bing.com/\" target=\"_blank\" rel=\"noopener\">bing</a>也可以，百度什么的。。。<br><a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>：这个不用说了<br><a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"noopener\">Stack Overflow</a>：全球最大的IT问答平台<br><a href=\"https://devdocs.io/\" target=\"_blank\" rel=\"noopener\">各种语言的API大集合</a>：基本所有语言的通用API都能找到，但是要注意平台。<br><a href=\"https://zh.cppreference.com/\" target=\"_blank\" rel=\"noopener\">中文版C/C++API</a>:个人不太喜欢这个，同样要注意平台。比如C里的一些_s后缀的函数，gcc就不支持。</p>\n<h3 id=\"Linux软件开发\"><a href=\"#Linux软件开发\" class=\"headerlink\" title=\"Linux软件开发\"></a>Linux软件开发</h3><p><a href=\"https://www.ubuntu.com/\" target=\"_blank\" rel=\"noopener\">Ubuntu官网</a>，<a href=\"https://www.centos.org/\" target=\"_blank\" rel=\"noopener\">Centos官网</a>：可能需要翻墙┐(´-｀)┌，先试试呗<br><a href=\"http://man.linuxde.net/\" target=\"_blank\" rel=\"noopener\">linux常用命令</a>： 集成了几乎所有常用的linux命令，并且分类明确，示例丰富。包含gcc，php等软开命令<br><a href=\"https://linux.die.net/man/\" target=\"_blank\" rel=\"noopener\">linux C函数</a>：几乎包含了linux下c语言开发所有的API文档。个人觉得说明不是特别详细。<br><a href=\"https://blog.csdn.net/scaleqiao/article/details/45153379\" target=\"_blank\" rel=\"noopener\">vim命令大全</a>：的确很全，如果觉得不好找具体命令，可直接在页面使用ctrl+f查找<br><a href=\"https://wiki.ubuntu.org.cn/%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99Makefile\" target=\"_blank\" rel=\"noopener\">Makefile编写</a>：较为全面的Makefile教程，也有<a href=\"https://www.cnblogs.com/Anker/p/3242207.html\" target=\"_blank\" rel=\"noopener\">简单的</a>，以及我自己写的可<a href=\"https://github.com/JiHanHuang/Box/tree/master/Makefile\" target=\"_blank\" rel=\"noopener\">直接用的</a>。<br>gdb调试：较为系统的gdb教程，附上<a href=\"https://blog.csdn.net/gnuhpc/article/details/4368831\" target=\"_blank\" rel=\"noopener\">gdb命令大全</a>。还有界面比较华丽的<a href=\"https://www.gdbgui.com/\" target=\"_blank\" rel=\"noopener\">gdbgui</a>。<br><a href=\"https://www.runoob.com/linux/linux-shell.html\" target=\"_blank\" rel=\"noopener\">shell教程和基础教程</a>。初学用这个还不错，可以现场跑代码。</p>\n<h3 id=\"Windows开发\"><a href=\"#Windows开发\" class=\"headerlink\" title=\"Windows开发\"></a>Windows开发</h3><p><a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/\" target=\"_blank\" rel=\"noopener\">微软window开发中心</a>：官方网站，啥API查不到？</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"推荐平台\"><a href=\"#推荐平台\" class=\"headerlink\" title=\"推荐平台\"></a>推荐平台</h3><p><a href=\"https://www.tutorialspoint.com/codingground.htm\" target=\"_blank\" rel=\"noopener\">在线编程环境</a>：一个在线的开发环境，主流语言基本都支持，这个挺帅的ヾ(❀╹◡╹)ﾉ~</p>\n<h3 id=\"图片资源网站\"><a href=\"#图片资源网站\" class=\"headerlink\" title=\"图片资源网站\"></a>图片资源网站</h3><p><a href=\"http://www.iconfont.cn/plus\" target=\"_blank\" rel=\"noopener\">阿里图标站</a>，<a href=\"https://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">easyicon图标</a><br><a href=\"http://wallpaperswide.com/\" target=\"_blank\" rel=\"noopener\">高清壁纸</a>，<a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"noopener\">各种类型的高清图</a></p>\n<h3 id=\"实用工具\"><a href=\"#实用工具\" class=\"headerlink\" title=\"实用工具\"></a>实用工具</h3><p><a href=\"http://www.yishimei.cn/network/290.html?=microkms_17.06.25\" target=\"_blank\" rel=\"noopener\">Windows破解</a>：激活系统，破解office，及各种office软件下载。<br><a href=\"https://pyecharts.org/#/zh-cn/3d_charts\" target=\"_blank\" rel=\"noopener\">python绘图工具</a>：非常方便实用，各种图形，图表，3D图形绘制。这里有简单<a href=\"https://www.zhihu.com/question/24590883\" target=\"_blank\" rel=\"noopener\">样例</a>，还有一些其他python工具。<br><a href=\"http://weareoutman.github.io/markdoc/\" target=\"_blank\" rel=\"noopener\">Markdown在线编辑</a> : 快捷方便，能够下载上传。<br><a href=\"https://www.diagrams.net/\" target=\"_blank\" rel=\"noopener\">各种流程图，思维导图在线绘制</a>:非常方便，功能全面。并且支持Chrome插件。强推<br><a href=\"https://hotexamples.com/\" target=\"_blank\" rel=\"noopener\">github示例代码搜索</a>:搜索git上的函数示例代码。除去看函数文档，这个也不失为一种好方法。可能学到骚操作哟。<br><a href=\"https://sketchviz.com/new\" target=\"_blank\" rel=\"noopener\">graphviz手绘风格图</a>:用于dot语法绘图，常用流程图，时序图都能搞定，但需要点学习成本<br><a href=\"https://onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/#1-%E7%AE%80%E4%BB%8B\" target=\"_blank\" rel=\"noopener\">graphviz dot语法总结</a></p>\n<h3 id=\"有那么一点点用的网站\"><a href=\"#有那么一点点用的网站\" class=\"headerlink\" title=\"有那么一点点用的网站\"></a>有那么一点点用的网站</h3>"}],"PostAsset":[{"_id":"source/_posts/Netfilter介绍及其实现原理/1920px-Netfilter-packet-flow.png","slug":"1920px-Netfilter-packet-flow.png","post":"ckkc0insg000ah9uoja2li8cu","modified":1,"renderable":0},{"_id":"source/_posts/技术札记/查找与当前进程通信的所有进程.jpg","slug":"查找与当前进程通信的所有进程.jpg","post":"ckkc0int4001jh9uoki803htk","modified":1,"renderable":0},{"_id":"source/_posts/TLV数据传输协议及简单实现-C/TLV.png","post":"ckkc0insi000dh9uo5c2dnigx","slug":"TLV.png","modified":1,"renderable":1},{"_id":"source/_posts/ipset消息通信/netlink数据关系.png","post":"ckkc0insl000jh9uod1xwydim","slug":"netlink数据关系.png","modified":1,"renderable":1},{"_id":"source/_posts/《高性能mysql第三版》读书笔记/mysql架构图.jpg","post":"ckkc0insy0010h9uoctjjy1qm","slug":"mysql架构图.jpg","modified":1,"renderable":1},{"_id":"source/_posts/APISIX调研和使用/radixtree_init流程图.drawio.png","post":"ckkc0insc0007h9uofp0fmboq","slug":"radixtree_init流程图.drawio.png","modified":1,"renderable":1},{"_id":"source/_posts/APISIX调研和使用/radixtree_match流程图.drawio.png","post":"ckkc0insc0007h9uofp0fmboq","slug":"radixtree_match流程图.drawio.png","modified":1,"renderable":1},{"_id":"source/_posts/《C语言缺陷与陷阱》读书笔记/优化后汇编代码.png","post":"ckkc0insu000qh9uonz82bhvv","slug":"优化后汇编代码.png","modified":1,"renderable":1},{"_id":"source/_posts/《C语言缺陷与陷阱》读书笔记/原始汇编代码.png","post":"ckkc0insu000qh9uonz82bhvv","slug":"原始汇编代码.png","modified":1,"renderable":1},{"_id":"source/_posts/技术札记/ssh免密登录原理.png","post":"ckkc0int4001jh9uoki803htk","slug":"ssh免密登录原理.png","modified":1,"renderable":1},{"_id":"source/_posts/libipset源码分析/args.jpg","post":"ckkc0insm000kh9uoqzb8evk9","slug":"args.jpg","modified":1,"renderable":1},{"_id":"source/_posts/libipset源码分析/errcode.jpg","post":"ckkc0insm000kh9uoqzb8evk9","slug":"errcode.jpg","modified":1,"renderable":1},{"_id":"source/_posts/libipset源码分析/haship.jpg","post":"ckkc0insm000kh9uoqzb8evk9","slug":"haship.jpg","modified":1,"renderable":1},{"_id":"source/_posts/libipset源码分析/ipset.jpg","post":"ckkc0insm000kh9uoqzb8evk9","slug":"ipset.jpg","modified":1,"renderable":1},{"_id":"source/_posts/libipset源码分析/ipset_source_flow.png","post":"ckkc0insm000kh9uoqzb8evk9","slug":"ipset_source_flow.png","modified":1,"renderable":1},{"_id":"source/_posts/libipset源码分析/iptables-nfhipac-ipset.jpg","post":"ckkc0insm000kh9uoqzb8evk9","slug":"iptables-nfhipac-ipset.jpg","modified":1,"renderable":1},{"_id":"source/_posts/libipset源码分析/netlink数据关系.png","post":"ckkc0insm000kh9uoqzb8evk9","slug":"netlink数据关系.png","modified":1,"renderable":1},{"_id":"source/_posts/libipset源码分析/protocol.jpg","post":"ckkc0insm000kh9uoqzb8evk9","slug":"protocol.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/Location-of-netfilter-and-eBPF-hooks.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"Location-of-netfilter-and-eBPF-hooks.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/Netfilter hooks.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"Netfilter hooks.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/Netfilter-packet-flow.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"Netfilter-packet-flow.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/Netfilter内部数据包处理流程.drawio.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"Netfilter内部数据包处理流程.drawio.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/Netfilter扩展机制示意图.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"Netfilter扩展机制示意图.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/Netfilter架构.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"Netfilter架构.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/[iptables-链和表.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"[iptables-链和表.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/conntrack一般连接建立1.jpg","post":"ckkc0insg000ah9uoja2li8cu","slug":"conntrack一般连接建立1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/conntrack一般连接建立2.jpg","post":"ckkc0insg000ah9uoja2li8cu","slug":"conntrack一般连接建立2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/conntrack一般连接建立3.jpg","post":"ckkc0insg000ah9uoja2li8cu","slug":"conntrack一般连接建立3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/conntrack的存储.jpg","post":"ckkc0insg000ah9uoja2li8cu","slug":"conntrack的存储.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/ipset_source_flow.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"ipset_source_flow.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/ipt_entry存储分布示意图.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"ipt_entry存储分布示意图.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/iptables 与 ebtables 工作流图.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"iptables 与 ebtables 工作流图.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/iptables-表和链.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"iptables-表和链.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/iptables内核通信.jpg","post":"ckkc0insg000ah9uoja2li8cu","slug":"iptables内核通信.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/ip报文hook点.drawio.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"ip报文hook点.drawio.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/netfilter包过滤.drawio.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"netfilter包过滤.drawio.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/netfilter模块注册过程.drawio.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"netfilter模块注册过程.drawio.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/netlink数据关系.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"netlink数据关系.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/nf_ct_ext数据结构图.jpg","post":"ckkc0insg000ah9uoja2li8cu","slug":"nf_ct_ext数据结构图.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/setsockopt流程图.drawio.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"setsockopt流程图.drawio.png","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/期望链接.jpg","post":"ckkc0insg000ah9uoja2li8cu","slug":"期望链接.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Netfilter介绍及其实现原理/规则提交函数调用示意图.png","post":"ckkc0insg000ah9uoja2li8cu","slug":"规则提交函数调用示意图.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckkc0insb0006h9uo7qwvy1p6","category_id":"ckkc0ins90004h9uodge8omi9","_id":"ckkc0insh000bh9uop7iy6vxo"},{"post_id":"ckkc0inrr0000h9uojdwecfzz","category_id":"ckkc0ins90004h9uodge8omi9","_id":"ckkc0insj000eh9uotun0e8gk"},{"post_id":"ckkc0ins60002h9uoam0k0m5t","category_id":"ckkc0ins90004h9uodge8omi9","_id":"ckkc0insk000ih9uoj6c2wrt4"},{"post_id":"ckkc0insa0005h9uo37p0f6id","category_id":"ckkc0ins90004h9uodge8omi9","_id":"ckkc0insn000mh9uoi14darse"},{"post_id":"ckkc0insl000jh9uod1xwydim","category_id":"ckkc0insk000hh9uo51xzem51","_id":"ckkc0insu000rh9uohfp4efwf"},{"post_id":"ckkc0insg000ah9uoja2li8cu","category_id":"ckkc0insk000hh9uo51xzem51","_id":"ckkc0insw000vh9uouehcbxw7"},{"post_id":"ckkc0insm000kh9uoqzb8evk9","category_id":"ckkc0insk000hh9uo51xzem51","_id":"ckkc0insx000xh9uoqzazcwc0"},{"post_id":"ckkc0insi000dh9uo5c2dnigx","category_id":"ckkc0insn000nh9uooqr5zwk8","_id":"ckkc0insy0011h9uoc6ap4mx6"},{"post_id":"ckkc0insj000gh9uog5g4k2lp","category_id":"ckkc0insk000hh9uo51xzem51","_id":"ckkc0insz0013h9uozj0dxyzw"},{"post_id":"ckkc0insn000ph9uo7pqyx486","category_id":"ckkc0insx000zh9uoullwwsdp","_id":"ckkc0int2001ah9uou753lkag"},{"post_id":"ckkc0insz0012h9uopsccrkpq","category_id":"ckkc0insk000hh9uo51xzem51","_id":"ckkc0int3001fh9uoa9l26xr1"},{"post_id":"ckkc0int00016h9uoy11ozrmg","category_id":"ckkc0insk000hh9uo51xzem51","_id":"ckkc0int4001ih9uoy3cehgvk"},{"post_id":"ckkc0int10018h9uoxa8eo3iz","category_id":"ckkc0ins90004h9uodge8omi9","_id":"ckkc0int6001mh9uohnw47qmq"},{"post_id":"ckkc0insu000qh9uonz82bhvv","category_id":"ckkc0insz0015h9uob6iqjdo1","_id":"ckkc0int7001ph9uosfir92ki"},{"post_id":"ckkc0int2001bh9uoc3cxgsrj","category_id":"ckkc0insk000hh9uo51xzem51","_id":"ckkc0int8001th9uoy744v9lh"},{"post_id":"ckkc0int3001gh9uogjkbx90p","category_id":"ckkc0ins90004h9uodge8omi9","_id":"ckkc0int8001uh9uooz6wnawf"},{"post_id":"ckkc0int4001jh9uoki803htk","category_id":"ckkc0insk000hh9uo51xzem51","_id":"ckkc0int9001xh9uopje27fk6"},{"post_id":"ckkc0int6001nh9uowtwsjn4q","category_id":"ckkc0insk000hh9uo51xzem51","_id":"ckkc0inta001zh9uo8frlt54y"},{"post_id":"ckkc0insw000wh9uoez7c29k1","category_id":"ckkc0insz0015h9uob6iqjdo1","_id":"ckkc0inta0020h9uogog4fpfd"},{"post_id":"ckkc0insy0010h9uoctjjy1qm","category_id":"ckkc0insz0015h9uob6iqjdo1","_id":"ckkc0inta0022h9uoaz1wxmb8"}],"PostTag":[{"post_id":"ckkc0insg000ah9uoja2li8cu","tag_id":"ckkc0insj000fh9uo920428qw","_id":"ckkc0insn000oh9uokvtv4c8q"},{"post_id":"ckkc0insi000dh9uo5c2dnigx","tag_id":"ckkc0insn000lh9uo9k2ta0y8","_id":"ckkc0int00017h9uojjcx8p3x"},{"post_id":"ckkc0insi000dh9uo5c2dnigx","tag_id":"ckkc0insu000sh9uoxh5ch1sa","_id":"ckkc0int10019h9uoy7y6y5pl"},{"post_id":"ckkc0insi000dh9uo5c2dnigx","tag_id":"ckkc0insx000yh9uol0y25qyz","_id":"ckkc0int3001eh9uo51bpnefi"},{"post_id":"ckkc0insj000gh9uog5g4k2lp","tag_id":"ckkc0insz0014h9uow67haucg","_id":"ckkc0int4001hh9uobwouqpt6"},{"post_id":"ckkc0insl000jh9uod1xwydim","tag_id":"ckkc0int2001ch9uozodppwmy","_id":"ckkc0int7001oh9uoep8hfp97"},{"post_id":"ckkc0int6001nh9uowtwsjn4q","tag_id":"ckkc0insz0014h9uow67haucg","_id":"ckkc0int8001sh9uoiu9uxv1h"},{"post_id":"ckkc0insm000kh9uoqzb8evk9","tag_id":"ckkc0int2001ch9uozodppwmy","_id":"ckkc0inta0023h9uo81b0ft4f"},{"post_id":"ckkc0insm000kh9uoqzb8evk9","tag_id":"ckkc0int8001rh9uox7mrv8ck","_id":"ckkc0intb0024h9uop0ofvbxl"},{"post_id":"ckkc0insm000kh9uoqzb8evk9","tag_id":"ckkc0insx000yh9uol0y25qyz","_id":"ckkc0intb0026h9uofh1m2t4i"},{"post_id":"ckkc0insm000kh9uoqzb8evk9","tag_id":"ckkc0int9001yh9uod48qmig3","_id":"ckkc0intb0027h9uoa53gqgx1"},{"post_id":"ckkc0insu000qh9uonz82bhvv","tag_id":"ckkc0insx000yh9uol0y25qyz","_id":"ckkc0intc0029h9uou4s351pu"},{"post_id":"ckkc0insy0010h9uoctjjy1qm","tag_id":"ckkc0intb0025h9uo8ypilnuy","_id":"ckkc0intc002ch9uoiumnqcth"},{"post_id":"ckkc0insz0012h9uopsccrkpq","tag_id":"ckkc0insz0014h9uow67haucg","_id":"ckkc0intd002dh9uovm4hzr4m"}],"Tag":[{"name":"NETFILTER","_id":"ckkc0insj000fh9uo920428qw"},{"name":"TLV","_id":"ckkc0insn000lh9uo9k2ta0y8"},{"name":"TCP","_id":"ckkc0insu000sh9uoxh5ch1sa"},{"name":"C","_id":"ckkc0insx000yh9uol0y25qyz"},{"name":"工具","_id":"ckkc0insz0014h9uow67haucg"},{"name":"IPSET","_id":"ckkc0int2001ch9uozodppwmy"},{"name":"NETLINK","_id":"ckkc0int8001rh9uox7mrv8ck"},{"name":"GO","_id":"ckkc0int9001yh9uod48qmig3"},{"name":"mysql","_id":"ckkc0intb0025h9uo8ypilnuy"}]}}